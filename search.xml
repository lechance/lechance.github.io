<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Conceptions of Java</title>
    <url>/2015/02/13/notes-programming-conceptions/</url>
    <content><![CDATA[<h4 id="Programming-Conceptions"><a href="#Programming-Conceptions" class="headerlink" title="Programming Conceptions"></a>Programming Conceptions</h4><p>独立的地址空间使得进程共享状态信息变得更加困难。为了共享信息，他们必须使用显式的ＩＰＣ(interprocess communication, IPC)机制。基于进程设计的另一个缺点是，他们往往比较慢，因为进程控制和IPC的开销都很高．</p>
<p>一个线程(thread)就是运行在一个进程上下文中的逻辑流．线程由内核调度．每个线程都有它自己的线程上下文(thread context)，包含一个唯一的整数线程ID(Thread ID,TID),栈，栈指针，程序计数器,通用目的寄存器和条件码．所有运行在一个进程里的线程共享该进程的虚拟地址空间．<br>基于线程的逻辑流结合了基于进程和基于I&#x2F;O多路复用的流的特性．</p>
<p>thread routine 线程例程</p>
<p>分离线程：在任何一个时间点上，线程是可结合的（joinable）或者是可以分离的（detached）的．一个可结合的线程能够被其他线程收回和杀死．在被其他线程收回之前，它的存储资源（例如栈）是不释放的．相反，一个分离的线程是不能被其他线程回收和杀死的．他的存储器资源在它终止时由系统自动释放．<br>默认情况下，线程是被创建成可结合的．为了避免存储器泄露，每个线程都应该要么被其他线程显式地收回，要么通过调用pthread_detached函数被分离．</p>
<h4 id="Operator-in-Java"><a href="#Operator-in-Java" class="headerlink" title="Operator in Java"></a>Operator in Java</h4><h5 id="Arithmetic-Operators"><a href="#Arithmetic-Operators" class="headerlink" title="Arithmetic Operators"></a>Arithmetic Operators</h5><p>Mathematical (or arithmetic) operators are used in performing mathematical operations in an arithmetic expression. The various arithmetic operators are listed in Table SR2-1.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">Operator							Symbol</span><br><span class="line"></span><br><span class="line">Addition					  		+</span><br><span class="line">Increment					  		++</span><br><span class="line">Division					  		/</span><br><span class="line">Unary Negation					  		~</span><br><span class="line">Unary Minus							-</span><br><span class="line">Multiplication					  		*</span><br><span class="line">Logical NOT							!</span><br><span class="line">Unary  Plus							+</span><br><span class="line">Subtraction							-</span><br><span class="line">Decrement						  	--</span><br><span class="line">Remainder					  		%</span><br><span class="line">Typecasting					  		(<span class="built_in">type</span>)</span><br></pre></td></tr></table></figure></div>

<p>TABLE SR2-1.   Arithmetic Operators</p>
<h5 id="Unary-Operators"><a href="#Unary-Operators" class="headerlink" title="Unary Operators"></a>Unary Operators</h5><p>As the name indicates, unary operators operate on a single operand. We discuss the four unary<br>operators in this section. You have already seen the use of the unary minus <code>(-)</code> operator in the<br>previous example. The unary minus operator negates the operand. Likewise, a unary plus <code>(+)</code><br>operator is available in Java.<br>Tip:The unary plus operator is included for symmetry only and has no<br>effect on the sign of its operand.<br>The increment (++) and decrement (–) operators increment or decrement the value of their<br>operand by 1. These are also called “auto” operators because they operate and assign the result<br>automatically. The implicit operand for both the operators is 1, which means that the given<br>operand value is either increased or decreased by exactly 1, depending on the operation.</p>
<h5 id="Post-and-Pre-Operators"><a href="#Post-and-Pre-Operators" class="headerlink" title="Post and Pre Operators"></a>Post and Pre Operators</h5><p>The two “auto” operators can be applied to a variable as a suffix or a prefix. Depending on which<br>side of the variable they are applied, they produce different results.</p>
<p>String Concatenation<br>In Java, the + operator, when applied to a string data type, performs concatenation of strings.<br>Tip<br>In other languages, the use of the + operator for string concatenation<br>is considered a feature of operator overloading. Java does not support<br>operator overloading in the sense that a developer cannot redefine<br>the meaning of any of the operators. The string concatenation is<br>equivalent to operator overloading defined internally in Java.</p>
<h5 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h5><p>Oftentimes, in a program statement, you assign the value of one data type to another. For example,<br>you may assign an integer variable to a float type, or vice versa. When you assign an integer to a<br>float type, there is no loss of magnitude.</p>
<p><em>Caution:</em></p>
<blockquote>
<p>Converting int to float may result in loss of precision.</p>
</blockquote>
<h5 id="Bitwise-Operators"><a href="#Bitwise-Operators" class="headerlink" title="Bitwise Operators"></a>Bitwise Operators</h5><p>Bitwise operators are used to test, set, or shift actual bits in a byte or a word that corresponds to<br>the char and int data types. These operators cannot perform operations on data types such as<br>float, double, and boolean. Table SR2-4 lists the various bitwise operators.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">Operator					   Meaning</span><br><span class="line"></span><br><span class="line">&amp;					  		AND</span><br><span class="line">&gt;&gt;					  		Right-<span class="built_in">shift</span></span><br><span class="line">~					  		NOT</span><br><span class="line">&lt;&lt;					  		<span class="string">Left-shift</span></span><br><span class="line"><span class="string">^					  		XOR</span></span><br><span class="line"><span class="string">|					  		OR</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;					  		Right-shift with zero fill</span></span><br></pre></td></tr></table></figure></div>

<p>TABLE SR2-4.	  Bitwise Operators</p>
<p>These operators perform the well-known Boolean operations, as their names suggest.</p>
<h5 id="Logical-Conditional-Operators"><a href="#Logical-Conditional-Operators" class="headerlink" title="Logical Conditional Operators"></a>Logical Conditional Operators</h5><p>As mentioned earlier, logical operators can take one, two, or three operands. The lists of operators<br>that fall in this category are given in Table SR2-5. The first two operators operate on two operands,<br>the NOT operator operates on a single operand, and the ternary conditional operator takes three<br>operands.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">Operator						 Meaning</span><br><span class="line">&amp;&amp;					  		AND</span><br><span class="line">!					  		NOT</span><br><span class="line">||					  		OR</span><br><span class="line">?:					  		ternary condition</span><br></pre></td></tr></table></figure></div>

<p>TABLE SR2-5.    Logical Operators</p>
<h5 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h5><p>Relational operators and used to compare two values.The output of the comparison is always a<br>Boolean value, which is true or false. The various relational operators are listed in Table SR2-6.<br>These operators generally operate on numeric and character data types.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Operation                Operator</span><br><span class="line"></span><br><span class="line">Greater than                &gt;</span><br><span class="line">Not equal to                !=</span><br><span class="line">Less than or equal to       &lt;=</span><br><span class="line">Greater than or equal to    &gt;=</span><br><span class="line">Less than                   &lt;</span><br><span class="line">Equal to                    ==</span><br><span class="line">			instanceof</span><br></pre></td></tr></table></figure></div>

<p>TABLE SR2-6.   Relational Operators</p>
<h5 id="Assignment-Operators"><a href="#Assignment-Operators" class="headerlink" title="Assignment Operators"></a>Assignment Operators</h5><p>The basic assignment operator is the equal to (&#x3D;)operator,where the right-side value of the expression is assigned to the variable defined on the left-side of the expression.<br>The various assignment operators are listed in Table SR2-7.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">Operation	(操作)					 Operator(操作符)</span><br><span class="line">Assignment					          =</span><br><span class="line">Add and assign					          +=</span><br><span class="line">Subtract and assign					  -=</span><br><span class="line">Multiply and assign					  *=</span><br><span class="line">Divide and assign					  /=</span><br><span class="line">Modulo divide and assign				  %=</span><br><span class="line">Left <span class="built_in">shift</span> and assign					  &lt;&lt;=</span><br><span class="line">Right <span class="built_in">shift</span> and assign					  &gt;&gt;=</span><br><span class="line">Unsigned right <span class="built_in">shift</span> and assign				  &gt;&gt;&gt;=</span><br><span class="line">Bitwise logical AND and assign				  &amp;=</span><br><span class="line">Bitwise OR and assign					  |=</span><br><span class="line">Bitwise exclusive OR and assign			          ^=</span><br></pre></td></tr></table></figure></div>

<p>TABLE SR2-7.            Assignment Operators</p>
<h5 id="Separators"><a href="#Separators" class="headerlink" title="Separators"></a>Separators</h5><p>The following nine ASCII characters are the separators (punctuators) in Java:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Separator : one of</span><br><span class="line">( )  &#123;  &#125;  [  ]   ;   ,   .</span><br></pre></td></tr></table></figure></div>
<p>They carry special meaning when used in program statements.For example, the parentheses are used in a function call and typecasting. The curly braces are used for compounding statements. The square brackets are used in array declarations. The semicolon is used in terminating a program statement; a comma is used in separating multiple statements and declarations. Finally, a dot is used in defining the package hierarchy or calling object methods. You will learn the use of these separators in the book as we delve deeper into the language syntax.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Sample post</title>
    <url>/2016/01/15/sample-post/</url>
    <content><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?</p>
<p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.</p>
]]></content>
      <categories>
        <category>jekyll update</category>
      </categories>
  </entry>
  <entry>
    <title>Welcome to Jekyll!</title>
    <url>/2016/01/15/welcome-to-jekyll/</url>
    <content><![CDATA[<p>You’ll find this post in your <code>_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code>jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>
<p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>
<p>Jekyll also offers powerful support for code snippets:</p>
<div class="highlight-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_hi</span>(<span class="params">name</span>)</span><br><span class="line">  puts <span class="string">&quot;Hi, <span class="subst">#&#123;name&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">print_hi(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line"><span class="comment">#=&gt; prints &#x27;Hi, Tom&#x27; to STDOUT.</span></span><br></pre></td></tr></table></figure></div>

<p>Check out the <a class="link"   href="http://jekyllrb.com/docs/home" >Jekyll docs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info on how to get the most out of Jekyll. File all bugs&#x2F;feature requests at <a class="link"   href="https://github.com/jekyll/jekyll" >Jekyll’s GitHub repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. If you have questions, you can ask them on <a class="link"   href="https://talk.jekyllrb.com/" >Jekyll Talk <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
]]></content>
      <categories>
        <category>jekyll update</category>
      </categories>
  </entry>
  <entry>
    <title>Java Reflection Tutorial</title>
    <url>/2015/05/01/java-reflection-tutorial/</url>
    <content><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p><em>Reflection</em> is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the Java virtual machine. This is a relatively advanced feature and should be used only by developers who have a strong grasp of the fundamentals of the language. With that caveat in mind, reflection is a powerful technique and can enable application to perform operations which would otherwise be impossible.</p>
<h4 id="Drawbacks-of-Reflection"><a href="#Drawbacks-of-Reflection" class="headerlink" title="Drawbacks of Reflection"></a>Drawbacks of Reflection</h4><p><em>Reflection</em> is powerful, but should not be used indiscriminatey. If it is possible to perform an operation without using reflection, then it is preferable to avoid using it. The following concerns should be kept in mind when accessing code via reflection.</p>
<ul>
<li>Performance Overhead<br>  Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.</li>
<li>Security Restrictions<br>  Reflection requires a runtime permission which may not be present when running under a security manager. This is an important consideration for code which has to run in a restricted security context, such as in an Applet.</li>
<li>Exposure of Internals<br>  Since reflection allows code to perform operations that would be illegal in non-reflective code, such as accessing private fields and methods, the use of reflection can result in unexpected side-effects, which may render code dysfunctional and may destroy portability. Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.</li>
</ul>
<h4 id="Simple-Sample"><a href="#Simple-Sample" class="headerlink" title="Simple Sample"></a>Simple Sample</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Pluginable</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Reflection</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;defaultValue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isDebugMode</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TestDemo Created by lechance .</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation(value = &quot;Non-defaultValue&quot;, isDebugMode = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">implements</span> <span class="title class_">Reflection</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">mSync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Test</span> <span class="variable">Instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.err.println(Test.class.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String strPubAttribute;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String strProAttribute;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String strPriAttribute;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//the fields from constructor</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//default constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(<span class="type">int</span> id, String description, String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(description);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Test.class.newInstance().foo();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;this string generated form Reflection mechanism. Argument is: &quot;</span> + input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                Instance = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">le</span> &#123;</span><br><span class="line">        &#125;  <span class="comment">//local class</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;The name of the class: &quot;</span> + <span class="built_in">this</span>.getClass().getName());</span><br><span class="line">        print(<span class="string">&quot;isAssignableFrom&lt;Test.class&gt;: &quot;</span> + <span class="built_in">this</span>.getClass().isAssignableFrom(Test.class));</span><br><span class="line">        print(<span class="string">&quot;isLocalClass: &quot;</span> + le.class.isLocalClass());</span><br><span class="line">        print(<span class="string">&quot;isInterface: &quot;</span> + Pluginable.class.isInterface());</span><br><span class="line">        print(<span class="string">&quot;CanonicalName: &quot;</span> + <span class="built_in">this</span>.getClass().getCanonicalName());</span><br><span class="line">        print(<span class="string">&quot;getTypeName: &quot;</span> + <span class="built_in">this</span>.getClass().getTypeName());</span><br><span class="line">        print(<span class="built_in">this</span>.getClass().asSubclass(Reflection.class).getSimpleName());</span><br><span class="line">        print(<span class="built_in">this</span>.getClass().getDeclaredAnnotations()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            print(<span class="built_in">this</span>.getClass().getDeclaredField(<span class="string">&quot;strPubAttribute&quot;</span>).getType());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            print(<span class="built_in">this</span>.getClass().getMethod(<span class="string">&quot;testMethod&quot;</span>, java.lang.String.class));</span><br><span class="line">            <span class="built_in">this</span>.getClass().getMethod(<span class="string">&quot;testMethod&quot;</span>, java.lang.String.class).invoke(Test.class.newInstance(), <span class="string">&quot;le&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;---------------getMethods()----Public--Method---------&quot;</span>);</span><br><span class="line">        Method[] methods = <span class="built_in">this</span>.getClass().getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            print(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;---------------getMethods()----declared--Methods---------&quot;</span>);</span><br><span class="line">        Method[] methods1 = <span class="built_in">this</span>.getClass().getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods1) &#123;</span><br><span class="line">            print(m.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Constructor[] constructors = <span class="built_in">this</span>.getClass().getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : constructors) &#123;</span><br><span class="line">           print(<span class="string">&quot;Constructor Name: &quot;</span> + c.getName() + <span class="string">&quot; Modifiers : &quot;</span> + c.getModifiers() + <span class="string">&quot;ParameterCount: &quot;</span> + c.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getEnclosingMethod();</span><br><span class="line">        print(<span class="string">&quot;getEnclosingMethod: &quot;</span> + ms);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Object</span>&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnotherClass</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><em>Refer to <a class="link"   href="https://docs.oracle.com/javase/tutorial/reflect/"  title="java tutorial">Java Tutorial <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>reflection</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>what is minifyEnabled</title>
    <url>/2015/05/03/what-is-minifyEnabled/</url>
    <content><![CDATA[<p>minify is an Android tool that will decrease the size of your application when you go to build it. It’s extremely useful as it means smaller apk files! It detects any code or libraries that aren’t being used and ignores them from your final apk.</p>
<p>The only “disadvantage” to using minify is that if a user experiences a crash and reports it to you, the code is obfuscated and just looks like jumble! I put disadvantage in quotes there because it does actually assist in preventing people from reverse engineering your app to find exploits&#x2F;passwords&#x2F;API keys. See <a class="link"   href="http://developer.android.com/tools/help/proguard.html#decoding" >this section of the ProGuard documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for details on how to decode a stack trace (ProGuard got renamed to minify but it is still called ProGuard in the documentation).</p>
<p>One important note though! If you’re using minify, be sure to save your decoding key for EVERY release. You can’t expect every one of your users to be running the latest version of your app so if they get a crash, you want to be able to read all of the crash logs, for every version.</p>
<p>Your decode key is stored under the build&#x2F;outs directory in a mapping.txt file. Be sure to save it in a safe place! Also, note that the mapping.txt file will be overwritten for every app release so give it a new name and I’d also recommend you store it elsewhere than the build&#x2F;outs directory in case it gets wiped for some reason (Hopefully not but, best to be on the safe side!)</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>proGuard</tag>
        <tag>minifyEnabled</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2015/06/28/markdown-overview/</url>
    <content><![CDATA[<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p><em>Before I start to write a blog, I wourld like to do some <strong>Markdown</strong> syntax summary. I think only of this “pen” very skilled master, I can write code to change the world. So, get started.</em></p>
<h4 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h4><p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to wirte using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). For more detailed information of <em>Markdown</em> visit <a class="link"   href="http://daringfireball.net/projects/markdown/" >markdown <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> website.</p>
<h4 id="Syntax-Cheatsheet"><a href="#Syntax-Cheatsheet" class="headerlink" title="Syntax Cheatsheet:"></a>Syntax Cheatsheet:</h4><h5 id="Phrase-Emphasis"><a href="#Phrase-Emphasis" class="headerlink" title="Phrase Emphasis"></a>Phrase Emphasis</h5><pre><code> *italic*	**bold**
 _italic_	__bold__
</code></pre>
<h5 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h5><p>Inline:</p>
<pre><code>An [example](http://url.com/ &quot;title&quot;)
</code></pre>
<p> Reference-style labels (titles are optional)</p>
<pre><code>An [example][id]. Then, anywhere else in the doc, define te link:
    
        [id]: https://example.com/ &quot;title&quot;
</code></pre>
<h5 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h5><p>Inline (title are optional):</p>
<pre><code>    ![alt text](/path/img.png &quot;title&quot;)
</code></pre>
<p>Reference-style:</p>
<pre><code>![alt text][id]
[id]:/url/to/img.png &quot;title&quot;
</code></pre>
<span id="more"></span>

<h5 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h5><p>Setext-style:</p>
<hr>
<pre><code>Header 1
------
</code></pre>
<p>######atx-style (closing #’s are optional):</p>
<pre><code># head 1 ##
## head 2 ##
###### header 3 ######
</code></pre>
<h5 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h5><p>Odered, without paragraphs:</p>
<pre><code>   1. 	foo
   2. 	bar
</code></pre>
<p>Unordered, with paragraphs:</p>
<pre><code>*	A list itme.
    with multiple paragraphs.
#	bar
</code></pre>
<p>You can nest them:</p>
<pre><code>*	Abada
    * answer
*	Baadsa
    1.	bunk
    2.	bupkd
        *  DFSFSIE
    3. busdfa
*	Cusning
</code></pre>
<p>#####Blockquotes</p>
<pre><code>&gt; Email-style angle brackets
&gt; are used for blockquotes.

&gt; &gt; And, they can be nested.

&gt; #### Headers in blockquotes

&gt;
&gt; * You can quote a list.
&gt; * etc.
</code></pre>
<p>#####Code Spans<br>    <code>&lt;code&gt;</code> spans are delimited by backticks.</p>
<pre><code>You can include literal backticks like `` `this` ``.
</code></pre>
<p>eg:<br><code><br>public static void main(String[] args)&#123;<br>    System.out.printf("hello world");<br>&#125;<br></code><br>or</p>
<p><code> `this` </code></p>
<p>#####Preformatted Code Blocks<br>Indent every line of a code block by at least 4 spaces or tab.</p>
<pre><code>This is a normal pargraph.

    This is a preformatted
    code block.
</code></pre>
<p>#####Horizontal Rules<br>Three or more dashes or asterisks:</p>
<pre><code>---
* * *
- - - -
</code></pre>
<p>example:</p>
<hr>
<hr>
<hr>
<p>#####Manual Line Breaks<br>End a line with two or more spaces:</p>
<pre><code>Roses are read,
Violets are blue.
</code></pre>
<p>![lechance][le-avatar]<br>[le-avatar]: &#x2F;images&#x2F;avatar.png “Lechance”</p>
]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>500px api-readme</title>
    <url>/2015/08/19/400px-api-readme/</url>
    <content><![CDATA[<h1 id="500px-API"><a href="#500px-API" class="headerlink" title="500px API"></a>500px API</h1><p>500px API provides programmatic access to 500px functionality and content.<br>Version 1 of the API is limited to the essentials of the website’s functionality: viewing feature streams, photo information and comments, as well as user profiles.</p>
<p>The API is <a class="link"   href="http://en.wikipedia.org/wiki/Representational_State_Transfer"  title="RESTful">REST API <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>and uses <a class="link"   href="http://oauth.net/"  title="OAuth">OAuth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 1.0a for user authentication purposes.<br>Currently, return format for all endpoints is <a class="link"   href="http://json.org/"  title="JSON">JSON <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<p>You can try our API in <a class="link"   href="http://bitly.com/api500px" >console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (<a class="link"   href="http://bitly.com/api500px" >http://bitly.com/api500px <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>
<p>See <a class="link"   href="http://status.500px.com/" >status.500px.com <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for API status updates, outages, and scheduled maintenance.</p>
<hr>
<h2 id="Checklist"><a href="#Checklist" class="headerlink" title="Checklist"></a>Checklist</h2><ul>
<li><a class="link"   href="http://bitly.com/api500px" >Try the API console <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/500px/api-documentation#what-do-i-need-to-know-before-i-start-using-the-api" >See if the concepts used by the API are familiar to you <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Familiarize yourself with API functionality</li>
<li>Read the 500px <a class="link"   href="https://github.com/500px/api-documentation/blob/master/basics/terms_of_use.md" >API Terms of Use <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="http://500px.com/settings/applications" >Register your application <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and get OAuth consumer key and secret</li>
<li>Hack away</li>
</ul>
<hr>
<span id="more"></span>

<h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><ul>
<li><strong><a class="link"   href="https://github.com/500px/api-documentation/blob/master/basics/formats_and_terms.md" >Formats and Terms <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/api-documentation/blob/master/basics/terms_of_use.md" >API Terms of Use <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ul>
<li><strong><a class="link"   href="http://500px.github.com/500px-js-sdk" >JavaScript <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/api-documentation/blob/master/examples/iOS/API%20Tutorials.md" >iOS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/api-documentation/blob/master/examples/Ruby/" >Ruby <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/api-documentation/blob/master/examples/PHP/PHP.md" >PHP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
</ul>
<h2 id="Changes"><a href="#Changes" class="headerlink" title="Changes"></a>Changes</h2><ul>
<li>2014-03-27 Deprecated photo object’s image_url key.</li>
</ul>
<h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><ul>
<li><strong><a class="link"   href="https://github.com/500px/500px-js-sdk" >JavaScript <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/500px-android-sdk" >Android <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/500px-iOS-api" >iOS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
</ul>
<h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><h4 id="Photo-Resources"><a href="#Photo-Resources" class="headerlink" title="Photo Resources"></a>Photo Resources</h4><ul>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/GET_photos.md"><code>GET</code> photos</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/GET_photos_search.md"><code>GET</code> photos&#x2F;search</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/GET_photos_id.md"><code>GET</code> photos&#x2F;:id</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/GET_photos_id_comments.md"><code>GET</code> photos&#x2F;:id&#x2F;comments</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/GET_photos_id_votes.md"><code>GET</code> photos&#x2F;:id&#x2F;votes</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/PUT_photos_id.md"><code>PUT</code> photos&#x2F;:id</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/POST_photos.md"><code>POST</code> photos</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/POST_photos_upload.md"><code>POST</code> photos&#x2F;upload</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/POST_photos_id_vote.md"><code>POST</code> photos&#x2F;:id&#x2F;vote</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/DELETE_photos_id_vote.md"><code>DELETE</code> photos&#x2F;:id&#x2F;vote</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/POST_photos_id_tags.md"><code>POST</code> photos&#x2F;:id&#x2F;tags</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/POST_photos_id_comments.md"><code>POST</code> photos&#x2F;:id&#x2F;comments</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/POST_photos_id_report.md"><code>POST</code> photos&#x2F;:id&#x2F;report</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/DELETE_photos_id.md"><code>DELETE</code> photos&#x2F;:id</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/photo/DELETE_photos_id_tags.md"><code>DELETE</code> photos&#x2F;:id&#x2F;tags</a></strong></li>
</ul>
<h4 id="Upload-Method"><a href="#Upload-Method" class="headerlink" title="Upload Method"></a>Upload Method</h4><ul>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/upload/POST_upload.md"><code>POST</codE> upload</a></strong></li>
</ul>
<h4 id="User-Resources"><a href="#User-Resources" class="headerlink" title="User Resources"></a>User Resources</h4><ul>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/GET_users.md"><code>GET</code> users</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/GET_users_show.md"><code>GET</code> users&#x2F;show</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/GET_users_id_friends.md"><code>GET</code> users&#x2F;:id&#x2F;friends</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/GET_users_id_followers.md"><code>GET</code> users&#x2F;:id&#x2F;followers</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/GET_users_search.md"><code>GET</code> users&#x2F;search</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/POST_users_id_friends.md"><code>POST</code> users&#x2F;:id&#x2F;friends</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/user/DELETE_users_id_friends.md"><code>DELETE</code> users&#x2F;:id&#x2F;friends</a></strong></li>
</ul>
<h4 id="Gallery-Resources"><a href="#Gallery-Resources" class="headerlink" title="Gallery Resources"></a>Gallery Resources</h4><ul>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/GET_galleries.md"><code>GET</code> users&#x2F;:user_id&#x2F;galleries</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/GET_galleries_id.md"><code>GET</code> users&#x2F;:user_id&#x2F;galleries&#x2F;:id</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/GET_galleries_id_items.md"><code>GET</code> users&#x2F;:user_id&#x2F;galleries&#x2F;:id&#x2F;items</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/GET_galleries_id.md"><code>GET</code> users&#x2F;:user_id&#x2F;galleries&#x2F;:id&#x2F;share_url</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/PUT_galleries_id.md"><code>PUT</code> users&#x2F;:user_id&#x2F;galleries&#x2F;:id</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/PUT_galleries_id_items.md"><code>PUT</code> users&#x2F;:user_id&#x2F;galleries&#x2F;:id&#x2F;items</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/PUT_galleries_reposition.md"><code>PUT</code> users&#x2F;:user_id&#x2F;galleries&#x2F;reposition</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/POST_galleries.md"><code>POST</code> users&#x2F;:user_id&#x2F;galleries</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/galleries/DELETE_galleries_id.md"><code>DELETE</code> users&#x2F;:user_id&#x2F;galleries&#x2F;:id</a></strong></li>
</ul>
<h4 id="Collections-Sets-Resources"><a href="#Collections-Sets-Resources" class="headerlink" title="Collections&#x2F;Sets Resources"></a>Collections&#x2F;Sets Resources</h4><ul>
<li><strong>DEPRECATED</strong>.  Please use <a href="#gallery-resources">Gallery Resources</a> instead</li>
</ul>
<h4 id="Comment-Resources"><a href="#Comment-Resources" class="headerlink" title="Comment Resources"></a>Comment Resources</h4><ul>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/endpoints/comments/POST_comments_id_comments.md"><code>POST</code> comments&#x2F;:id&#x2F;comments</a></strong></li>
</ul>
<h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><ul>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/authentication/POST_oauth_requesttoken.md"><code>POST</code> oauth&#x2F;request_token</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/authentication/POST_oauth_authorize.md"><code>POST</code> oauth&#x2F;authorize</a></strong></li>
<li><strong><a href="https://github.com/500px/api-documentation/blob/master/authentication/POST_oauth_accesstoken.md"><code>POST</code> oauth&#x2F;access_token</a></strong></li>
<li><strong><a class="link"   href="https://github.com/500px/api-documentation/blob/master/authentication/upload_key.md" >Upload key <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></li>
</ul>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="What-do-I-need-to-know-before-I-start-using-the-API"><a href="#What-do-I-need-to-know-before-I-start-using-the-API" class="headerlink" title="What do I need to know before I start using the API?"></a>What do I need to know before I start using the API?</h3><p>Got rust on your skills? No worries. Here are the docs you might need to get started:</p>
<ul>
<li>HTTPS protocol</li>
<li><a class="link"   href="http://en.wikipedia.org/wiki/Representational_State_Transfer" >REST software pattern <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Authentication with <a class="link"   href="http://oauth.net/core/1.0a/" >OAuth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (or the official <a class="link"   href="http://hueniverse.com/oauth/" >Beginner’s Guide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</li>
<li>Data serialization with <a class="link"   href="http://json.org/" >JSON <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> (or see a <a class="link"   href="http://www.webmonkey.com/2010/02/get_started_with_json/" >quick tutorial <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</li>
</ul>
<h3 id="How-do-I-connect-to-the-500px-com-API"><a href="#How-do-I-connect-to-the-500px-com-API" class="headerlink" title="How do I connect to the 500px.com API?"></a>How do I connect to the 500px.com API?</h3><p>The API is only available to authenticated clients. Clients should authenticate users using <a class="link"   href="http://oauth.net/core/1.0a/" >OAuth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. Once authenticated, you need to request a resource from one of the endpoints using HTTPS. Generally, reading any data is done through a request with GET method. If you want our server to create, update or delete a given resource, POST or PUT methods are required.</p>
<h3 id="What-return-formats-do-you-support"><a href="#What-return-formats-do-you-support" class="headerlink" title="What return formats do you support?"></a>What return formats do you support?</h3><p>500px API currently returns data in <a class="link"   href="http://json.org/"  title="JSON">JSON <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> format.</p>
<h3 id="What-kind-of-authentication-is-required"><a href="#What-kind-of-authentication-is-required" class="headerlink" title="What kind of authentication is required?"></a>What kind of authentication is required?</h3><p>Applications must identify themselves to access any resource.<br>If your application only needs read-only access and does not authenticate the user, <strong>consumer_key</strong> containing a valid Consumer Key parameter should be specified in the query string. Otherwise, <a class="link"   href="https://github.com/500px/api-documentation/tree/master/authentication" >OAuth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or upload key authentication takes care of identifying the application as well as the user accessing the API.</p>
<h3 id="Is-there-a-request-rate-limit"><a href="#Is-there-a-request-rate-limit" class="headerlink" title="Is there a request rate limit?"></a>Is there a request rate limit?</h3><p>There is a rate limit of 1,000,000 API requests per month per account. We will contact you and if required disable your application if we find that your application is exceeding this limit or interfering with our system’s stability.This revised rate limit will come into effect May 1, 2014.</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>500xp</tag>
      </tags>
  </entry>
  <entry>
    <title>Merry Christmas</title>
    <url>/2015/12/22/merry-christmas/</url>
    <content><![CDATA[<p>Vimeo</p>
<iframe width="100%" height="75%" src="//player.vimeo.com/video/82090131" frameborder="0" allowfullscreen></iframe>
]]></content>
      <tags>
        <tag>merry christmas</tag>
        <tag>video</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript HTML DOM</title>
    <url>/2015/12/23/javascript-html-dom/</url>
    <content><![CDATA[<h4 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h4><p><strong>When the web page is loaded, the browser will create a document object model of the page.</strong><br><em>HTML DOM Model is constructed as an object tree</em></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/html-dom-tree.png"
                      alt="html-tree"
                ></p>
<p><strong>Through the programmable object model <em>JavaScript</em> was enough to create dynamic HTML</strong></p>
<blockquote>
<ul>
<li>JavaScript can change all the HTML elements on your page</li>
<li>JavaScript can change all the HTML in the page properties</li>
<li>JavaScript can change all the CSS styles in the page</li>
<li>JavaScript to be able to respond to all events page</li>
</ul>
</blockquote>
<h5 id="Finding-HTML-elements"><a href="#Finding-HTML-elements" class="headerlink" title="Finding HTML elements"></a>Finding HTML elements</h5><p>Typically, You need to manipulate HTML elements with <em>JavaScript</em><br><em>In order to do this, you must first locate the element, There are three ways to do this:</em></p>
<ul>
<li>HTML element by ID found</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">var x =document.getElementById(&quot;intro&quot;);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>By label name to find HTML elements</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">First find the id = &quot;main&quot; element,and then look for the &quot;main&quot; all of the elements</span><br><span class="line"></span><br><span class="line">  var x =document.getElementById(&quot;main&quot;);</span><br><span class="line"></span><br><span class="line">  var y =x.getElementsByTagName(&quot;p&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>Through the class name to find HTML elements</li>
</ul>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">Find HTML elements by class name is not valid in IE 5,6,7,8</span><br></pre></td></tr></table></figure></div>

<h5 id="Change-HTML-contents"><a href="#Change-HTML-contents" class="headerlink" title="Change HTML contents"></a>Change HTML contents</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>= <span class="string">&quot;new HTML&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<h5 id="Change-HTML-attributes"><a href="#Change-HTML-attributes" class="headerlink" title="Change HTML attributes"></a>Change HTML attributes</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">src</span>=<span class="string">&quot;landscape.png&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<h5 id="Change-HTML-CSS-Cascading-Style-Sheets"><a href="#Change-HTML-CSS-Cascading-Style-Sheets" class="headerlink" title="Change HTML CSS (Cascading Style Sheets)"></a>Change HTML CSS (Cascading Style Sheets)</h5><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Syntax</span>:</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">style</span>.<span class="property">property</span>=<span class="string">&quot;new style&quot;</span></span><br></pre></td></tr></table></figure></div>
<h5 id="Adding-and-Removing-nodes-HTML-element"><a href="#Adding-and-Removing-nodes-HTML-element" class="headerlink" title="Adding and Removing nodes (HTML element)"></a>Adding and Removing nodes (HTML element)</h5><hr>
<ul>
<li>Adding node</li>
</ul>
<span id="more"></span>

<p><em>If you need to add new elements to the HTML DOM, you must first create the element (element node), and then append the element to an existing element.</em></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>this is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>this is an another paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> para=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> node=<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;this a new paragraph&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	para.<span class="title function_">appendChild</span>(node);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> element=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	element.<span class="title function_">appendChild</span>(para);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>Removing node</li>
</ul>
<p><em>If you need to remove HTML elements, you must first obtain the parent element of the element.</em></p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>this is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>this is an another paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> parent=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> child=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  parent.<span class="title function_">removeChild</span>(child);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Css Beginner Tutorial</title>
    <url>/2015/12/30/css-beginner-tutorial/</url>
    <content><![CDATA[<p><strong>CSS</strong>, or <strong>Cascading Styles Sheets</strong>, is a way to style and prsent HTML.  Whereas the HTML is the <strong>meaning</strong> or <strong>content</strong>, the style sheet is the <strong>presentation</strong> of that document.</p>
<p>Styles don’t smell or taste anything like HTML, they have a format of <strong>property:value</strong> and most properties can be applied to most HTML tags.</p>
<h3 id="Contents"><a href="#Contents" class="headerlink" title="Contents"></a>Contents</h3><h4 id="Applying-CSS-The-different-ways-you-can-apply-CSS-to-HTML"><a href="#Applying-CSS-The-different-ways-you-can-apply-CSS-to-HTML" class="headerlink" title="Applying CSS - The different ways you can apply CSS to HTML"></a><code>Applying CSS</code> - The different ways you can apply CSS to HTML</h4><blockquote>
<p>There are three ways to apply CSS to HTML tags using the <code>style</code> attribute.</p>
</blockquote>
<ul>
<li><p>   <strong>In-line</strong><br>In-line styles are plonked straight into the HTML tags use the <code>style</code> attribute.<br>They look something like this:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> style=&quot;<span class="attribute">color</span>: read<span class="string">&quot;&gt;text&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>This will make that specific paragraph red.</p>
<p> But, if you remember, the best-practice approach is that the HTML should be a stand-alone, <strong>presentation free</strong> document, and so in-line styles should be avoided wherever possible.</p>
</li>
<li><p>   <strong>Internal</strong></p>
</li>
</ul>
<p>Embeded, or internal, styles are used for the whole page. Inside the <code>head</code> element, the <code>style</code> tags surround all of the styles for the page.</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Css Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: read;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<p>This willl make all of the paragraphs in the page red and all of the links blue.</p>
<p>Although preferable to soiling our HTML with inline presentation, It is similarly usually preferable to keep the HTML and the CSS files separate, and so we are left with our savior…</p>
<ul>
<li>   <strong>External</strong></li>
</ul>
<p>External styles are used for the whole, mutiple-page website. There is a <strong>separate CSS file</strong>, which will simply look something like:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: read;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>If this file is saved as “styles.css” in the same directory as your HTML page then it can be linked to in the HTML like this:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>

<ul>
<li>   <h5><p style="color:#8B2"><b>Apply</b></p></h5></li>
</ul>
<p>To get the most from this guide, it would be a good idea to try out the code as we go along. so start a fresh new file with your text-editor and save the blank document as “style.css” in the same directory as your HTML file.</p>
<p>Now change your HTML file so that it starts something like this:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>My first web page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div>
<p>Save the HTML file. This now links to the CSS file, which is empty at the moment, so won’t change a thing. As you work you way throwgh the CSS Beginner Tutrial, you will be able to add to and change the CSS file and  see the results by simply refreshing the browser window that has the HTML file in it, as we did before.</p>
<span id="more"></span>

<h4 id="Selectors-Properties-and-Values-The-bits-that-make-up-CSS"><a href="#Selectors-Properties-and-Values-The-bits-that-make-up-CSS" class="headerlink" title="Selectors, Properties, and Values - The bits that make up CSS."></a><code>Selectors, Properties, and Values</code> - The bits that make up CSS.</h4><p><em>Whereas HTML has tags, CSS has selectors. Selectors are the names given to styles in internal and external style sheets. In this CSS Beginner Tutorial we will be concentrating on HTML selectors, which are simply the names of HTML tags and are used to change the style of a specific type of element.</em></p>
<p>For each selector there are <strong>“properties”</strong> inside <strong>curly brackets</strong>, which simply take the form of words such as color, font-weight or background-color.</p>
<p>A <strong>value</strong> is given to the property following a <strong>colon</strong> (NOT an “equals” sign) and <strong>semi-colons</strong> separate the properties.</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: navy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>This will apply the given values to the <code>font-size</code> and <code>color</code> properties to the <code>body</code> selector.</p>
<p>So basically, when this is applied to an HTML document, text between the body tags (which is the content of the whole window) will be 14 pixels in size and navy in color.</p>
<h5 id="Lengths-and-Percentages"><a href="#Lengths-and-Percentages" class="headerlink" title="Lengths and Percentages"></a>Lengths and Percentages</h5><p>There are many property-specific units for values used in CSS, but there are some general units that are used by a number of properties and it is worth familiarizing yourself with these before continuing.</p>
<ul>
<li><code>px</code> (such as font-size: 12px) is the unit for pixels.</li>
<li><code>em</code> (such as font-size: 2em) is the unit for the calculated size of a font. So “2em”, for example, is two times the current font size.</li>
<li><code>pt</code> (such as font-size: 12pt) is the unit for points, for measurements typically in printed media.</li>
<li><code>%</code> (such as width: 80%) is the unit for… wait for it… percentages.</li>
</ul>
<p>Other units include <code>pc</code> (picas), <code>cm</code> (centimeters), <code>mm</code> (millimeters) and <code>in</code> (inches).</p>
<p>When a value is <code>zero</code>, you do not need to state a unit. For example, if you wanted to specify no border, it would be <code>border: 0</code>.</p>
<p><em>“px” in this case, doesn’t actually necessarily mean pixels - the little squares that make up a computer’s display - all of the time. Modern browsers allow users to zoom in and out of a page so that, even if you specify font-size: 12px, or height: 200px, for example, although these will be the genuine specified size on a non-zoomed browser, they will still increase and decrease in size with the user’s preference. It’s a good thing. Trust me.</em></p>
<h4 id="Colors-How-to-use-color"><a href="#Colors-How-to-use-color" class="headerlink" title="Colors - How to use color."></a><code>Colors</code> - How to use color.</h4><p><em>CSS brings 16,777,216 colors to your disposal. They can take the form of a name, an RGB (red&#x2F;green&#x2F;blue) value or a hex code.</em></p>
<p>The following values, to specify full-on as red-as-red-can-be, all produce the same result:</p>
<ul>
<li>red</li>
<li>rgb(255,0,0)</li>
<li>rgb(100%,0%,0%)</li>
<li>#ff0000</li>
<li>#f00</li>
</ul>
<p>Predefined color names include <h5 style="color:green">aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow. transparent </h5>is also a valid value.</p>
<p><em>With the possible exception of black and white, color names have limited use in a modern, well-designed web sites because they are so specific and limiting.</em></p>
<p>The three values in the RGB value are from 0 to 255, 0 being the lowest level (no red, for example), 255 being the highest level (full red, for example). These values can also be a percentage.</p>
<p>Hexadecimal (previously and more accurately known as “sexadecimal”) is a base-16 number system. We are generally used to the decimal number system (base-10, from 0 to 9), but hexadecimal has 16 digits, from 0 to f.</p>
<p>The hex number is prefixed with a hash character (#) and can be three or six digits in length. Basically, the three-digit version is a compressed version of the six-digit (#ff0000 becomes #f00, #cc9966 becomes #c96, etc.). The three-digit version is easier to decipher (the first digit, like the first value in RGB, is red, the second green and the third blue) but the six-digit version gives you more control over the exact color.</p>
<h4 id="Text-How-to-manipulate-the-size-and-shape-of-text"><a href="#Text-How-to-manipulate-the-size-and-shape-of-text" class="headerlink" title="Text - How to manipulate the size and shape of text"></a>Text - How to manipulate the size and shape of text</h4><p><em>You can alter the size and shape of the text on a web page with a range of properties.</em></p>
<h5 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a><div style="color:#8b4">font-family</div></h5><p>This is the font itself, such as Times New Roman, Arial, or Verdana.</p>
<p>The user’s browser has to be able to find the font you specify, which, in most cases, means it needs to be on <strong>their</strong> computer so there is little point in using obscure fonts that are only sitting on <strong>your</strong> computer. There are a select few “<strong>safe</strong>” fonts (the most commonly used are Arial, Verdana and Times New Roman), but you can specify more than one font, separated by commas. The purpose of this is that if the user does not have the first font you specify, the browser will go through the list until it finds one it does have. This is useful because different computers sometimes have different fonts installed. So font-family: arial, helvetica, serif, will look for the Arial font first and, if the browser can’t find it, it will search for Helvetica, and then a common serif font.</p>
<p>Note: if the name of a font is more than one word, it should be put in quotation marks, such as font-family: “Times New Roman”.</p>
<p>You can use a wider selection than the “safe” fonts using several methods outlined in the CSS Advanced Tutorial but if you’re just getting to grips with CSS, we suggest sticking with this basic standard approach for the moment.</p>
<h5 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a><div style="color:#8b4">font-size</div></h5><p>font-size sets the size of the font. Be careful with this — text such as headings should not just be an HTML paragraph (p) in a large font - you should still use headings (h1, h2 etc.) even though, in practice, you could make the font-size of a paragraph larger than that of a heading (not recommended for sensible people).</p>
<h5 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a><div style="color:#8b4">font-weight</div></h5><p>font-weight states whether the text is bold or not. Most commonly this is used as font-weight: bold or font-weight: normal but other values are bolder, lighter, 100, 200, 300, 400 (same as normal), 500, 600, 700 (same as bold), 800 or 900.</p>
<p><em>Play around with these font-weight values if you want see their effect but, keep in mind, that some older browsers become a little confused with anything other than bold and normal so we suggest sticking to those unless you’re a typography ninja.</em></p>
<h5 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a><div style="color:#8b4">font-style</div></h5><p>font-style states whether the text is italic or not. It can be font-style: italic or font-style: normal.</p>
<h5 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a><div style="color:#8b4">text-decoration</div></h5><p>text-decoration states whether the text has got a line running under, over, or through it.</p>
<pre><code>text-decoration: underline, does what you would expect.
text-decoration: overline places a line above the text.
text-decoration: line-through puts a line through the text (“strike-through”).
</code></pre>
<p>This property is usually used to decorate links and you can specify no underline with text-decoration: none.</p>
<p>Underlines should only really be used for links. They are a commonly understood web convention that has lead users to generally expect underlined text to be a link.</p>
<h5 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a><div style="color:#8b4">text-transform</div></h5><p>text-transform will change the case of the text.</p>
<pre><code>text-transform: capitalize turns the first letter of every word into uppercase.
text-transform: uppercase turns everything into uppercase.
text-transform: lowercase turns everything into lowercase.
text-transform: none I’ll leave for you to work out.
</code></pre>
<p>So, a few of these things used together might look like this:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="text-spaceing"><a href="#text-spaceing" class="headerlink" title="text-spaceing"></a><div style="color:#8b4">text-spaceing</div></h5><p>Before we move on from this introduction to styling text, a quick look at how to space out the text on a page:</p>
<p>The letter-spacing and word-spacing properties are for spacing between letters or words. The value can be a length or normal.</p>
<p>The line-height property sets the height of the lines in an element, such as a paragraph, without adjusting the size of the font. It can be a number (which specifies a multiple of the font size, so “2” will be two times the font size, for example), a length, a percentage, or normal.</p>
<p>The text-align property will align the text inside an element to left, right, center, or justify.</p>
<p>The text-indent property will indent the first line of a paragraph, for example, to a given length or percentage. This is a style traditionally used in print, but rarely in digital media such as the web.</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.5em</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Margins-and-Padding-How-to-space-things-out"><a href="#Margins-and-Padding-How-to-space-things-out" class="headerlink" title="Margins and Padding	- How to space things out"></a>Margins and Padding	- How to space things out</h4><p><em>margin and padding are the two most commonly used properties for spacing-out elements. A margin is the space outside something, whereas padding is the space inside something.</em></p>
<p>Change the CSS code for <em>h2</em> to the following:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>This leaves a 20-pixel width space around the secondary header and the header itself is fat from the 40-pixel width padding.</p>
<p>The four sides of an element can also be set individually. <h5 style="color:#8b4">margin-top, margin-right, margin-bottom, margin-left, padding-top, padding-right, padding-bottom and padding-left</h5> are the self-explanatory properties you can use.</p>
<p><strong>The Box Model</strong></p>
<p>Margins, padding and borders are all part of what’s known as <strong>the Box Model.</strong> The Box Model works like this: in the middle you have the content area (let’s say an image), surrounding that you have the padding, surrounding that you have the border and surrounding that you have the margin. It can be visually represented like this:</p>
<div id="boxmodel" style="color: #a06700; margin: 20px 0; overflow: auto; padding: 10px 20px 20px 20px; background-color: #e90;">
    Margin box
    <div style="padding: 10px 20px 20px 20px; margin: 10px 20px 20px 20px; background-color: #f4bb55;">
        Border box
        <div style="padding: 10px 20px 20px 20px; margin: 10px 20px 20px 20px; background-color: #f9ddaa;">
            Padding box
            <div style="padding: 20px; margin: 10px 20px 20px 20px; background-color: #fff;">
                Element box
            </div>
        </div>
    </div>
</div>

<p>You don’t have to use all of these, but it can be helpful to remember that the box model can be applied to every element on the page, and that’s a powerful thing!</p>
<h4 id="Borders-Erm-Borders-Things-that-go-around-things"><a href="#Borders-Erm-Borders-Things-that-go-around-things" class="headerlink" title="Borders - Erm. Borders. Things that go around things."></a>Borders - Erm. Borders. Things that go around things.</h4><p><em>Borders can be applied to most HTML elements within the body.</em></p>
<p>To make a border around an element, all you need is <strong>border-style</strong>. The values can be <strong>solid, dotted, dashed, double, groove, ridge, inset</strong> and <strong>outset</strong>.</p>
<p><strong>border-width</strong> sets the width of the border, most commonly using pixels as a value. There are also properties for <strong>border-top-width, border-right-width, border-bottom-width and border-left-width</strong>.</p>
<p>Finally, <code>border-color</code> sets the <strong>color</strong>.</p>
<p>Add the following code to the CSS file:</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">border-style</span>: dashed;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>This will make a red dashed border around all HTML secondary headers (the h2 element) that is 3 pixels wide on the top and bottom and 10 pixels wide on the left and right (these having over-ridden the 3 pixel wide width of the entire border).</p>
<h4 id="Putting-It-All-Together-Throwing-all-of-the-above-ingredients-into-one-spicy-hotpot"><a href="#Putting-It-All-Together-Throwing-all-of-the-above-ingredients-into-one-spicy-hotpot" class="headerlink" title="Putting It All Together - Throwing all of the above ingredients into one spicy hotpot."></a>Putting It All Together - Throwing all of the above ingredients into one spicy hotpot.</h4><p><em>You should already have an HTML file like the one made at the end of the HTML Beginner Tutorial, with a line that we added at the start of this CSS Beginner Tutorial, linking the HTML file to the CSS file.</em></p>
<p>The code below covers all of the CSS methods in this section. If you save this as your CSS file and look at the HTML file then you should now understand what each CSS property does and how to apply them. The best way to fully understand all of this is to mess around with the HTML and the CSS files and see what happens when you change things.</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: arial, helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is a comment, by the way */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">21px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffc</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#900</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">0.5em</span>;</span><br><span class="line">    <span class="attribute">border-bottom-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-bottom-width</span>: <span class="number">0.5em</span>;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="number">#c00</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#090</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border-style</span>: dashed;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#900</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Anonymous Classes of Java</title>
    <url>/2015/12/31/anonymous-classes-of-java/</url>
    <content><![CDATA[<h3 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h3><p>Anonymous classes enable you to make your code more concise. They enable you to declare and instantiate a class at the same time. They are like local classes except that they do not have a name. Use them if you need to use a local class only once.</p>
<p>This section covers the following topics:</p>
<ul>
<li>Declaring Anonymous Classes</li>
<li>Syntax of Anonymous Classes</li>
<li>Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class</li>
<li>Example of Anonymous Classes</li>
</ul>
<h5 id="Declaring-Anonymous-Classes"><a href="#Declaring-Anonymous-Classes" class="headerlink" title="Declaring Anonymous Classes"></a>Declaring Anonymous Classes</h5><p>While local classes are class declarations, anonymous classes are expressions, which means that you define the class in another expression. The following example, HelloWorldAnonymousClasses, uses anonymous classes in the initialization statements of the local variables frenchGreeting and spanishGreeting, but uses a local class for the initialization of the variable englishGreeting:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldAnonymousClasses</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greetSomeone</span><span class="params">(String someone)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">EnglishGreeting</span> <span class="keyword">implements</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greetSomeone</span><span class="params">(String someone)</span> &#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">englishGreeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnglishGreeting</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">frenchGreeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>() &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;tout le monde&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;tout le monde&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greetSomeone</span><span class="params">(String someone)</span> &#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Salut &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">spanishGreeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>() &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;mundo&quot;</span>;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">                greetSomeone(<span class="string">&quot;mundo&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greetSomeone</span><span class="params">(String someone)</span> &#123;</span><br><span class="line">                name = someone;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hola, &quot;</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        englishGreeting.greet();</span><br><span class="line">        frenchGreeting.greetSomeone(<span class="string">&quot;Fred&quot;</span>);</span><br><span class="line">        spanishGreeting.greet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="type">HelloWorldAnonymousClasses</span> <span class="variable">myApp</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HelloWorldAnonymousClasses</span>();</span><br><span class="line">        myApp.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h5 id="Syntax-of-Anonymous-Classes"><a href="#Syntax-of-Anonymous-Classes" class="headerlink" title="Syntax of Anonymous Classes"></a>Syntax of Anonymous Classes</h5><p>As mentioned previously, an anonymous class is an expression. The syntax of an anonymous class expression is like the invocation of a constructor, except that there is a class definition contained in a block of code.</p>
<span id="more"></span>

<p>Consider the instantiation of the frenchGreeting object:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HelloWorld</span> <span class="variable">frenchGreeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>() &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;tout le monde&quot;</span>;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">               greetSomeone(<span class="string">&quot;tout le monde&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greetSomeone</span><span class="params">(String someone)</span> &#123;</span><br><span class="line">               name = someone;</span><br><span class="line">               System.out.println(<span class="string">&quot;Salut &quot;</span> + name);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure></div>
<p>The anonymous class expression consists of the following:</p>
<ul>
<li>The<code>new</code>operator</li>
<li>The name of an interface to implement or a class to extend. In this example, The anonymous class is implementing the interface <code>HelloWorld</code>.</li>
<li>Parenthesis that contain the arguments to a constructor, just like a normal class instance creation expression. <em>Note:</em> When you implement a interface, there is no constructor, so you use an empty pair of parentheses, as in this example.</li>
<li>A body, which is a class declaration body. More specifically, in the body, method declaration are allowed but statements are not.</li>
</ul>
<p>Because an anonymous class definition is an expression, it must be part of a statement. In this example, the anonymous class expression is part of the statement that instantiates the <em>frenchGreeting</em> object.(This explains why there is a semicolon after the closing brace.)</p>
<h5 id="Accessing-Local-Variables-of-the-Enclosing-Scope-and-Declaring-and-Accessing-Members-of-the-Anonymous-Class"><a href="#Accessing-Local-Variables-of-the-Enclosing-Scope-and-Declaring-and-Accessing-Members-of-the-Anonymous-Class" class="headerlink" title="Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class"></a>Accessing Local Variables of the Enclosing Scope, and Declaring and Accessing Members of the Anonymous Class</h5><p>Like local classes, anonymous class can <a class="link"   href="http://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html#accessing-members-of-an-enclosing-class" >capture variables <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>; they have the same access to local variables of the enclosing scope:</p>
<ul>
<li>An anonymous class has access to the members of its enclosing class.</li>
<li>An anonymous class cannot access local variables in its enclosing scope that are not declared as <code>final</code> or effectively final.</li>
<li>Like a nested class, a declaration of a type (such as variable) in an anonymous class shadows any other declarations in the enclosing scope that have the same name. See <a class="link"   href="http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" >shadowing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more information.</li>
</ul>
<p>Anonymous classes also have the same restrictions as local classes with respect to their members:</p>
<ul>
<li>You cannot declare static initializers or member interface in an anonymous class.</li>
<li>An anonymous class can have static members provided that they are constant variables.</li>
</ul>
<p>Note that you can declare the following in anonymous classes:</p>
<ul>
<li>Fields</li>
<li>Extra methods (even if they do not implement any methods of the superType)</li>
<li>Instance initializers</li>
<li>Local classes</li>
</ul>
<p>However, you cannot declare constructor in an anonymous class.</p>
<h5 id="Example-of-Anonymous-Classes"><a href="#Example-of-Anonymous-Classes" class="headerlink" title="Example of Anonymous Classes"></a>Example of Anonymous Classes</h5><p>Anonymous classes are often used in graphical user interface(GUI) applications.</p>
<p>Consider the javaFX example [HelloWorld.java][hellowworld_java](from the section [Hello World,JavaFX Style][hello_javafx_style] from <a class="link"   href="https://docs.oracle.com/javase/8/javafx/get-started-tutorial/javafx_get_started.htm" >Getting Started with JavaFX <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>). This sample creates a frame that contains a <strong>Say ‘Hello World’</strong> button. The anonymous class expression is highlighted:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.Buton;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.StackPane;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		launch(args);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primayStage)</span>&#123;</span><br><span class="line">		primaryStage.setTile(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">		<span class="type">Button</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>();</span><br><span class="line">		btn.setText(<span class="string">&quot;Say &#x27;Hello World&#x27;&quot;</span>);</span><br><span class="line">		<span class="comment">//Note following code block</span></span><br><span class="line">		btn.setOnAction(<span class="keyword">new</span> <span class="title class_">EventHandler</span>&lt;ActionEvent&gt;()&#123;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@override</span></span><br><span class="line">			<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent event)</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="type">StackPane</span> <span class="variable">root</span> <span class="operator">=</span> StackPane();</span><br><span class="line">		root.getChildren().add(btn);</span><br><span class="line">		primaryStage.setScene(<span class="keyword">new</span> <span class="title class_">Scene</span>(root,<span class="number">300</span>,<span class="number">250</span>));</span><br><span class="line">		primaryStage.show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>In this example, the method invocation <code>btn.setOnAction</code> specifies what happens when you select the <strong>Say’Hello World’</strong> button. This method requires an object of type <code>EventHandler&lt;ActionEvent&gt;.</code> The<code>EventHandler&lt;ActionEvent&gt;</code> interface contains only one method,handle. Instead of implementing this method with new class, the examples use an anonymous class expresion. Notice that this expression is the argument passed to the <code>btn.setOnAction</code>method.</p>
<p>Because the<code>EventHandler&lt;ActionEvent&gt;</code>interface contains only one method, you can use a lambda expression instead of an anonymous class expression. See the section <a class="link"   href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" >Lambda Expression <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more infomation.</p>
<p>Anonymous classes are ideal for implementing an interface that contains two or more methods. The following JavaFX example is from the section <a class="link"   href="https://docs.oracle.com/javase/8/javafx/user-interface-tutorial/custom.htm" >Customization of UI Controls <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. The highlighted code creates a text field that only accepts numeric values. It redefines the default implementation of the <code>TextField</code> class with an anonymous class by overriding the <code>replaceText</code> and 	<code>replaceSelection</code> methods inherited from the TextInputControl class.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> javafx.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> javafx.event.EventHandler;</span><br><span class="line"><span class="keyword">import</span> javafx.geometry.Insets;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Group;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.Scene;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.control.*;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.GridPane;</span><br><span class="line"><span class="keyword">import</span> javafx.scene.layout.HBox;</span><br><span class="line"><span class="keyword">import</span> javafx.stage.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomTextFieldSample</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Label</span> <span class="variable">label</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage stage)</span> &#123;</span><br><span class="line">        <span class="type">Group</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Group</span>();</span><br><span class="line">        <span class="type">Scene</span> <span class="variable">scene</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scene</span>(root, <span class="number">300</span>, <span class="number">150</span>);</span><br><span class="line">        stage.setScene(scene);</span><br><span class="line">        stage.setTitle(<span class="string">&quot;Text Field Sample&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">GridPane</span> <span class="variable">grid</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GridPane</span>();</span><br><span class="line">        grid.setPadding(<span class="keyword">new</span> <span class="title class_">Insets</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">        grid.setVgap(<span class="number">5</span>);</span><br><span class="line">        grid.setHgap(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line">        scene.setRoot(grid);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Label</span> <span class="variable">dollar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Label</span>(<span class="string">&quot;$&quot;</span>);</span><br><span class="line">        GridPane.setConstraints(dollar, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        grid.getChildren().add(dollar);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">TextField</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextField</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceText</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, String text)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!text.matches(<span class="string">&quot;[a-z, A-Z]&quot;</span>)) &#123;</span><br><span class="line">                    <span class="built_in">super</span>.replaceText(start, end, text);                     </span><br><span class="line">                &#125;</span><br><span class="line">                label.setText(<span class="string">&quot;Enter a numeric value&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceSelection</span><span class="params">(String text)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!text.matches(<span class="string">&quot;[a-z, A-Z]&quot;</span>)) &#123;</span><br><span class="line">                    <span class="built_in">super</span>.replaceSelection(text);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        sum.setPromptText(<span class="string">&quot;Enter the total&quot;</span>);</span><br><span class="line">        sum.setPrefColumnCount(<span class="number">10</span>);</span><br><span class="line">        GridPane.setConstraints(sum, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        grid.getChildren().add(sum);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Button</span> <span class="variable">submit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button</span>(<span class="string">&quot;Submit&quot;</span>);</span><br><span class="line">        GridPane.setConstraints(submit, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        grid.getChildren().add(submit);</span><br><span class="line">        </span><br><span class="line">        submit.setOnAction(<span class="keyword">new</span> <span class="title class_">EventHandler</span>&lt;ActionEvent&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                label.setText(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        GridPane.setConstraints(label, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        GridPane.setColumnSpan(label, <span class="number">3</span>);</span><br><span class="line">        grid.getChildren().add(label);</span><br><span class="line">        </span><br><span class="line">        scene.setRoot(grid);</span><br><span class="line">        stage.show();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        launch(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>anonymous class</tag>
      </tags>
  </entry>
  <entry>
    <title>Variables</title>
    <url>/2016/01/03/variables/</url>
    <content><![CDATA[<h4 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h4><p>An object stories its stae in <code>fields</code>.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">cadence</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">speed</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">gear</span> <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<p>The Java programming language defines te following kinds of variables:</p>
<ul>
<li><strong>Instance Variables(Non-Static Fields)</strong> Technically speaking, objects store their individual states in “non-static fields”, that is, fields declared without the <code>static</code> keyword. Not-Static fields are also known as <em>instance</em> variables because their values are unique to each instance of a class (to each object, in ther words); the <code>currentSpeed</code> of one bicycle is indenpendent from the <code>currentSpeed</code> of another.</li>
<li><strong>Class Variables(Static Fields)</strong> A class variables in any field declared with the <code>static</code> modifier, this tells the compiler that there is exactly one copy of this variable in existence, regardless of how many times the class has been instantiated. A field defining the number of gear for a particular kind of bicycle could be marked as <code>static</code> since conceptually the same number of gears will apply to all instances. The code <code>static</code> int numGears &#x3D; 6; would ceate such a static field. Additionally, the keyword <code>final</code> could be added to indicate that the number of gears will never change.</li>
<li><strong>Local Variables</strong> Similar to how an object stores its state in fields, a method will often stores its temporary state in local variables. The syntax for declaring a local variable	is similar to declaring a field (for example, int count &#x3D; 0;) There is no special keyword designating a variable as local, that determination come entirely from the location in which the variable is declared - which is between the opening and closing braces of a method. As such, local variables are only visible to the methods in which they are declared, they are not accessiable from the rest of the class.</li>
<li><strong>Parameters</strong> You’ve already seen examples of parameters, both in the <code>Bicycle</code> class and in the <code>main</code> method of the “Hello World” application. Recall that the signature for the <code>main</code> method is <code>public static void main (String[] args)</code>. Here, the <code>args</code> variable is the parameter to this method. The important thing to remember is that parameters are always classified as “variables” not “fields”. This applies to other parameter-accepting constructs as well (such as constructors and exception handlers) that you’ll lean about later in the tutorial.</li>
</ul>
<p>Having said that, the remainder of this tutorial uses the following general guidelines when discussing fields and variables. if we are talking about “fields in general” (excluding local variables and parameters), we may simply say “fields”. if the discussion applies to “all of the above”, we may simply say “vaiables”. if the context calls for a distinction, we will use specific terms(static field, local variables,etc) as appropriate. You may also occasionally see he term “member” used as well. A type’s fields, method, and nested types are collectively called its <em>members</em>.</p>
<h4 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h4><p>Every programming language has its own set of rules and conventions for the kinds of names that you’re allowed to use, and the Java programming language is no different. The rules and conventions for naming your variables can be summarized as follows:</p>
<ul>
<li>Variable names are case-sensitive.</li>
<li>Subsequent characters my be letters, digits, dollar signs, or underscore characters.</li>
<li>If the name you choose consists of only one word, spell that word in all lowercase letters.</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>basics</tag>
      </tags>
  </entry>
  <entry>
    <title>Enum Types of Java</title>
    <url>/2016/01/09/enum-types/</url>
    <content><![CDATA[<p>An <em>enum type</em> is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it. Common example include compass directions (values of NORTH, SOUTH, EAST, and WEST) and the days of the week.</p>
<p>Because they are constants, the names of an enum type’s fields are in uppercase letters.</p>
<p>In the Java programming language, you define an enum type by using the <code>enum</code> keyword. For example, you would specify a days-of-the-week enum type as :</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Day</span>&#123;</span><br><span class="line">	SUNDAY, MONDAY, TUESDAY, WEDENSDAY, THURSDAY, FRIDAY, SATURDAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>You should use enum types any time you need to represent a fixed set of constants. That includes natural enum types such as the planets in our solar system and data sets where you know all possible values at compile time—for example, the choices on a menu, command line flags, and so on.</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Patterns - Overview</title>
    <url>/2016/01/14/design-patterns-overview/</url>
    <content><![CDATA[<p><em><code>Design pattern</code> represent the best practices used by experienced object-oriented software developers. Design patterns are solutions to general problems that software developers faced during software development, These solutions were obtained by trial and error by numerous software developers over quite a substantial peried of time.</em></p>
<h3 id="Types-of-Design-Patterns"><a href="#Types-of-Design-Patterns" class="headerlink" title="Types of Design Patterns"></a>Types of Design Patterns</h3><p>As per the design pattern reference book <strong>Design Patterns</strong> - <strong>Elements of Reusable Object-Oriented Software</strong> , there are 23 design patterns which can be classified in three categories: Creational, Structural and Behavioral patterns. We’ll also discuss another category of desgin pattern: J2EE design patterns.</p>
<table>
<thead>
<tr>
<th>S.N.</th>
<th>Pattern &amp; Description</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td><h5>Creational Patterns</h5>These design patterns provide a way to create object while hiding the creation logic, rather than instantiating objects directly use <code>new</code> operator. This gives program more flexibility in deciding which objects need to be created for a given use case.</td>
</tr>
<tr>
<td>2</td>
<td><h5>Structural Patterns</h5>These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.</td>
</tr>
<tr>
<td>3</td>
<td><h5>Hehavioral Patterns</h5>These design patterns are specifically concerned with communication between objects.</td>
</tr>
<tr>
<td>4</td>
<td><h5>J2EE Design Patterns</h5>These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>tutorial</tag>
        <tag>design pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Pattern - Builder Pattern</title>
    <url>/2016/01/17/design-pattern-builder-pattern/</url>
    <content><![CDATA[<p>Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.</p>
<p>A Builder class builds the final object step by step. This builder is independent of other objects.</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>We have considered a business case of fast-food restaurant where a typical meal could be a burger and a cold drink. Burger could be either a Veg Burger or Chicken Burger and will be packed by a wrapper. Cold drink could be either a coke o pepsi and will be packed in bottle.</p>
<p>We are going to create an Item interface representing food items such as burgers and cold drinks and concrete classes implementing the Item interface and a Packing interface representing packaging of food items and concrete classes implementing the Packing interface as burger would be packed in wrapper and cold drink would be packed as bottle.</p>
<p>We then create a Meal class having ArrayList of item and a MealBuilder to build different types of Meal objects by combining item. BuilderPatterDemo, our demo class will use MealBuilder to build a Meal.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/builder_pattern_uml_diagram.jpg"
                      alt="builder_pattern_uml_diagram"
                ></p>
<span id="more"></span>

<h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h4><p>Create an interface item representing food item and packing.</p>
<p><strong>Item.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>** Packing.java**</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Packing</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h4><p>Create concrete classes implementing the Packing interfac.</p>
<p><strong>Wrapper.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> <span class="keyword">implements</span> <span class="title class_">Packing</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wrapper&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Bottle.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bottle</span> <span class="keyword">implements</span> <span class="title class_">Packing</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Bottle&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h4><p>Create abstract classes implementing the item interface providing default functionalities.</p>
<p><strong>Burger.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Burger</span> <span class="keyword">implements</span> <span class="title class_">Item</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Wrapper</span>();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>ColdDrink.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ColdDrink</span> <span class="keyword">implements</span> <span class="title class_">Item</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Packing <span class="title function_">packing</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bottle</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#### Step <span class="number">4</span></span><br><span class="line"></span><br><span class="line">Create concrete classes extending Burger and ColdDrink classes</span><br><span class="line"></span><br><span class="line">**VegBurger.java**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VegBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Veg Burger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>ChickenBurger.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChickenBurger</span> <span class="keyword">extends</span> <span class="title class_">Burger</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OVerride</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Chicken Burger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Coke.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coke</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30.3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Coke&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>Pepsi.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pepsi</span> <span class="keyword">extends</span> <span class="title class_">ColdDrink</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">price</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">23.3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pepsi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h4><p>Create a Meal class having item objects defined above.</p>
<p><strong>Meal.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Meal</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Item&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(Item item)</span>&#123;</span><br><span class="line">        items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getCost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">cost</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Item item : items)&#123;</span><br><span class="line">            cost += item.price();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showItems</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Item item : items)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Item : &quot;</span> + item.name());</span><br><span class="line">            System.out.print(<span class="string">&quot;, Packing : &quot;</span> + item.packing().pack());</span><br><span class="line">            System.out.println(<span class="string">&quot;, Price : &quot;</span> + item.price());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h4><p>Create a MealBuilder class, the actual builder class responsible to create Meal objects.</p>
<p><strong>MealBuilder.java</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MealBuilder</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> Meal <span class="title function_">prepareVegMeal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">VegBurger</span>());</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">Coke</span>());</span><br><span class="line">        <span class="keyword">return</span> meal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Meal <span class="title function_">prepareNonVegMeal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Meal</span> <span class="variable">meal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meal</span>();</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">ChickenBurger</span>());</span><br><span class="line">        meal.addItem(<span class="keyword">new</span> <span class="title class_">Pepsi</span>());</span><br><span class="line">        <span class="keyword">return</span> meal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="Step-6-1"><a href="#Step-6-1" class="headerlink" title="Step 6"></a>Step 6</h4><p>BuilderPatternDemo uses MealBuilder to demonstrate builder pattern.</p>
<p><strong>BuilderPatternDemo.java</strong></p>
<pre><code class="java">public class BuilderPatternDemo&#123;

    public static void main(String[] args)&#123;

        MealBuilder builder = new MealBuilder();

        Meal vegMeal = builder.prepareVegMeal();
        System.out.println(&quot;veg meal&quot;);
        vegMeal.showItems();
        System.out.println(&quot;Total cost: &quot; + vegMeal.getCost());

        Meal nonVegMeal = builder.prepareNonVegMeal();
        System.out.println(&quot;\n\nNon-Veg Meal&quot;);
        nonVegMeal.showItems();
        System.out.println(&quot;Total Cost: &quot; + nonVegMeal.getCost());
    &#125;
&#125;

#### Step 8

Verify the output.

`
Veg Meal
Item : Veg Burger, Packing : Wrapper, Price : 25.0
Item : Coke, Packing : Bottle, Price : 30.0
Total Cost: 55.0


Non-Veg Meal
Item : Chicken Burger, Packing : Wrapper, Price : 50.5
Item : Pepsi, Packing : Bottle, Price : 35.0
Total Cost: 85.5
`
</code></pre>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
        <tag>builder</tag>
      </tags>
  </entry>
  <entry>
    <title>Generic - Type Inference</title>
    <url>/2016/01/24/generic-type-inference/</url>
    <content><![CDATA[<h4 id="Type-Inference"><a href="#Type-Inference" class="headerlink" title="Type Inference"></a>Type Inference</h4><p><code>Type inference</code> is a Java compiler’s ability to look at each method invocation and corresponding declaration to determine the type argument (or arguments) that make the invocation applicable. The inference algorithm determines the types of the arguments and, if available, the type that the result is being assigned, or returned. Finally, the inference algorithm tries to find the most specific type that works with all of the arguments.</p>
<p>To illustrate this last point, in the following example, inference determines that the second argument being passed to the <code>pick</code> method is of type Serializable:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; T <span class="title function_">pick</span><span class="params">(T a1, T a2)</span> &#123; <span class="keyword">return</span> a2; &#125;</span><br><span class="line"><span class="type">Serializable</span> <span class="variable">s</span> <span class="operator">=</span> pick(<span class="string">&quot;d&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br></pre></td></tr></table></figure></div>

<h5 id="Type-Inference-and-Generic-Methods"><a href="#Type-Inference-and-Generic-Methods" class="headerlink" title="Type Inference and Generic Methods"></a>Type Inference and Generic Methods</h5><p>Generic Methods introduced you to type inference, which enables you to invoke a generic method as you would an ordinary method, without specifying a type between angle brackets. Consider the following example, BoxDemo, which requires the Box class:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">addBox</span><span class="params">(U u, </span></span><br><span class="line"><span class="params">      java.util.List&lt;Box&lt;U&gt;&gt; boxes)</span> &#123;</span><br><span class="line">    Box&lt;U&gt; box = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">    box.set(u);</span><br><span class="line">    boxes.add(box);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="keyword">void</span> <span class="title function_">outputBoxes</span><span class="params">(java.util.List&lt;Box&lt;U&gt;&gt; boxes)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Box&lt;U&gt; box: boxes) &#123;</span><br><span class="line">      <span class="type">U</span> <span class="variable">boxContents</span> <span class="operator">=</span> box.get();</span><br><span class="line">      System.out.println(<span class="string">&quot;Box #&quot;</span> + counter + <span class="string">&quot; contains [&quot;</span> +</span><br><span class="line">             boxContents.toString() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">      counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    java.util.ArrayList&lt;Box&lt;Integer&gt;&gt; listOfIntegerBoxes =</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">java</span>.util.ArrayList&lt;&gt;();</span><br><span class="line">    BoxDemo.&lt;Integer&gt;addBox(Integer.valueOf(<span class="number">10</span>), listOfIntegerBoxes);</span><br><span class="line">    BoxDemo.addBox(Integer.valueOf(<span class="number">20</span>), listOfIntegerBoxes);</span><br><span class="line">    BoxDemo.addBox(Integer.valueOf(<span class="number">30</span>), listOfIntegerBoxes);</span><br><span class="line">    BoxDemo.outputBoxes(listOfIntegerBoxes);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>The following is the output from this example:</p>
<p>Box #0 contains [10]<br>Box #1 contains [20]<br>Box #2 contains [30]</p>
<span id="more"></span>

<p>The generic method <code>addBox</code> defines one type parameter named <code>U</code>. Generally, a Java compiler can infer the <code>type parameters</code> of a generic method call. Consequently, in most cases, you do not have to specify them. For example, to invoke the generic method <code>addBox</code>, you can specify the type parameter with a <code>type witness</code> as follows:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">BoxDemo.&lt;Integer&gt;addBox(Integer.valueOf(<span class="number">10</span>), listOfIntegerBoxes);</span><br></pre></td></tr></table></figure></div>

<p>Alternatively, if you omit the <code>type witness</code>,a Java compiler automatically infers (from the method’s arguments) that the <code>type parameter</code> is Integer:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">BoxDemo.addBox(Integer.valueOf(<span class="number">20</span>), listOfIntegerBoxes);</span><br></pre></td></tr></table></figure></div>

<h5 id="Type-Inference-and-Instantiation-of-Generic-Classes"><a href="#Type-Inference-and-Instantiation-of-Generic-Classes" class="headerlink" title="Type Inference and Instantiation of Generic Classes"></a>Type Inference and Instantiation of Generic Classes</h5><p>You can replace the <code>type arguments</code> required to invoke the constructor of a generic class with an empty set of type parameters (&lt;&gt;) as long as the compiler can infer the type arguments from the context. This pair of <em>angle brackets</em> is informally called the diamond.</p>
<p>For example, consider the following variable declaration:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br></pre></td></tr></table></figure></div>

<p>You can substitute the <code>parameterized type</code> of the constructor with an empty set of <code>type parameters (&lt;&gt;)</code>:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></div>

<p>Note that to take advantage of type inference during generic class instantiation, you must use the diamond <code>(&lt;&gt;)</code>. In the following example, the compiler generates an unchecked conversion warning because the HashMap() constructor refers to the HashMap raw type, not the <code>Map&lt;String, List&lt;String&gt;&gt; </code>type:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, List&lt;String&gt;&gt; myMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// unchecked conversion warning</span></span><br></pre></td></tr></table></figure></div>

<h5 id="Type-Inference-and-Generic-Constructors-of-Generic-and-Non-Generic-Classes"><a href="#Type-Inference-and-Generic-Constructors-of-Generic-and-Non-Generic-Classes" class="headerlink" title="Type Inference and Generic Constructors of Generic and Non-Generic Classes"></a>Type Inference and Generic Constructors of Generic and Non-Generic Classes</h5><p>Note that constructors can be generic (in other words, declare their own formal type parameters) in both generic and non-generic classes. Consider the following example:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;X&gt; &#123;</span><br><span class="line">  &lt;T&gt; MyClass(T t) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Consider the following instantiation of the class MyClass:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;Integer&gt;(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>This statement creates an instance of the parameterized type <code>MyClass&lt;Integer&gt;</code>; the statement explicitly specifies the type Integer for the formal type parameter, <code>X</code>, of the generic class <code>MyClass&lt;X&gt;</code>. Note that the constructor for this generic class contains a formal type parameter, <code>T</code>. The compiler infers the type String for the formal type parameter, <code>T</code>, of the constructor of this generic class (because the actual parameter of this constructor is a String object).</p>
<p>Compilers from releases prior to Java SE 7 are able to infer the actual type parameters of generic constructors, similar to generic methods. However, compilers in Java SE 7 and later can infer the actual type parameters of the generic class being instantiated if you use the diamond (&lt;&gt;). Consider the following example:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">MyClass&lt;Integer&gt; myObject = <span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>In this example, the compiler infers the type Integer for the formal type parameter, <code>X</code>, of the generic class MyClass<X>. It infers the type String for the formal type parameter, <code>T</code>, of the constructor of this generic class.</p>
<p><em>Note: It is important to note that the inference algorithm uses only invocation arguments, target types, and possibly an obvious expected return type to infer types. The inference algorithm does not use results from later in the program.</em></p>
<h5 id="Target-Types"><a href="#Target-Types" class="headerlink" title="Target Types"></a>Target Types</h5><p>The Java compiler takes advantage of <code>target typing</code> to infer the type parameters of a generic method invocation. The target type of an expression is the data type that the Java compiler expects depending on where the expression appears. Consider the method <code>Collections.emptyList</code>, which is declared as follows:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">emptyList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>

<p>Consider the following assignment statement:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; listOne = Collections.emptyList();</span><br></pre></td></tr></table></figure></div>

<p>This statement is expecting an instance of <code>List&lt;String&gt;</code>; this data type is the <code>target type</code>. Because the method <code>emptyList</code> returns a value of type <code>List&lt;T&gt;</code>, the compiler infers that the type argument T must be the value String. This works in both Java SE 7 and 8. Alternatively, you could use a <code>type witness</code> and specify the value of T as follows:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; listOne = Collections.&lt;String&gt;emptyList();</span><br></pre></td></tr></table></figure></div>

<p>However, this is not necessary in this context. It was necessary in other contexts, though. Consider the following method:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">processStringList</span><span class="params">(List&lt;String&gt; stringList)</span> &#123;</span><br><span class="line">    <span class="comment">// process stringList</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Suppose you want to invoke the method <code>processStringList</code> with an empty list. In Java SE 7, the following statement does not compile:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">processStringList(Collections.emptyList());</span><br></pre></td></tr></table></figure></div>

<p>The Java SE 7 compiler generates an error message similar to the following:</p>
<p><code>List&lt;Object&gt; cannot be converted to List&lt;String&gt;</code></p>
<p>The compiler requires a value for the type argument <code>T</code> so it starts with the value Object. Consequently, the invocation of <code>Collections.emptyList</code> returns a value of type List<Object>, which is incompatible with the method <code>processStringList</code>. Thus, in Java SE 7, you must specify the value of the value of the type argument as follows:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">processStringList(Collections.&lt;String&gt;emptyList());</span><br></pre></td></tr></table></figure></div>

<p>This is no longer necessary in Java SE 8. The notion of what is a target type has been expanded to include method arguments, such as the argument to the method <code>processStringList</code>. In this case, <code>processStringList</code> requires an argument of type List<String>. The method <code>Collections.emptyList</code> returns a value of <code>List&lt;T&gt;</code>, so using the target type of <code>List&lt;String&gt;</code>, the compiler infers that the type argument <code>T</code> has a value of String. Thus, in Java SE 8, the following statement compiles:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">processStringList(Collections.emptyList());</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>generics</tag>
        <tag>type Inference</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Pattern - Proxy Pattern</title>
    <url>/2016/02/01/design-pattern-proxy-pattern/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p>Provide a surrogate or placeholder for another object to control access to it.</p>
<h4 id="In-Computer-World-Example"><a href="#In-Computer-World-Example" class="headerlink" title="In Computer World Example"></a>In Computer World Example</h4><p>Consider an ATM implementation for a bank. Here we will find multiple proxy objects, Actual bank information will be stored in a remote server. We must remember that in te programming world, the creation of multiple instances of a complex object(heavy object) is very costly. In such situations, we can create multiple proxy object(which must point to an original object) and the total creation of actual objects can be carried out on a demand basis. Thu we can save both the memory and creational time.</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>The figure below shows a <code>UML class diagram</code> for the <code>Proxy Pattern</code>.</p>
<p>![uml diagram] (&#x2F;images&#x2F;uml&#x2F;proxy_pattern_uml_diagram.png “uml” )</p>
<p>The participants classes in the proxy pattern are:</p>
<ul>
<li>Subject - interface implemented by the RealSubject and representing its services. The interface must be implemented by the proxy as well so that the proxy can be used in any location where the RealSubject can be used.</li>
<li>Proxy:</li>
<li>Maintains a reference that allows the Proxy to access the RealSubject.</li>
<li>Implements the same interface implemented by the RealSubject so that the Proxy can be subsituted for the RealSubject.</li>
<li>Controls access to the RealSubject and may be responsible for its creation and deletion.</li>
<li>Other responsibilities depend on the kind of proxy.</li>
<li>RealSubject - the real object that the proxy repsents.</li>
</ul>
<h4 id="Applicability-Examples"><a href="#Applicability-Examples" class="headerlink" title="Applicability &amp; Examples"></a>Applicability &amp; Examples</h4><p>The Proxy design pattern is applicable when there is a need to control access to an Object, as well as when there is a need for a sophisiticated reference to an Ojbect. Common Situations where the proxy pattern is applicable are:</p>
<ul>
<li>Virtual Proxies: delaying the creation and initialization of expensive objects util needed, where the objects are created on demand(For example creating the RealSubject object only when the doSomething method is invoked).</li>
<li>Remote Proxies: providing a local representation for an object that is in a different address space. A common example is Java RMI stub objects. The stub object acts as proxy where invoking methods on the stub would cause the stub to communicate and invoke methds on a remote object(called skeleton) found on a different machine.</li>
<li>Protection Proxies: where a proxy controls access to RealSubject methods, by giving access to some object while denying access to others.</li>
<li>Smart Reference: providing a sophisticated access to certain objects such as tracking the number of references to an object and denying access if a certain number is reached, as well as loading an object from database into memory on demand.</li>
</ul>
<h4 id="Coding-in-Java"><a href="#Coding-in-Java" class="headerlink" title="Coding in Java"></a>Coding in Java</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * subject interface</span></span><br><span class="line"><span class="comment"> * &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * The &lt;code&gt;Image&lt;/code&gt; interface has a single method #displayImage() that</span></span><br><span class="line"><span class="comment"> * the concrete class must implement to render to an image to screen.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">displayImage</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Proxy</span></span><br><span class="line"><span class="comment"> * &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * the ImageProxy is a virtual proxy that creates and loads the actual image</span></span><br><span class="line"><span class="comment"> * object on demand, thus saving the cost of loading an image into memory</span></span><br><span class="line"><span class="comment"> * until it needs to be rendered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageProxy</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Private Proxy data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imageFilePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reference to RealSubject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Image proxiedImage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageProxy</span><span class="params">(String imageFilePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imageFilePath = imageFilePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayImage</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Create the Image object only when the image is required to be shown</span></span><br><span class="line">        <span class="keyword">if</span> (proxiedImage == <span class="literal">null</span>) &#123;</span><br><span class="line">            proxiedImage = <span class="keyword">new</span> <span class="title class_">HighResolutionImage</span>(imageFilePath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//now call displayImage on realSubject</span></span><br><span class="line">        proxiedImage.displayImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Real Subject</span></span><br><span class="line"><span class="comment"> * &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * the RealSubject Implementation,</span></span><br><span class="line"><span class="comment"> * which is the concrete and heavyweight implementation of the image interface.</span></span><br><span class="line"><span class="comment"> * The High resolution image, loads a high resolution image from disk,</span></span><br><span class="line"><span class="comment"> * and renders it to screen when showImage() is called.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HighResolutionImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imageFilePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HighResolutionImage</span><span class="params">(String imageFilePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imageFilePath=imageFilePath;</span><br><span class="line">        loadImage(imageFilePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadImage</span><span class="params">(String imageFilePath)</span>&#123;</span><br><span class="line">        <span class="comment">//load image from disk into memory</span></span><br><span class="line">        <span class="comment">//this is heavy and costly operation</span></span><br><span class="line">        System.out.println(<span class="string">&quot;loading image from disk...:&quot;</span>+imageFilePath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayImage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//actual image rendering logic</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Show Image: -_- &quot;</span>+imageFilePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProxyPatternDemo Created by lechance.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPatternDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//assuming that user selects a folder that has 3 images</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//create the 3 images</span></span><br><span class="line">        <span class="type">Image</span> <span class="variable">highResolutionImage1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageProxy</span>(<span class="string">&quot;images/pic1.jpeg&quot;</span>);</span><br><span class="line">        <span class="type">Image</span> <span class="variable">highResolutionImage2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageProxy</span>(<span class="string">&quot;images/pic2.jpeg&quot;</span>);</span><br><span class="line">        <span class="type">Image</span> <span class="variable">highResolutionImage3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageProxy</span>(<span class="string">&quot;images/pic3.jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//assume that the user clicks on Image one item in a list</span></span><br><span class="line">        <span class="comment">//this would cause the program to call displayImage() for that image only</span></span><br><span class="line">        <span class="comment">//note that in this case only image one was loaded into memory</span></span><br><span class="line">        highResolutionImage1.displayImage();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\n-------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//consider using high resolution image object directly</span></span><br><span class="line">        <span class="type">Image</span> <span class="variable">highResolutionImage1NoProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighResolutionImage</span>(<span class="string">&quot;images/pc1.jpeg&quot;</span>);</span><br><span class="line">        <span class="type">Image</span> <span class="variable">highResolutionImage2NoProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighResolutionImage</span>(<span class="string">&quot;images/pc2.jpeg&quot;</span>);</span><br><span class="line">        <span class="type">Image</span> <span class="variable">highResolutionImage3NoProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighResolutionImage</span>(<span class="string">&quot;images/pc3.jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//assume that the user selects image two item from  images list</span></span><br><span class="line">        highResolutionImage2NoProxy.displayImage();</span><br><span class="line">        <span class="comment">//note that is this case all images have been loaded</span></span><br><span class="line">        <span class="comment">// into memory and not all have been actually displayed.</span></span><br><span class="line">        <span class="comment">//this is a waste of memory resources</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Kazam_screenshot_proxy.png"
                      alt="proxy pattern"
                ></p>
<blockquote>
<p>Orignazie from network</p>
</blockquote>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>design pattern</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Coding - Chmod Program</title>
    <url>/2016/02/05/coding-chmod/</url>
    <content><![CDATA[<p>Sample code that changes the permissions of files in a similar manner to the chmod(1) program.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chmod</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param   exprs</span></span><br><span class="line"><span class="comment">     *          List of one or more &lt;em&gt;symbolic mode expressions&lt;/em&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return  A &#123;@code Changer&#125; that may be used to changer a set of</span></span><br><span class="line"><span class="comment">     *          file permissions</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @throws  IllegalArgumentException</span></span><br><span class="line"><span class="comment">     *          If the value of the &#123;@code exprs&#125; parameter is invalid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Changer <span class="title function_">compile</span><span class="params">(String exprs)</span> &#123;</span><br><span class="line">        <span class="comment">// minimum is who and operator (u= for example)</span></span><br><span class="line">        <span class="keyword">if</span> (exprs.length() &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// permissions that the changer will add or remove</span></span><br><span class="line">        <span class="keyword">final</span> Set&lt;PosixFilePermission&gt; toAdd = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;PosixFilePermission&gt;();</span><br><span class="line">        <span class="keyword">final</span> Set&lt;PosixFilePermission&gt; toRemove = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;PosixFilePermission&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// iterate over each of expression modes</span></span><br><span class="line">        <span class="keyword">for</span> (String expr: exprs.split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// minimum of who and operator</span></span><br><span class="line">            <span class="keyword">if</span> (expr.length() &lt; <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// who</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">u</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">g</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">done</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (expr.charAt(pos)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span> : u = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span> : g = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span> : o = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> : u = <span class="literal">true</span>; g = <span class="literal">true</span>; o = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span> : done = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (done)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!u &amp;&amp; !g &amp;&amp; !o)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// get operator and permissions</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">op</span> <span class="operator">=</span> expr.charAt(pos++);</span><br><span class="line">            <span class="type">String</span> <span class="variable">mask</span> <span class="operator">=</span> (expr.length() == pos) ? <span class="string">&quot;&quot;</span> : expr.substring(pos);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// operator</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">add</span> <span class="operator">=</span> (op == <span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">remove</span> <span class="operator">=</span> (op == <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">assign</span> <span class="operator">=</span> (op == <span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!add &amp;&amp; !remove &amp;&amp; !assign)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// who= means remove all</span></span><br><span class="line">            <span class="keyword">if</span> (assign &amp;&amp; mask.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                assign = <span class="literal">false</span>;</span><br><span class="line">                remove = <span class="literal">true</span>;</span><br><span class="line">                mask = <span class="string">&quot;rwx&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// permissions</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;mask.length(); i++) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (mask.charAt(i)) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span> : r = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span> : w = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span> : x = <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid mode&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// update permissions set</span></span><br><span class="line">            <span class="keyword">if</span> (add) &#123;</span><br><span class="line">                <span class="keyword">if</span> (u) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toAdd.add(OWNER_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toAdd.add(OWNER_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toAdd.add(OWNER_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (g) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toAdd.add(GROUP_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toAdd.add(GROUP_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toAdd.add(GROUP_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (o) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toAdd.add(OTHERS_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toAdd.add(OTHERS_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toAdd.add(OTHERS_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (remove) &#123;</span><br><span class="line">                <span class="keyword">if</span> (u) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toRemove.add(OWNER_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toRemove.add(OWNER_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toRemove.add(OWNER_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (g) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toRemove.add(GROUP_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toRemove.add(GROUP_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toRemove.add(GROUP_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (o) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toRemove.add(OTHERS_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toRemove.add(OTHERS_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toRemove.add(OTHERS_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (assign) &#123;</span><br><span class="line">                <span class="keyword">if</span> (u) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toAdd.add(OWNER_READ);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(OWNER_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toAdd.add(OWNER_WRITE);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(OWNER_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toAdd.add(OWNER_EXECUTE);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(OWNER_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (g) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toAdd.add(GROUP_READ);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(GROUP_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toAdd.add(GROUP_WRITE);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(GROUP_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toAdd.add(GROUP_EXECUTE);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(GROUP_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (o) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (r) toAdd.add(OTHERS_READ);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(OTHERS_READ);</span><br><span class="line">                    <span class="keyword">if</span> (w) toAdd.add(OTHERS_WRITE);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(OTHERS_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (x) toAdd.add(OTHERS_EXECUTE);</span><br><span class="line">                      <span class="keyword">else</span> toRemove.add(OTHERS_EXECUTE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// return changer</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Changer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Set&lt;PosixFilePermission&gt; <span class="title function_">change</span><span class="params">(Set&lt;PosixFilePermission&gt; perms)</span> &#123;</span><br><span class="line">                perms.addAll(toAdd);</span><br><span class="line">                perms.removeAll(toRemove);</span><br><span class="line">                <span class="keyword">return</span> perms;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A task that &lt;i&gt;changes&lt;/i&gt; a set of &#123;<span class="doctag">@link</span> PosixFilePermission&#125; elements.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Changer</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Applies the changes to the given set of permissions.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span>   perms</span></span><br><span class="line"><span class="comment">         *          The set of permissions to change</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span>  The &#123;<span class="doctag">@code</span> perms&#125; parameter</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set&lt;PosixFilePermission&gt; <span class="title function_">change</span><span class="params">(Set&lt;PosixFilePermission&gt; perms)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Changes the permissions of the file using the given Changer.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chmod</span><span class="params">(Path file, Changer changer)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Set&lt;PosixFilePermission&gt; perms = Files.getPosixFilePermissions(file);</span><br><span class="line">            Files.setPosixFilePermissions(file, changer.change(perms));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            System.err.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Changes the permission of each file and directory visited</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeVisitor</span> <span class="keyword">implements</span> <span class="title class_">FileVisitor</span>&lt;Path&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Changer changer;</span><br><span class="line"></span><br><span class="line">        TreeVisitor(Changer changer) &#123;</span><br><span class="line">            <span class="built_in">this</span>.changer = changer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">preVisitDirectory</span><span class="params">(Path dir, BasicFileAttributes attrs)</span> &#123;</span><br><span class="line">            chmod(dir, changer);</span><br><span class="line">            <span class="keyword">return</span> CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> &#123;</span><br><span class="line">            chmod(file, changer);</span><br><span class="line">            <span class="keyword">return</span> CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">postVisitDirectory</span><span class="params">(Path dir, IOException exc)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (exc != <span class="literal">null</span>)</span><br><span class="line">                System.err.println(<span class="string">&quot;WARNING: &quot;</span> + exc);</span><br><span class="line">            <span class="keyword">return</span> CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> FileVisitResult <span class="title function_">visitFileFailed</span><span class="params">(Path file, IOException exc)</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;WARNING: &quot;</span> + exc);</span><br><span class="line">            <span class="keyword">return</span> CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">usage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;java Chmod [-R] symbolic-mode-list file...&quot;</span>);</span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>)</span><br><span class="line">            usage();</span><br><span class="line">        <span class="type">int</span> <span class="variable">argi</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDepth</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (args[argi].equals(<span class="string">&quot;-R&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args.length &lt; <span class="number">3</span>)</span><br><span class="line">                usage();</span><br><span class="line">            argi++;</span><br><span class="line">            maxDepth = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// compile the symbolic mode expressions</span></span><br><span class="line">        <span class="type">Changer</span> <span class="variable">changer</span> <span class="operator">=</span> compile(args[argi++]);</span><br><span class="line">        <span class="type">TreeVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeVisitor</span>(changer);</span><br><span class="line"></span><br><span class="line">        Set&lt;FileVisitOption&gt; opts = Collections.emptySet();</span><br><span class="line">        <span class="keyword">while</span> (argi &lt; args.length) &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">file</span> <span class="operator">=</span> Paths.get(args[argi]);</span><br><span class="line">            Files.walkFileTree(file, opts, maxDepth, visitor);</span><br><span class="line">            argi++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>chmod</tag>
      </tags>
  </entry>
  <entry>
    <title>Copy Paste Cut for Vim</title>
    <url>/2015/11/10/copy-paste-cut-for-vim/</url>
    <content><![CDATA[<h4 id="General-Usage"><a href="#General-Usage" class="headerlink" title="General Usage"></a>General Usage</h4><h5 id="Cut-and-Paste"><a href="#Cut-and-Paste" class="headerlink" title="Cut and Paste"></a>Cut and Paste</h5><ol>
<li>Position the cursor where you want to begin cutting.</li>
<li>Press <code>V</code> to select characters (or uppercase <code>V</code> to select whole lines, or <code>Ctrl-v</code> to select rectangular blocks).</li>
<li>Move the cursor to the end of what you want to cut.</li>
<li>Press <code>d</code> to cut (or <code>y</code> to copy).</li>
<li>Move to where you would like to paste.</li>
<li>Press <code>P</code> to paste before the cursor, or <code>p</code> to paste after.</li>
</ol>
<h5 id="Copy-and-Paste"><a href="#Copy-and-Paste" class="headerlink" title="Copy and Paste"></a>Copy and Paste</h5><p><em>Copy and paste</em> is performed with the same steps above except for step 4 where you would press <code>y</code> instead of <code>d</code>:</p>
<blockquote>
<p><code>d</code> stands for <code>delete</code> in Vim, which in other editor is usually called cut</p>
</blockquote>
<blockquote>
<p><code>y</code> stands for <code>yank</code> in Vim, which in other editor is usually called copy</p>
</blockquote>
<h4 id="Other-Usage"><a href="#Other-Usage" class="headerlink" title="Other Usage"></a>Other Usage</h4><p>For search, you can do like this, <code>1,$ s/ccc/rrr/g</code>, it will replace <code>ccc</code> with <code>rrr</code> characters.</p>
<p>more about this, pls refer to <a class="link"   href="http://vim.wikia.com/" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>copy</tag>
        <tag>paste</tag>
        <tag>cut</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm - Insertion Sort in Java</title>
    <url>/2016/02/14/algorithm-insertion-sort-in-java/</url>
    <content><![CDATA[<h3 id="Insertion-Sort"><a href="#Insertion-Sort" class="headerlink" title="Insertion Sort"></a>Insertion Sort</h3><p><em>One of the simplest sorting algorithm is the <strong>insertion sort</strong>. Insertion sort is consists of N-1 <strong>passes</strong>. For pass p&#x3D;1 through N-1, insertion sort ensures that the elements in positions 0 through p are in sorted order. Insertion sort makes use of the fact that elements in positions 0 through p-1 are already known to be in sorted order.</em></p>
<h3 id="Analysis-of-Insertion-Sort"><a href="#Analysis-of-Insertion-Sort" class="headerlink" title="Analysis of Insertion Sort"></a>Analysis of Insertion Sort</h3><p>Because of the nested loops, each of which can take N iterations, Insertion sort is $O(N{2})$. Furthermore, this bound is tight, because input in reverse order can be achieve this bound.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://latex.codecogs.com/gif.latex?\sum_{i=2}^{N}i=2+3+4+...+N=O(N^{2})$$"
                      
                ><br>    On the other hand, if the input is presorted, the running time is $O(N)$, because the test in the inner <strong>for</strong> loop always fails immediately. Indeed, if the input is almost sorted(this term will be more rigorously defined in the next section),  insertion sort will run quickly. Because of this wide variation, it is worth analyzing the average-case behavior of this algorithm. It turns out that the average case is $O(N{2})$ for insertion sort, as well as for variety of other sorting algorithms, as the next section shows.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple insertion sort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a an  array of comparable itmes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;AnyType <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> AnyType&gt;&gt; <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(AnyType [] a)</span>&#123;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">1</span>; p &lt; a.length; p++ )&#123;</span><br><span class="line">		<span class="type">AnyType</span> <span class="variable">tmp</span> <span class="operator">=</span> a[ p ];</span><br><span class="line">		<span class="keyword">for</span> ( j = p; j &gt; <span class="number">0</span> &amp;&amp; tmp.compareTo( a[j - <span class="number">1</span>] ) &lt; <span class="number">0</span>; j-- )&#123;</span><br><span class="line">			a[ j ] = a[ j - <span class="number">1</span> ];</span><br><span class="line">		&#125;</span><br><span class="line">		a [ j ] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>algorithm</tag>
        <tag>insertion</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 gdb 工具调试 C 程序</title>
    <url>/2016/02/18/use-gdb-tool-to-debug/</url>
    <content><![CDATA[<p>gdb 是 C 编程中调试程序的一个强大工具. 程序开发中经常需要一些调试方法来对程序进行分析 debug.</p>
<p>通常我们检查程序的错误只是简单地根据执行时的出错现象假设错误原因，然后在代码中适当的插入 printf, 执行程序并分析打印结果，如果结果和预期的一样，就基本上证明了自己假设的错误原因，就可以动手修正 bug 了，如果结果与预期的不一样，就要进一步的假设和分析. 这样的方式对于小型程序还能应付之，但当面对代码量巨大的程序时，我们就急切需要一种工具来更详细具体地观察程序运行过程中各个变量以及函数的调用信息，查看程序中所有的内部状态，比如变量的值，传给函数的参数，当前执行的代码行等. <code>gdb</code> 就是这样一个工具，掌握它的用法后，我们调试程序的手段就更加丰富了. 即使如此，也应该始终记得调试程序的的基本思想仍然是”分析现象－假设错误原因－产生新的现象去验证假设”这样一个循环，根据现象如何假设错误原因，以及如何设计新的现象去验证假设，这都需要非常严密的分析和思考.</p>
<blockquote>
<p>此博客是学习过程中的一些简短记录，并不能梳理成文。如果你想要了解更多关于 gdb 的信息，还请 google之.</p>
</blockquote>
<h4 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h4><p>在编译时需要加上<code>-g</code>选项，生成的可执行文件才能用<code>gdb</code>进行源码级调试.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">lechance@debian:/tmp$ cc -g bp.c -o bp</span><br><span class="line">lechance@debian:/tmp$ gdb bp</span><br><span class="line">GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1</span><br><span class="line">Copyright (C) 2014 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">&quot;show copying&quot;</span></span><br><span class="line">and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;i586-linux-gnu&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from bp...done.</span><br><span class="line">(gdb) </span><br></pre></td></tr></table></figure></div>
<p><code>-g</code>选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条指令对应源代码的第几行，但并不是把整个文件嵌入到可执行文件中，所以才调试时必须保证<code>gdb</code>能找到源文件.<code>gdb</code>提供一个类似shell的命令行环境，上面的gdb就是提示符，在这个提示符下可以输入help查看命令的类别.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">help</span></span><br><span class="line">List of classes of commands:</span><br><span class="line"></span><br><span class="line">aliases -- Aliases of other commands</span><br><span class="line">breakpoints -- Making program stop at certain points</span><br><span class="line">data -- Examining data</span><br><span class="line">files -- Specifying and examining files</span><br><span class="line">internals -- Maintenance commands</span><br><span class="line">obscure -- Obscure features</span><br><span class="line">running -- Running the program</span><br><span class="line">stack -- Examining the stack</span><br><span class="line">status -- Status inquiries</span><br><span class="line">support -- Support facilities</span><br><span class="line">tracepoints -- Tracing of program execution without stopping the program</span><br><span class="line">user-defined -- User-defined commands</span><br><span class="line"></span><br><span class="line">Type <span class="string">&quot;help&quot;</span> followed by a class name <span class="keyword">for</span> a list of commands <span class="keyword">in</span> that class.</span><br><span class="line">Type <span class="string">&quot;help all&quot;</span> <span class="keyword">for</span> the list of all commands.</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> followed by <span class="built_in">command</span> name <span class="keyword">for</span> full documentation.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>.</span><br><span class="line">Command name abbreviations are allowed <span class="keyword">if</span> unambiguous.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="list-row-number"><a href="#list-row-number" class="headerlink" title="list [row_number]"></a>list [row_number]</h5><p>从指定的row_number行开始列出源代码，也可以忽略指定显示的行号，list命令也可以简化为l使用.</p>
<h5 id="Enter-key"><a href="#Enter-key" class="headerlink" title="Enter key"></a>Enter key</h5><p>gdb提供了一个方便的功能，在提示符下直接敲回车键重复上一条命令.</p>
<h5 id="sart"><a href="#sart" class="headerlink" title="sart"></a>sart</h5><p>我们使用start命令开始执行程序，通过在提示符下查看start的help，我知道了还可以在start时指定程序启动的参数.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) <span class="built_in">help</span> start</span><br><span class="line">Run the debugged program <span class="keyword">until</span> the beginning of the main procedure.</span><br><span class="line">You may specify arguments to give to your program, just as with the</span><br><span class="line"><span class="string">&quot;run&quot;</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure></div>
<h5 id="next-abbreviation-n"><a href="#next-abbreviation-n" class="headerlink" title="next (abbreviation: n)"></a>next (abbreviation: n)</h5><p>我们可以使用next命令控制程序的语句一条一条地执行. gdb停在main函数中变量定义之后的第一条语句处等待我们发出命令.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) start</span><br><span class="line">Temporary breakpoint 1 at 0x804845c: file bp.c, line 4.</span><br><span class="line">Starting program: /tmp/bp </span><br><span class="line"></span><br><span class="line">Temporary breakpoint 1, main () at bp.c:4</span><br><span class="line">4	    int <span class="built_in">sum</span> = 0, i = 0;</span><br><span class="line">(gdb) n</span><br><span class="line">8		scanf(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">(gdb) </span><br></pre></td></tr></table></figure></div>
<h5 id="step-abbreviation-s"><a href="#step-abbreviation-s" class="headerlink" title="step (abbreviation: s)"></a>step (abbreviation: s)</h5><p>执行下一行语句，如果有函数调用则进入到函数中</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) s</span><br><span class="line">add_range (low=1, high=10) at main.c:6</span><br><span class="line">6		<span class="keyword">for</span> (i = low; i &lt;= high; i++)</span><br></pre></td></tr></table></figure></div>
<h5 id="backtrace-abbreviation-bt"><a href="#backtrace-abbreviation-bt" class="headerlink" title="backtrace (abbreviation: bt)"></a>backtrace (abbreviation: bt)</h5><p>使用<code>backtrace</code>命令可以查看函数调用的栈帧.</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) bt</span><br><span class="line"><span class="comment">#0  add_range (low=1, high=10) at main.c:6</span></span><br><span class="line"><span class="comment">#1  0x080483c1 in main () at main.c:14</span></span><br></pre></td></tr></table></figure></div>
<h4 id="info-abbrevition-i"><a href="#info-abbrevition-i" class="headerlink" title="info (abbrevition: i)"></a>info (abbrevition: i)</h4><p>用info命令（简写为i）查看add_range函数局部变量的值：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) i locals</span><br><span class="line">i = 0</span><br><span class="line"><span class="built_in">sum</span> = 0</span><br></pre></td></tr></table></figure></div>
<p>如果想查看main函数当前局部变量的值也可以做到，先用frame命令（简写为f）选择1号栈帧然后再查看局部变量：</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) f 1</span><br><span class="line"><span class="comment">#1  0x080483c1 in main () at main.c:14</span></span><br><span class="line">14		result[0] = add_range(1, 10);</span><br><span class="line">(gdb) i locals </span><br><span class="line">result = &#123;0, 0, 0, 0, 0, 0, 134513196, 225011984, -1208685768, -1081160480, </span><br><span class="line">...</span><br><span class="line">  -1208623680&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="print-abbrevition-p"><a href="#print-abbrevition-p" class="headerlink" title="print (abbrevition: p)"></a>print (abbrevition: p)</h4><p>打印表达式的值，通过表达式可以修改变量的值或者调用函数</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) p <span class="built_in">sum</span></span><br><span class="line"><span class="variable">$1</span> = 3</span><br></pre></td></tr></table></figure></div>
<h4 id="un-display-variables"><a href="#un-display-variables" class="headerlink" title="[un]display [variables]"></a>[un]display [variables]</h4><p>用display命令使得每次停下来的时候都显示当前sum的值</p>
<div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">(gdb) display <span class="built_in">sum</span></span><br><span class="line">1: <span class="built_in">sum</span> = -1208103488</span><br></pre></td></tr></table></figure></div>
<h4 id="break-b-row-number"><a href="#break-b-row-number" class="headerlink" title="break (b) [row_number]"></a>break (b) [row_number]</h4><p>在某一行设置断点</p>
]]></content>
      <tags>
        <tag>gdb</tag>
        <tag>c</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Java Style</title>
    <url>/2016/02/22/google-java-style/</url>
    <content><![CDATA[<ul>
<li></li>
</ul>
<h3 id="Google-Java-Style"><a href="#Google-Java-Style" class="headerlink" title="Google Java Style"></a>Google Java Style</h3><p><a class="link"   href="https://google.github.io/styleguide/javaguide.html" >Google java style <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h4 id="1-Source-file-basics"><a href="#1-Source-file-basics" class="headerlink" title="1.Source file basics"></a>1.Source file basics</h4><h4 id="2-Source-file-structure"><a href="#2-Source-file-structure" class="headerlink" title="2.Source file structure"></a>2.Source file structure</h4><h4 id="3-Formatting"><a href="#3-Formatting" class="headerlink" title="3.Formatting"></a>3.Formatting</h4><h4 id="4-Naming"><a href="#4-Naming" class="headerlink" title="4.Naming"></a>4.Naming</h4><h4 id="5-Programming-practices"><a href="#5-Programming-practices" class="headerlink" title="5.Programming practices"></a>5.Programming practices</h4><h4 id="6-Javadoc"><a href="#6-Javadoc" class="headerlink" title="6.Javadoc"></a>6.Javadoc</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>google</tag>
        <tag>java style</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes - Generics in java</title>
    <url>/2016/02/23/notes-generics-in-java/</url>
    <content><![CDATA[<blockquote>
<p>This is a notes for study <em>Generics</em> in Java tutorial.</p>
</blockquote>
<h3 id="key-points"><a href="#key-points" class="headerlink" title="key points"></a>key points</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fromArray2Collection</span><span class="params">(Object[] a, Collection&lt;?&gt; c)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Object o : a)&#123;</span><br><span class="line">	c.add(<span class="number">0</span>); <span class="comment">//compile-time error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The way to do deal with these problems is to use _generic methods_. Just like type declaration, method declarations can be generic - that is, parameterized by one or more type parameters.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="comment">/*type variable*/</span> <span class="keyword">void</span> <span class="title function_">fromArray2Collection</span><span class="params">(T[] a, Collection&lt;T&gt; c)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T o : a)&#123;</span><br><span class="line">	c.add(o); <span class="comment">//correct</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">We can call <span class="built_in">this</span> method with any kind of collection whose element type is a supertype of the element type of the array.</span><br><span class="line"></span><br><span class="line"><span class="comment">//One question that arises is: when should i use generic methods, and when should i use wildcard types? let&#x27;s see a few methods from the _Collection_ libraries.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span>&lt;E&gt;&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//without wildcard</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;T&gt; c)</span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">E</span>&gt; <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;T&gt; c)</span>;</span><br><span class="line">    <span class="comment">//type variables can hava bounds too!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Collections</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List&lt;T&gt; dest, List&lt;? extends T&gt; src)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Collections</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List&lt;T&gt; dest, List&lt;S&gt; src)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Refer to Java Tutorial</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>tutorial</tag>
        <tag>generic</tag>
      </tags>
  </entry>
  <entry>
    <title>What is a Glob [Java]</title>
    <url>/2016/02/27/what-is-a-glob/</url>
    <content><![CDATA[<ul>
<li></li>
</ul>
<p><em>from <a class="link"   href="https://docs.oracle.com/javase/tutorial/essential/io/fileOps..html#atomic" >Glob <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></em></p>
<p>Two methods in the <code>Files</code> class accept a <strong>glob</strong> argument, but what is <strong>glob</strong>?</p>
<p>You can use <em>glob</em> syntax to specify pattern-matching behavior.</p>
<p>A <em>glob</em> pattern is specified as a string and is matched against other strings,<br>such as directory or file names. Glob syntax follows several simple rules:</p>
<ul>
<li><p>An asterisk, *, matches any number of characters (including none).</p>
</li>
<li><p>Two asterisks, <code>**</code>, works like <code>*</code> but crosses directory boundaries.This syntax is generally used for matching complete paths.</p>
</li>
<li><p>A question mark, ?, matches exactly one character.</p>
</li>
<li><p>Braces specify a collection of subpatterns.</p>
<ul>
<li><p>For example:</p>
<p>  {sun,moon,stars} matches “sun”, “moon”, or “stars”.</p>
<p>  {temp*,tmp*} matches all strings beginning with “temp” or “tmp”.</p>
</li>
</ul>
</li>
<li><p>Square brackets convey a set of single characters or, when the hyphen character (<code>-</code>) is used, a range of characters.</p>
<ul>
<li><p>For example:</p>
<p>  [aeiou] matches any lowercase vowel.</p>
<p>  [0-9] matches any digit.</p>
<p>  [A-Z] matches any uppercase letter.</p>
<p>  [a-z,A-Z] matches any uppercase or lowercase letter.</p>
</li>
</ul>
<blockquote>
<p>Within the square brackets, *, ?, and \ match themselves.</p>
</blockquote>
</li>
<li><p>All other characters match themselves.</p>
<p>  To match *, ?, or the other special characters, you can escape them by using the backslash character, <code>\</code>.<br>  For example: \ matches a single backslash, and ? matches the question mark.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Pattern - Observer Pattern</title>
    <url>/2016/02/28/design-pattern-observer-pattern/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically. - By GOF</p>
<h4 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h4><p>In this pattern, there are many <code>observers</code>(object) which are observing a particular <code>subject</code>(object).Observers are basically interested and want to notified when there is a change made inside that <code>subject</code>. So, they register themselves to that <code>subject</code>. When they lose interest in the <code>subject</code> they simply unregister from the <code>subject</code>. Sometimes this model is also refered to as the Publisher-Subscriber model.</p>
<h4 id="Real-Life-Example"><a href="#Real-Life-Example" class="headerlink" title="Real-Life Example"></a>Real-Life Example</h4><p>We can think about a celebrity who has many fans. Each of these fans wants to get all the latest updates of his&#x2F;her favorite celebrity. So, he&#x2F;she can follow the celebrity as long as his&#x2F;her interest persists. When he loses interest, he simple stops following that celebrity. Here we can think of the fan as an <code>observer</code> and the celebrity as a <code>subject</code>.</p>
<h4 id="UML-Diagram"><a href="#UML-Diagram" class="headerlink" title="UML Diagram"></a>UML Diagram</h4><p>![uml diagram] (&#x2F;images&#x2F;uml&#x2F;observer_uml_diagram.png )</p>
<h4 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h4><p>The participants classes in this pattern are:</p>
<ul>
<li>Observable - interface or abstract class defining the operations for attaching and de-attaching observers to the client. In the GOF book this class&#x2F;interface is known as <strong>Subject</strong>.</li>
<li>ConcreteObservable - concrete Observable class. It maintain the state of the object and when a change in the state occurs it notifies the attached <strong>Observers</strong>.</li>
<li>Observer - interface or abstract class defining the operations to be used to notify this object.</li>
<li>ConcreteObserverA, ConcreteObserver2 - concrete <strong>Observer</strong> implementations.</li>
</ul>
<p>The flow is simple: the main framework instantiate the ConcreteObservable object, Then it instantiate and attaches the concrete observers to it using the methods defined in the Observable interface. Each time the state of the subject it’s changing it notifies all the attached Observers using the methods defined in the Observer interfae. When a new Observer is added to the application, all we need to do is to instantiate it in the main framework and to add attach it to the Observable object, The classes alreadly created will retmain unchanged.</p>
<h4 id="Coding-in-Java"><a href="#Coding-in-Java" class="headerlink" title="Coding in Java"></a>Coding in Java</h4><h5 id="Some-Features"><a href="#Some-Features" class="headerlink" title="Some Features"></a>Some Features</h5><ul>
<li>Model the “independent” functionality with a “subject” abstraction</li>
<li>Model the “dependent” functionality with “observer” hierarchy</li>
<li>The Subject is coupled only to the Observer base class</li>
<li>Observers register themselves with the Subject</li>
<li>The Subject broadcasts events to all registered Observers</li>
<li>Observers “pull” the information they need from the Subject</li>
<li>Client configures the number and type of Observers</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ObserverPatternDemo Created by lechance .</span><br><span class="line"> */</span><br><span class="line">public class ObserverPatternDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Subjection subjection = new Subjection();</span><br><span class="line"></span><br><span class="line">        new AObserver(subjection);</span><br><span class="line">        new BObserver(subjection);</span><br><span class="line"></span><br><span class="line">        subjection.setState(100);</span><br><span class="line">        subjection.setState(23);</span><br><span class="line">        subjection.setState(3232);</span><br><span class="line">        subjection.setState(432);</span><br><span class="line"></span><br><span class="line">        //or </span><br><span class="line">//</span><br><span class="line">//        Scanner scanner = new Scanner(System.in);</span><br><span class="line">//        while (true) &#123;</span><br><span class="line">//            System.out.println(&quot;Enter a number:&quot;);</span><br><span class="line">//            subjection.setState(scanner.nextInt());</span><br><span class="line">//        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Observer &#123;</span><br><span class="line"></span><br><span class="line">    protected Subjection subject;</span><br><span class="line"></span><br><span class="line">    public abstract void update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BObserver extends Observer &#123;</span><br><span class="line"></span><br><span class="line">    public BObserver(Subjection sub) &#123;</span><br><span class="line">        super.subject = sub;</span><br><span class="line">        sub.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;Observer B: &quot; + Integer.toString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AObserver extends Observer &#123;</span><br><span class="line"></span><br><span class="line">    public AObserver(Subjection sub) &#123;</span><br><span class="line">        super.subject = sub;</span><br><span class="line">        sub.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;Observer A: &quot; + Integer.toString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Subject</span><br><span class="line">class Subjection &#123;</span><br><span class="line"></span><br><span class="line">    public final int MAX_LIMITED_OBSERVERS = 9;</span><br><span class="line"></span><br><span class="line">    private Observer[] observers = new Observer[MAX_LIMITED_OBSERVERS];</span><br><span class="line">    private int totalobs;</span><br><span class="line">    private int state;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return this.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setState(int state) &#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attach(Observer observer) &#123;</span><br><span class="line"></span><br><span class="line">        if (totalobs &lt; MAX_LIMITED_OBSERVERS) &#123;</span><br><span class="line">            observers[totalobs++] = observer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void notifyObservers() &#123;</span><br><span class="line">        for (int i = 0; i &lt; totalobs; i++) &#123;</span><br><span class="line">            observers[i].update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Design Pattern</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>design pattern</tag>
        <tag>observer</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding UML</title>
    <url>/2016/03/07/unified-modeling-language-tutorial/</url>
    <content><![CDATA[<h3 id="What-is-UML"><a href="#What-is-UML" class="headerlink" title="What is UML"></a>What is UML</h3><blockquote>
</blockquote>
<p>The <strong>Unified Modeling Language(UML)</strong> is a general-purpose, developmental, <em>modeling language</em> in the field of <em>software engineering</em>, that is intended to provide a standard way to visualize the design of a system.</p>
<h3 id="UML的目标"><a href="#UML的目标" class="headerlink" title="UML的目标"></a>UML的目标</h3><p>一张图片胜过千言万语,这样的结论绝对也适用于UML.面向对象的概念要比UML出现的更早,因此当时没有标准的方法来组织和巩固面向对象开发.而且UML图表并不仅仅面向开发人员,它同样也应用到企业用户,以及其他任何对想要理解此系统的人.总之UML语言的目标是定义一个简单的建模机制来对所有当今复杂环境下系统进行建模.</p>
<h3 id="面向对象概念"><a href="#面向对象概念" class="headerlink" title="面向对象概念"></a>面向对象概念</h3><p>一个对象包含数据和控制数据的方法,数据通常也称为属性,它用来描述对象(Object)的状态.类(Class)用来描述对象(Object)以及它们还建立了层次结构模拟真实世界系统.层次结构被表示为继承以及类也可以按照要求以不同的方式被关联起来.<br>对象是存在与我们身边的真实世界实体,面向对象里的基本概念比如抽象,封装,继承和多态都能够用UML语言表示.<br>下面是面向对象里一些基本概念.</p>
<ul>
<li>Objects: 对象代表一个实体,它也是UML里基本的构建块.</li>
<li>Class: 表示现实世界里一类具有共同特征的事物的抽象.</li>
<li>Abstraction: 抽象在Java语言里表现为一种过程的抽象,它隐藏程序的某些细节而只展示程序基本的功能.换句话说,抽象只描述了一个对象的基本特征.</li>
<li>Encapsulation: 封装是这样一种机制,它把数据封装起来,对于外面的对象来说这些数据(属性)是隐藏的.</li>
<li>Inheritance: 继承是从一个存在的基类派生出新类的机制.</li>
<li>Polymorphism: 一个基类的引用,可以指向多种派生类对象,具有多种不同的形态,这种现象就叫多态性.</li>
</ul>
<h3 id="UML的构建块"><a href="#UML的构建块" class="headerlink" title="UML的构建块"></a>UML的构建块</h3><p>UML的构建块由以下三个主要元素构成：</p>
<h4 id="事物-Things"><a href="#事物-Things" class="headerlink" title="事物(Things)"></a>事物(Things)</h4><p>事物是实体抽象化的最终结果,是模型中的基本成员,UML中包含结构事物,行为事物,分组事物和注释事物.</p>
<h5 id="结构事物"><a href="#结构事物" class="headerlink" title="结构事物"></a>结构事物</h5><p>结构事物是模型中的静态部分,用来呈现概念和实体的表现元素,以下是软件建模中最常见的七种元素.</p>
<ul>
<li>Class: 是指具有相同属性,方法,关系和语义的对象的集合.<br>![img uml_class] (&#x2F;images&#x2F;uml&#x2F;uml_class.jpg )</li>
<li>Interface: 接口是指类或组件所提供的服务（操作）,描述了类或组件对外可见的动作.<br>![ img uml_interface &#x2F;images&#x2F;uml&#x2F;uml_interface.jpg )</li>
<li>Collaboration: 协作描述完成某个特定任务的一组类及其关联的集合,用于对使用情形的实现建模.<br>![ img uml_collaboration &#x2F;images&#x2F;uml&#x2F;uml_collaboration.jpg )</li>
<li>Use Case: 用于表示系统所提供的服务,它定义了系统是如何被参与者所使用的,它描述的是参与者为了使用系统提供的某一完整功能而与系统之间发生一段对话.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_usecase.jpg"
                      alt=" img use_case "
                ></li>
<li>Component: 组件是物理的,可替换的部分,包含接口的集合,例如COM+,JAVA BEANS等.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_component.jpg"
                      alt=" img component "
                ></li>
<li>Node: 节点是系统在运行时存在的物理元素,代表一个可计算的资源,通常占用一些内存和具有处理能力.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_node.jpg"
                      alt=" img Node "
                ></li>
</ul>
<h5 id="行为事物"><a href="#行为事物" class="headerlink" title="行为事物"></a>行为事物</h5><p>行为事物指的是UML模型中的动态部分,如下：</p>
<ul>
<li>Interaction: 交互是在特定上下文中的一组对象,为了达到特定的目的而进行的一系列消息交换而组成的动作.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_message.jpg"
                      alt=" img interaction "
                ></li>
<li>State machine: 它定义的状态序列对象通过事件进行响应,而事件是负责(responsible)状态变化的外部因素.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_state.jpg"
                      alt=" img state_machine "
                ></li>
</ul>
<h5 id="分组事物"><a href="#分组事物" class="headerlink" title="分组事物"></a>分组事物</h5><p>分组事物被定义为这样一种机制,即它能对UML模型元素进行分组,目前只有一种可用的分组事物：</p>
<ul>
<li><strong>Package</strong>: 结构事物,行为事物甚至分组事物都有可能放在一个包中.包纯粹是概念上的,只存在与开发阶段,而组件在运行时存在.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_package.jpg"
                      alt=" img uml_package "
                ></li>
</ul>
<h5 id="注释事物"><a href="#注释事物" class="headerlink" title="注释事物"></a>注释事物</h5><ul>
<li><strong>Note</strong>: 用于UML元素的解释部分.<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_note.jpg"
                      alt=" img Note "
                ></li>
</ul>
<h4 id="关系-Relationship"><a href="#关系-Relationship" class="headerlink" title="关系(Relationship)"></a>关系(Relationship)</h4><p>关系是UML的另一个重要构建块,它显示元素是任何彼此相互关联的.UML定义了四种可用的关系.</p>
<h5 id="Dependencies-依赖-依赖描述了两个事物之间的语义关系-其中一个事物的变化会影响另一个事物"><a href="#Dependencies-依赖-依赖描述了两个事物之间的语义关系-其中一个事物的变化会影响另一个事物" class="headerlink" title="Dependencies(依赖): 依赖描述了两个事物之间的语义关系,其中一个事物的变化会影响另一个事物."></a>Dependencies(依赖): 依赖描述了两个事物之间的语义关系,其中一个事物的变化会影响另一个事物.</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_dependency.jpg"
                      alt=" img dependency "
                ></p>
<h5 id="Association-关联-描述一组对象之间的连接的结构关系-如聚合关系-描述了整体和部分之间的结构关系"><a href="#Association-关联-描述一组对象之间的连接的结构关系-如聚合关系-描述了整体和部分之间的结构关系" class="headerlink" title="Association(关联): 描述一组对象之间的连接的结构关系,如聚合关系(描述了整体和部分之间的结构关系)."></a>Association(关联): 描述一组对象之间的连接的结构关系,如聚合关系(描述了整体和部分之间的结构关系).</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_association.jpg"
                      alt=" img association "
                ></p>
<h5 id="Generalization-泛化-是一般化-特殊化的关系-在对象的世界里它描述了继承这类关系"><a href="#Generalization-泛化-是一般化-特殊化的关系-在对象的世界里它描述了继承这类关系" class="headerlink" title="Generalization(泛化): 是一般化- 特殊化的关系,在对象的世界里它描述了继承这类关系."></a>Generalization(泛化): 是一般化- 特殊化的关系,在对象的世界里它描述了继承这类关系.</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_generalization.jpg"
                      alt=" img generalization "
                ></p>
<h5 id="Realization-实现-实现定义了两个相连的元素间的一种关系-其中一个元素描述了未被实现的责任-而另一则实现了这些责任-这种关系存在与接口的情况下"><a href="#Realization-实现-实现定义了两个相连的元素间的一种关系-其中一个元素描述了未被实现的责任-而另一则实现了这些责任-这种关系存在与接口的情况下" class="headerlink" title="Realization(实现): 实现定义了两个相连的元素间的一种关系,其中一个元素描述了未被实现的责任,而另一则实现了这些责任,这种关系存在与接口的情况下."></a>Realization(实现): 实现定义了两个相连的元素间的一种关系,其中一个元素描述了未被实现的责任,而另一则实现了这些责任,这种关系存在与接口的情况下.</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/uml_realization.jpg"
                      alt=" img realization "
                ></p>
<h4 id="图-Diagrams"><a href="#图-Diagrams" class="headerlink" title="图(Diagrams)"></a>图(Diagrams)</h4><p>图是事物集合的分类,所有的元素(elements),关系都用来制造一个完整的UML图,图也表示一个系统.<br>UML包含了九种图：</p>
<ul>
<li>类图(Class Diagram): 类图描述系统包含的类,类的内部结构以及类之间的关系.</li>
<li>对象图(Object Diagram): 对象图是类图的一个具体实例.</li>
<li>包图(Package Diagram): 包图表示包及其之间的依赖类图.</li>
<li>用例图(Usecase Diagram): 用例图从用户的角度出发描述系统的功能,需求,展示系统外部的各类角色与系统内部的各种用例之间的关系.</li>
<li>顺序图(Sequence Diagram): 表示对象之间动态合作的关系.</li>
<li>协作图(Collaboration Diagram): 描述对象之间的合作关系.</li>
<li>活动图(Activity Diagram): 描述了系统中各种活动的执行顺序.</li>
<li>状态图(Statechart Diagram): 状态图描述了一类对象的所有可能的状态以及事件发生时状态的转移条件.</li>
<li>部署图(Deployment Diagram): 定义了系统中软硬件的物理体系结构.</li>
<li>组件图(Compoment Diagram): 组件图也称构建图,它描述了代码部件的物理结构以及各部件之间的依赖关系.</li>
</ul>
<h4 id="符号-Notation"><a href="#符号-Notation" class="headerlink" title="符号(Notation)"></a>符号(Notation)</h4><p>UML符号在建模中是非常重要的一类元素,下面是一些基本的符号.</p>
<h5 id="Structural-Things"><a href="#Structural-Things" class="headerlink" title="Structural Things"></a>Structural Things</h5><ul>
<li>Classes Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_class.jpg"
                      alt=" img notation_class "
                ></li>
<li>Object Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_object.jpg"
                      alt=" img notation_object "
                ></li>
<li>Interface Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_interface.jpg"
                      alt=" img notation_interface "
                ></li>
<li>Collaboration Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_collaboration.jpg"
                      alt=" img notation_collaboration "
                ></li>
<li>Use case Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_usecase.jpg"
                      alt=" img notation_usecase "
                ></li>
<li>Actor Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_actor.jpg"
                      alt=" img notation_actor "
                ></li>
<li>Initial State Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_initialstate.jpg"
                      alt=" img notation_initial_sate "
                ></li>
<li>Final State Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_finalstate.jpg"
                      alt=" img notation_final_state "
                ></li>
<li>Active Class Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_activeclass.jpg"
                      alt=" img notation_active_class "
                ><br>Active class is used to represent concurrency in a system.</li>
<li>Component Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_component.jpg"
                      alt=" img notation_component "
                ></li>
<li>Node Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_node.jpg"
                      alt=" img notation_node "
                ></li>
</ul>
<h5 id="Behavioural-Things"><a href="#Behavioural-Things" class="headerlink" title="Behavioural Things"></a>Behavioural Things</h5><ul>
<li>Interactions<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_interaction.jpg"
                      alt=" img notation_interaction"
                ></li>
<li>State machines<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_statemachine.jpg"
                      alt=" img notation_state_machine "
                ></li>
</ul>
<h5 id="Grouping-Things"><a href="#Grouping-Things" class="headerlink" title="Grouping Things"></a>Grouping Things</h5><ul>
<li>Package Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_package.jpg"
                      alt=" img notation_package "
                ></li>
</ul>
<h5 id="Annotational-Things"><a href="#Annotational-Things" class="headerlink" title="Annotational Things"></a>Annotational Things</h5><ul>
<li>Note Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_note.jpg"
                      alt=" img notation_note "
                ></li>
</ul>
<h5 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h5><ul>
<li>Dependency Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_dependency.jpg"
                      alt=" img notation_dependency "
                ></li>
<li>Association Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_association.jpg"
                      alt=" img notation_association "
                ></li>
<li>Generalizaion Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_generalization.jpg"
                      alt=" img notation_generalization "
                ></li>
<li>Extensibility Notation<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/uml/notation_extensibility.jpg"
                      alt=" img notation_extensibility "
                ></li>
</ul>
<blockquote>
<p>This aritcal refer <a class="link"   href="http://www.tutorialspoint.com/uml" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
</blockquote>
]]></content>
      <categories>
        <category>Design</category>
      </categories>
      <tags>
        <tag>uml</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML Encoding (Character Sets)</title>
    <url>/2016/03/08/html-encoding/</url>
    <content><![CDATA[<p>To display an <code>HTML</code> page correctly, a web browser must know the character set(character encoding) to use.</p>
<h5 id="What-is-Character-Encoding"><a href="#What-is-Character-Encoding" class="headerlink" title="What is Character Encoding?"></a>What is Character Encoding?</h5><p>ASCII(American Standard Code for Information Interchange) was the first *character encoding standard (also called <code>character set</code>), It defines 127 different alphanumeric characters that could be used on the internet.</p>
<p>ASCII supported numbers(0-9), English letters(A-Z), and some special character like ! $ + - ( ) @ &lt; &gt; .</p>
<p>ASCII(Windows-1252) was the original Windows character set. It supported 256 different character codes.</p>
<p>ISO-8859-1 was the default character set for HTML 4. It also supported 256 different character codes.</p>
<p>Because ANSI and ISO were limited, the default character encoding was chanaged to UTF-8 in HTML 5.</p>
<p>UTF-8(Unicode) covers almost all of the characters and symbols in the world.</p>
<blockquote>
<p>All HTML 4 processors also support UTF-8.</p>
</blockquote>
<h5 id="The-HTML-charset-Attribute"><a href="#The-HTML-charset-Attribute" class="headerlink" title="The HTML charset Attribute"></a>The HTML charset Attribute</h5><p>To display an HTML page correctly, a web browser must know the charachter set used in the page.</p>
<p>This is specified in the <code>&lt;meta&gt;</code> tag:</p>
<p>For HTML4:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=ISO-8859-1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>For HTML5:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>&#96;If a browser detects ISO-8859-1 in a web page, it defaults to ANSI, because ANSI is indentical to ISO-8859-1 except that ANSI has 32 extra characters.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>encoding</tag>
      </tags>
  </entry>
  <entry>
    <title>Intrinsic Locks and Synchronization</title>
    <url>/2016/03/28/intrinsic-locks-and-synchronization/</url>
    <content><![CDATA[<p>Synchronization is built around an internal entity known as the intrinsic lock or monitor lock. (The API specification often refers to this entity simply as a “monitor.”) Intrinsic locks play a role in both aspects of synchronization: enforcing exclusive access to an object’s state and establishing happens-before relationships that are essential to visibility.</p>
<p>Every object has an intrinsic lock associated with it. By convention, a thread that needs exclusive and consistent access to an object’s fields has to acquire the object’s intrinsic lock before accessing them, and then release the intrinsic lock when it’s done with them. A thread is said to own the intrinsic lock between the time it has acquired the lock and released the lock. As long as a thread owns an intrinsic lock, no other thread can acquire the same lock. The other thread will block when it attempts to acquire the lock.</p>
<p>When a thread releases an intrinsic lock, a happens-before relationship is established between that action and any subsequent acquisition of the same lock.</p>
<h4 id="Locks-In-Synchronized-Methods"><a href="#Locks-In-Synchronized-Methods" class="headerlink" title="Locks In Synchronized Methods"></a>Locks In Synchronized Methods</h4><p>When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method’s object and releases it when the method returns. The lock release occurs even if the return was caused by an uncaught exception.</p>
<p>You might wonder what happens when a static synchronized method is invoked, since a static method is associated with a class, not an object. In this case, the thread acquires the intrinsic lock for the Class object associated with the class. Thus access to class’s static fields is controlled by a lock that’s distinct from the lock for any instance of the class.</p>
<h4 id="Synchronized-Statements"><a href="#Synchronized-Statements" class="headerlink" title="Synchronized Statements"></a>Synchronized Statements</h4><p>Another way to create synchronized code is with synchronized statements. Unlike synchronized methods, synchronized statements must specify the object that provides the intrinsic lock:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">        lastName = name;</span><br><span class="line">        nameCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    nameList.add(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>In this example, the <code>addName</code> method needs to synchronize changes to <code>lastName</code> and <code>nameCount</code>, but also needs to avoid synchronizing invocations of other objects’ methods. (Invoking other objects’ methods from synchronized code can create problems that are described in the section on Liveness.) Without synchronized statements, there would have to be a separate, unsynchronized method for the sole purpose of invoking <code>nameList.add</code>.</p>
<p>Synchronized statements are also useful for improving concurrency with fine-grained synchronization. Suppose, for example, class MsLunch has two instance fields, <code>c1</code> and <code>c2</code>, that are never used together. All updates of these fields must be synchronized, but there’s no reason to prevent an update of c1 from being interleaved with an update of <code>c2</code> — and doing so reduces concurrency by creating unnecessary blocking. Instead of using synchronized methods or otherwise using the lock associated with this, we create two objects solely to provide locks.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MsLunch</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inc1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(lock1) &#123;</span><br><span class="line">            c1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inc2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(lock2) &#123;</span><br><span class="line">            c2++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Use this idiom with extreme care. You must be absolutely sure that it really is safe to interleave access of the affected fields.</p>
<h4 id="Reentrant-Synchronization"><a href="#Reentrant-Synchronization" class="headerlink" title="Reentrant Synchronization"></a>Reentrant Synchronization</h4><p>Recall that a thread cannot acquire a lock owned by another thread. But a thread can acquire a lock that it already owns. Allowing a thread to acquire the same lock more than once enables reentrant synchronization. This describes a situation where synchronized code, directly or indirectly, invokes a method that also contains synchronized code, and both sets of code use the same lock. Without reentrant synchronization, synchronized code would have to take many additional precautions to avoid having a thread cause itself to block.</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Tutorial</category>
        <category>Concurrency</category>
      </categories>
      <tags>
        <tag>intrinsic</tag>
        <tag>synchronization</tag>
      </tags>
  </entry>
  <entry>
    <title>Guarded Blocks</title>
    <url>/2016/04/02/guarded-blocks/</url>
    <content><![CDATA[<p>Threads often have to coordinate their actions. The most common coordination idiom is the <code>guarded block</code> Such a block begins by polling a condition that must be true before the block can proceed, There are a number of steps to follow in order to do this correctly.</p>
<p>Suppose, for example, <code>guardedJoy</code> is a method that must not proceed until a shared variable <code>joy</code> has been set by another thread. Such a method could, in theory, simply loop until condition is satisfied, but that loop is wasteful, since it executes continuously while waiting.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">guardedJoy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//simple loop guard. Wastes processor time. Don&#x27;t do this!</span></span><br><span class="line">    <span class="keyword">while</span>(!joy)&#123;&#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Joy has been achieved!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>A more efficient guard invokes <code>Object.wait</code> to suspend the current thread. The invocation of <code>wait</code> does not return until another thread has issued a notification that some special event may have occurred - though not necessarily the event this thread is waiting for:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">guardedJoy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//This guard only loops once for each special event, which may not be the event we&#x27;re waiting for.</span></span><br><span class="line">    <span class="keyword">while</span>(!joy)&#123;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">	    wait();</span><br><span class="line">	&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;Joy and efficiency have been archieved!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Note: Always invoke <code>wait</code> inside a loop that tests for the condition being waited for. Don’t assume that the interrupt was for the particular condition you were waiting for, or that the condition is still true.</p>
</blockquote>
<p>Like many methods that suspend execution, <code>wait</code> can thow <code>InterruptedException</code> Exception. In this example, we can just ignore that exception – we only care about the value of <code>joy</code>.</p>
<p>Why is this version of <code>guardedJoy</code> synchronized? Suppose <code>d</code> is the object we’re using to invoke <code>wait</code>. When a thread invoked <code>d.wait</code>, it must own the intrinsic lock for <code>d</code> – otherwise an error is thrown. Invoking <code>wait</code> inside a synchronized method is a simple way to acquire the intrinsic lock.</p>
<p>When <code>wait</code> is invoked, the thread releases the lock and suspends execution. At some future time, another thread will acquire the same lock and invoke <code>Object.notifyAll</code>, informing all  threads waiting on that lock that something important has happened:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title function_">notifyJoy</span><span class="params">()</span>&#123;</span><br><span class="line">	joy = <span class="literal">true</span>;</span><br><span class="line">	notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Some time after second thread has released the lock, the first thread reacquires the lock and resumes by returning from the invocation of wait.</p>
<hr>
<h2 id="Note-There-is-a-second-notification-method-notify-which-wakes-up-a-single-thread-Because-notify-doesn’t-allow-you-to-specify-the-thread-that-is-woken-up-it-is-useful-only-in-massively-parallel-applications-that-is-programs-with-a-large-number-of-threads-all-doing-similar-chores-In-such-an-application-you-don’t-care-which-thread-gets-woken-up"><a href="#Note-There-is-a-second-notification-method-notify-which-wakes-up-a-single-thread-Because-notify-doesn’t-allow-you-to-specify-the-thread-that-is-woken-up-it-is-useful-only-in-massively-parallel-applications-that-is-programs-with-a-large-number-of-threads-all-doing-similar-chores-In-such-an-application-you-don’t-care-which-thread-gets-woken-up" class="headerlink" title="Note: There is a second notification method, notify, which wakes up a single thread. Because notify doesn’t allow you to specify the thread that is woken up, it is useful only in massively parallel applications - that is, programs with a large number of threads, all doing similar chores. In such an application, you don’t care which thread gets woken up."></a><em>Note</em>: There is a second notification method, <code>notify</code>, which wakes up a single thread. Because <code>notify</code> doesn’t allow you to specify the thread that is woken up, it is useful only in massively parallel applications - that is, programs with a large number of threads, all doing similar chores. In such an application, you don’t care which thread gets woken up.</h2><p>Let’s use guarded blocks to create a <code>Producer-Consumer</code> application. This kind of application shares data between two threads: the <code>producer</code>, that creates the data, and the <code>consumer</code>, that does something with it. The two threads communicate using a shared object. Coordination is essential: the consumer thread must not attempt to retrieve the data before the producer thread has delivered it, and the producer thread must not attempt to deliver new data if the consumer hasn’t retireve the old data.</p>
<p>In this example, the data is a series of text messages, which are shared through an object of type <em>Drop</em>:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Drop</span>&#123;</span><br><span class="line">	<span class="comment">//message sent from producer to consumer</span></span><br><span class="line">	<span class="keyword">private</span> Stirng message;</span><br><span class="line">	<span class="comment">//True if consumer should wait for producer to send message, false if producer should wait for consumer to retrieve message</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">take</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="comment">//wait until message is available</span></span><br><span class="line">		<span class="keyword">while</span>(empty)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">			wait();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//Toggle status</span></span><br><span class="line">		empty = <span class="literal">true</span>;</span><br><span class="line">		<span class="comment">//notify producer that status has changed</span></span><br><span class="line">		notifyAll();</span><br><span class="line">		<span class="keyword">return</span> message;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String message)</span>&#123;</span><br><span class="line">		<span class="comment">//wait until message has been retrieved</span></span><br><span class="line">		<span class="keyword">while</span>(!empty)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">			wait();</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//Toggle status</span></span><br><span class="line">		empty = <span class="literal">false</span>;</span><br><span class="line">		<span class="comment">//Store message </span></span><br><span class="line">		<span class="built_in">this</span>.message = message;</span><br><span class="line">		<span class="comment">//Notify consumer that status has changed</span></span><br><span class="line">		notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>The producer thread send a series of fimilar messages, The String “DONE” indicates that all messages have been sent. To simulate the unpredictable nature of real-world applications, the producer thread pauses for random intervals between messages.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Drop drop;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Drop drop)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.drop = drop;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">		String importantInfo[] =&#123;</span><br><span class="line">		<span class="string">&quot;Mares eat oats&quot;</span>,</span><br><span class="line">		<span class="string">&quot;Does eat oats&quot;</span>,</span><br><span class="line">		<span class="string">&quot;Little lambs eat ivy&quot;</span>,</span><br><span class="line">		<span class="string">&quot;a kid will eat ivy too&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; importantInfo.length; i++)&#123;</span><br><span class="line">			drop.put(importantInfo[i]);</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				Thread.sleep(random.nextInt(<span class="number">5000</span>));</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		drop.put(<span class="string">&quot;DONE&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java</category>
        <category>Tutorial</category>
        <category>Concurrency</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>concurrency</tag>
        <tag>blocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Usage of The Volley Library in Android</title>
    <url>/2016/04/02/usage-of-volley-lib/</url>
    <content><![CDATA[<p>Volley is an HTTP library announced by google in I&#x2F;O 2013, It makes networking for android apps easier and most importantly, faster.</p>
<h4 id="What-is-Volley"><a href="#What-is-Volley" class="headerlink" title="What is Volley"></a>What is Volley</h4><h4 id="How-to-use-the-Volley-to-transmitting-network-data"><a href="#How-to-use-the-Volley-to-transmitting-network-data" class="headerlink" title="How to use the Volley to transmitting network data"></a>How to use the Volley to transmitting network data</h4><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>volley</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Least-Recently-Used Cache</title>
    <url>/2016/04/08/least-recently-used-cache/</url>
    <content><![CDATA[<p>Implement LRU Cache</p>
<blockquote>
<p>Wikipedia <a class="link"   href="https://en.wikipedia.org/wiki/Cache_algorithms" >https://en.wikipedia.org/wiki/Cache_algorithms <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
</blockquote>
<p>In computing, cache algorithms (also frequently called cache replacement algorithms or cache replacement policies) are optimizing instructions—​​or algorithms—​​that a computer program or a hardware-maintained structure can follow in order to manage a cache of information stored on the computer. When the cache is full, the algorithm must choose which items to discard to make room for the new ones.</p>
<p>The LRU caching scheme is to remove the least recently used frame when the cache is full and a new page is referenced which is not there in cache.</p>
<p>We use two data structures to implement an LRU Cache.</p>
<ol>
<li><p>A Queue which is implemented using a doubly linked list. </p>
</li>
<li><p>A Hash with node number as key and value of the corresponding queue node as value.</p>
</li>
</ol>
<p>Note: Initially no data is in the cache.</p>
<p>Below is Java implementation:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  LruCacheDemo Created by lechance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruCacheDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        LruCache&lt;Integer, Person&gt; lruCache = <span class="keyword">new</span> <span class="title class_">LruCache</span>&lt;&gt;(maxSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//entity</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;people 1&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;people 2&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;people 3&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;people 4&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;people 5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;people 6&quot;</span>);</span><br><span class="line"></span><br><span class="line">        lruCache.put(<span class="number">1</span>, p1);</span><br><span class="line">        lruCache.put(<span class="number">2</span>, p2);</span><br><span class="line">        lruCache.put(<span class="number">3</span>, p3);</span><br><span class="line">        lruCache.put(<span class="number">4</span>, p4);</span><br><span class="line">        lruCache.put(<span class="number">5</span>, p5);</span><br><span class="line"></span><br><span class="line">        lruCache.put(<span class="number">6</span>, p6);</span><br><span class="line"></span><br><span class="line">        print(lruCache.get(<span class="number">1</span>)); <span class="comment">// it will print null because beyond the limit size</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//therefore, the following items can be acquired normally</span></span><br><span class="line">        print(p2);</span><br><span class="line">        print(p5);</span><br><span class="line">        print(p6);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//generic method for convenience print test-info</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        Person(String name) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Person: &quot;</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * We can keep two separate data structures, A &lt;b&gt;HashMap with (key, pointers)&lt;/b&gt; pairs and a &lt;b&gt;</span></span><br><span class="line"><span class="comment"> * doubly linked list&lt;/b&gt; which will work as the priority queue for deletion and store the &lt;b&gt;Values&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * , From the &lt;b&gt;HashMap&lt;/b&gt;, we can point to an element in the doubly linked list and update it&#x27;s retrieval</span></span><br><span class="line"><span class="comment"> * time. Because we go directly from the &lt;b&gt;HashMap&lt;/b&gt; to the item in the list, our time complexity</span></span><br><span class="line"><span class="comment"> * remains at O(1).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * For example, our doubly linked list can look like:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Least-recently-used-link -&gt; A &lt;-&gt; B &lt;-&gt; C &lt;-&gt; D &lt;-&gt; E -&gt; most-recently-used-link</span></span><br><span class="line"><span class="comment"> * --------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> * left-side most -&gt;                   middle                 &lt;- right-side most</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; The type of key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; The type of pointers (doubly linked list)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LruCache</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">mLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mCurrentSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> mMaxSize;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;K, Node&lt;K, V&gt;&gt; mCache;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; mLeastRecentlyUsedNode;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; mMostRecentlyUsedNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the list is empty</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruCache</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mMaxSize = maxSize;</span><br><span class="line">        mCurrentSize = <span class="number">0</span>;</span><br><span class="line">        mCache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        mLeastRecentlyUsedNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        mMostRecentlyUsedNode = mLeastRecentlyUsedNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCache.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put the new node at the right-most end of the linked list</span></span><br><span class="line">        Node&lt;K, V&gt; tempNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(mMostRecentlyUsedNode, <span class="literal">null</span>, key, value);</span><br><span class="line">        mMostRecentlyUsedNode.next = tempNode;</span><br><span class="line">        mMostRecentlyUsedNode = tempNode;</span><br><span class="line">        mCache.put(key, tempNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Delete the left-most entry if items exceed maxSize and update the LRU</span></span><br><span class="line">        <span class="keyword">if</span> (mCurrentSize == mMaxSize) &#123;</span><br><span class="line">            mCache.remove(mLeastRecentlyUsedNode.key);</span><br><span class="line">            mLeastRecentlyUsedNode = mLeastRecentlyUsedNode.next;</span><br><span class="line">            mLeastRecentlyUsedNode.previous = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Update cache size, for the first added entry update the LRU pointer</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mCurrentSize &lt; mMaxSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCurrentSize == <span class="number">0</span>) &#123;</span><br><span class="line">                mLeastRecentlyUsedNode = tempNode;</span><br><span class="line">            &#125;</span><br><span class="line">            mCurrentSize++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;K, V&gt; tempNode = mCache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (tempNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if MRU leave the list as it is</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempNode.key == mMostRecentlyUsedNode.key) &#123;</span><br><span class="line">            <span class="keyword">return</span> tempNode.value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the next and previous nodes</span></span><br><span class="line">        Node&lt;K, V&gt; previousNode = tempNode.previous;</span><br><span class="line">        Node&lt;K, V&gt; nextNode = tempNode.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If at the left-most(LRU), we update LRU</span></span><br><span class="line">        <span class="keyword">if</span> (tempNode.key == mLeastRecentlyUsedNode.key) &#123;</span><br><span class="line">            nextNode.previous = tempNode;</span><br><span class="line">            previousNode.previous = <span class="literal">null</span>;</span><br><span class="line">            mLeastRecentlyUsedNode = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if we are at in middle, we need to update the items before and after</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tempNode.key != mMostRecentlyUsedNode.key) &#123;</span><br><span class="line">            previousNode.next = nextNode;</span><br><span class="line">            <span class="comment">//note that</span></span><br><span class="line">            previousNode.previous = nextNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//finally  move the item to the MRU</span></span><br><span class="line">        tempNode.previous = mMostRecentlyUsedNode;</span><br><span class="line">        mMostRecentlyUsedNode.next = tempNode;</span><br><span class="line">        mMostRecentlyUsedNode = tempNode;</span><br><span class="line">        mMostRecentlyUsedNode.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tempNode.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define &#123;<span class="doctag">@code</span> Node&#125; with pointers to the previous and next item and a key, value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; the type of key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;U&gt; the type of value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T, U&gt; &#123;</span><br><span class="line">        T key;</span><br><span class="line">        U value;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T, U&gt; previous;</span><br><span class="line">        <span class="keyword">private</span> Node&lt;T, U&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;T, U&gt; previous, Node&lt;T, U&gt; next, T key, U value) &#123;</span><br><span class="line">            <span class="built_in">this</span>.previous = previous;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Origanize post from Network.</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>algorithm</tag>
        <tag>lruCache</tag>
      </tags>
  </entry>
  <entry>
    <title>ANDROID HTTP CLIENT-GET,POST,DOWNLOAD,UPLOAD,MULTIPART REQUEST</title>
    <url>/2016/04/15/android-http-client-get-post-download-upload-multipart-request/</url>
    <content><![CDATA[<p>通常Android应用程序要与远程服务器进行信息交换．最简单的方式是以HTTP协议作为基础来传输信息．在某些环境下使用HTTP协议是非常有用的，比如从远程服务器下载图片或者上传二进制数据到服务器．Android应用程序通过执行GET和POST请求(request)来发送数据．在这篇帖子，我想要分析分析一下如何使用<code>HttpURLConnection</code>与远程服务器进行通信．</p>
<h3 id="GET和POST请求"><a href="#GET和POST请求" class="headerlink" title="GET和POST请求"></a>GET和POST请求</h3><p>GET和POST请求在HTTP协议中是基块(the base blocks)。为了生成这类请求我们首先需要打开一个指向远程服务器的链接:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpURLConnection</span> <span class="variable">con</span> <span class="operator">=</span> (HttpURLConnection) (<span class="keyword">new</span> <span class="title class_">URL</span>(url)).openConnection();</span><br><span class="line">con.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">con.setDoInput(<span class="literal">true</span>);</span><br><span class="line">con.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">con.connect();</span><br></pre></td></tr></table></figure></div>

<p>首先，我门通过<code>url</code>参数构建一个<code>Url</code>对象，通过这个对象的<code>openConnection</code>方法得到<code>HttpURLConnection</code>,代码第二行我们设置请求的方式为Post，最后connect到服务器。</p>
<p>一旦我们持有一个打开了的链接我们就可以使用<code>OutputStream</code>进行写入我们的数据了。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">con.getOutputStream().wirte((<span class="string">&quot;name=&quot;</span>+name).getBytes());</span><br></pre></td></tr></table></figure></div>
<p>对于我们已经知道的参数我们可以使用键值对来写入。</p>
<p>最后一步是使用<code>InputStream</code>读取响应数据。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">ins</span> <span class="operator">=</span> con.getInputStream();</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>(ins.read(b) != -<span class="number">1</span>)</span><br><span class="line">    buffer.append(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">con.disconnect();</span><br></pre></td></tr></table></figure></div>

<p>到目前为止所有的工作都非常简单，但是需要记住的一点是：使用<code>HTTP</code>链接是一个耗时的操作，有时它可能需要很长的时间，因此我们不能把它放在UI线程里运行，否则我们会得到一个ANR(Application Not Responding)对话框。</p>
<p>解决这个问题的方法是我们可以使用<code>AsyncTask</code></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SendHttpRequestTask</span> <span class="keyword">extends</span> <span class="title class_">AsyncTask</span>&lt;String, Void, String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">doInBackground</span><span class="params">(String... params)</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> params[<span class="number">0</span>];</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> params[<span class="number">1</span>];</span><br><span class="line">	<span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> sendHttpRequest(url, name);</span><br><span class="line">	<span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPostExecute</span><span class="params">(String result)</span>&#123;</span><br><span class="line">	edtResp.setText(result);</span><br><span class="line">	item.setActionView(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="从服务器下载数据"><a href="#从服务器下载数据" class="headerlink" title="从服务器下载数据"></a>从服务器下载数据</h3><p>一个最普遍的情景是应用程序从远程服务器下载一些数据。我们假设要从服务器下载一张图片，在这例子里我们依旧使用<code>AsyncTask</code>来完成我们的操作，代码如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] downloadImage(String imgName)&#123;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;URL [&quot;</span>+url+<span class="string">&quot;] - Name [&quot;</span>+imgName+<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">HttpURLConnection</span> <span class="variable">con</span> <span class="operator">=</span> (HttpURLConnection) (<span class="keyword">new</span> <span class="title class_">URL</span>(url)).openConnection();</span><br><span class="line">	con.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">	con.setDoInput(<span class="literal">true</span>);</span><br><span class="line">	con.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">	con.connect();</span><br><span class="line">	con.getOutputStream.write((<span class="string">&quot;name=&quot;</span> + imgName).getBytes());</span><br><span class="line"></span><br><span class="line">	<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> con.getInputStream();</span><br><span class="line">	<span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>( is.read(b) != -<span class="number">1</span>)</span><br><span class="line">	    baos.write(b);</span><br><span class="line"></span><br><span class="line">	con.disconnect();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Throwable t)&#123;</span><br><span class="line">	t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个方法以下面这样的方式调用：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SendHttpRequestTask</span> <span class="keyword">extends</span> <span class="title class_">AsyncTask</span>&lt;String, Void, String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">byte</span>[] doInBackground(String...params)&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> params[<span class="number">0</span>];</span><br><span class="line">	<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> params[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>(url);</span><br><span class="line">	<span class="type">byte</span>[] data = client.downloadImage(name);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPostExecute</span><span class="params">(<span class="type">byte</span>[] result)</span>&#123;</span><br><span class="line">	<span class="type">Bitmap</span> <span class="variable">img</span> <span class="operator">=</span> BitmapFactory.decodeByteArray(result, <span class="number">0</span>, result.length);</span><br><span class="line">	imgView.setImageBitmap(img);</span><br><span class="line">	item.setActionView(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>


<h3 id="使用MultipartRequest上传数据到服务器"><a href="#使用MultipartRequest上传数据到服务器" class="headerlink" title="使用MultipartRequest上传数据到服务器"></a>使用MultipartRequest上传数据到服务器</h3><p>这是在处理<code>http</code>链接里最复杂的部分，本地的<code>HttpUrlConnection</code>不处理这类请求,一个Android应用程序上传一些二进制数据到服务器时它会发生。<code>MultipartRequest</code>类主要对文件上传进行操作，在上传时，编码格式为<code>enctype=&quot;multipart/form-data&quot;格式，以二进制方式提交，提交方式为post方式。以上传一张图片为例子，在种情况下请求会有点复杂，因为一个“一般”的请求满足不了我门的需求，因此我们创建一个</code>MultipartRequest&#96;.</p>
<p><code>MultipartRequest</code> 是一个通过像参数和二进制数据这样不同的部分构造的请求。</p>
<p>首先第一步是打开一个链接，通知(informing)服务器我们要发一些二进制数据。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectForMultipart</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    con = (HttpURLConnection) (<span class="keyword">new</span> <span class="title class_">URL</span>(url)).openConnection();</span><br><span class="line">    con.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    con.setDoInput(<span class="literal">true</span>);</span><br><span class="line">    con.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">    con.setRequestProperty(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Keep-Alive&quot;</span>);</span><br><span class="line">    con.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;multipart/form-data&quot;</span>; boundary=<span class="string">&quot; + boundary);</span></span><br><span class="line"><span class="string">    con.connect();</span></span><br><span class="line"><span class="string">    os = con.getOutputStream();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>在第７行我们指定了请求的<code>content-type</code>和另一个字段<em>boundary</em>,　这个字段是一个字符序列用于分隔不同的部分。</p>
<p>对于每个部分，如果它是一个文本像提交的参数或者是一个文件（二进制数据）就需要指定想要添加的部分。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormPart</span><span class="params">(String paramName, String value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    writeParamData(paramName, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeParamData</span><span class="params">(String paramName, String value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    os.wirte( (delimiter + boundary + <span class="string">&quot;\r\n&quot;</span>).getBytes());</span><br><span class="line">    os.write( <span class="string">&quot;Content-Type: text/plain\r\n&quot;</span>.getBytes());</span><br><span class="line">    os.wirte( (<span class="string">&quot;Content-Disposition: form-data; name=\&quot;&quot;</span> +paramName + <span class="string">&quot;\&quot;\r\n&quot;</span>).getBytes());</span><br><span class="line">    os.write( (<span class="string">&quot;\r\n&quot;</span> + value + <span class="string">&quot;\r\n&quot;</span>).getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">delimiter</span> <span class="operator">=</span> <span class="string">&quot;--&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">boundary</span> <span class="operator">=</span> <span class="string">&quot;SwA&quot;</span>+ Long.toString(System.currentTimeMillis())+<span class="string">&quot;SwA&quot;</span>;</span><br></pre></td></tr></table></figure></div>
<p>使用下面的方式添加文件部分：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFilePart</span><span class="params">(String paramName, String fileName, <span class="type">byte</span>[] data)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    os.write( (delimiter + boundary + <span class="string">&quot;\r\n&quot;</span>).getBytes());</span><br><span class="line">    os.write( (<span class="string">&quot;Content-Disposition: form-data; name=\&quot;&quot;</span>+ paramName + <span class="string">&quot;\&quot;; filename=\&quot;&quot;</span> + fileName + <span class="string">&quot;\&quot;\r\n&quot;</span>).getBytes());</span><br><span class="line">    os.write( (<span class="string">&quot;Content-Type: application/octet-stream\r\n&quot;</span>).getBytes());</span><br><span class="line">    os.write( (<span class="string">&quot;Content-Transfer-Encoding: binary\r\n&quot;</span>).getBytes());</span><br><span class="line">    os.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    os.write(data);</span><br><span class="line">    os.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>因此，使用在我们的例子里：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SendHttpRequestTask</span> <span class="keyword">extends</span> <span class="title class_">AsyncTask</span>&lt;String, Void, String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String <span class="title function_">doInBackground</span><span class="params">(String... params)</span>&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> params[<span class="number">0</span>];</span><br><span class="line">	<span class="type">String</span> <span class="variable">param1</span> <span class="operator">=</span> params[<span class="number">1</span>];</span><br><span class="line">	<span class="type">String</span> <span class="variable">param2</span> <span class="operator">=</span> params[<span class="number">2</span>];</span><br><span class="line">	<span class="type">Bitmap</span> <span class="variable">b</span> <span class="operator">=</span> BitmapFactory.decodeResource(UploadActivity.<span class="built_in">this</span>.getResources(), R.drawable.logo);</span><br><span class="line"></span><br><span class="line">	<span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">	b.compress(CompressFormat.PNG, <span class="number">0</span>, baos);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">	    <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>(url);</span><br><span class="line">	    client.connectForMulitipart();</span><br><span class="line">	    client.addFormPart(<span class="string">&quot;param1&quot;</span>, param1);</span><br><span class="line">	    client.addFormPart(<span class="string">&quot;param2&quot;</span>, param2);</span><br><span class="line">	    client.addFilePart(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;logo.png&quot;</span>, baos.toByteArray());</span><br><span class="line">	    client.finishMultipart();</span><br><span class="line">	    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> client.getResponse();</span><br><span class="line">	&#125;<span class="keyword">catch</span>(Throwable t)&#123;</span><br><span class="line">	    t.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span> </span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onPostExecute</span><span class="params">(String data)</span>&#123;</span><br><span class="line">	    item.setActionView(<span class="literal">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Android</category>
        <category>Network</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>http</tag>
        <tag>HttpURLConnection</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson 库的使用</title>
    <url>/2016/04/20/Simple-Usage-of-Gson-Library/</url>
    <content><![CDATA[<p><code>Gson</code>是一个Java序列化与反序列化的库，它能够从Java对象转换为JSON对象，也能够从一个JSON字符串转换成Java对象。</p>
<h4 id="使用前配置Maven依赖"><a href="#使用前配置Maven依赖" class="headerlink" title="使用前配置Maven依赖"></a>使用前配置Maven依赖</h4><p>在使用<code>Gson</code>前，需要配置Maven管理依赖</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- Gson: Java to Json conversion --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.6</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>
<p>配置好依赖，我们就可以使用Gson了。</p>
<h4 id="使用Gson的一个简单示例"><a href="#使用Gson的一个简单示例" class="headerlink" title="使用Gson的一个简单示例"></a>使用Gson的一个简单示例</h4><p><code>Gson</code>提供了一个主要的类<code>Gson</code>,通常在使用<code>Gson</code>前<code>Gson</code>类首先被构建出来，再调用方法<code>toJson(Object)</code>或者<code>fromJson(String,Class)</code>, <code>Gson</code>实例是线程安全的，因此你可以自由地通过多个线程复用它。<br>如果默认配置满足你的基本需求，你可以通过调用默认构造函数<code>new Gson()</code>来创建一个<code>Gson</code>实例。你也可以通过构造<code>GsonBuilder</code>对象设置一些配置项(versioning support, pretty printing, 自定义的JsonSerializers,JsonDeserializers,和InstanceCreator)来完成<code>Gson</code>的配置后通过方法<code>create()</code>创建它。一个简单的示例如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>(); <span class="comment">// Or use new GsonBuilder.create();</span></span><br><span class="line"><span class="type">MyType</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyType</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(target); <span class="comment">// serializes target to json</span></span><br><span class="line"><span class="type">MyType</span> <span class="variable">target2</span> <span class="operator">=</span> gson.fromJson(json, MyType.class); <span class="comment">// deserializes json into target2</span></span><br></pre></td></tr></table></figure></div>

<p>如果我门序列化和反序列化的对象是一个参数化类型(ParameterizedType),当它可能包含至少一个类型参数以及可能是一个数组的时候，我们必须使用方法<code>toJson(Object,Type)</code>或者<code>fromJson(String,Type)</code>如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Type</span> <span class="variable">listType</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;String&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; target = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line">target.add(<span class="string">&quot;blah&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(target, ListType);</span><br><span class="line">List&lt;String&gt; target2 = gson.fromJson(json, ListType);</span><br></pre></td></tr></table></figure></div>

<p>另一个<code>toJson</code>方法的重载形式是<code>toJson(Object src, Appendable writer)</code>，第二个参数是一个可追加的实例，通过它可以很方便地序列化对象到一个文件或网络流。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;foo.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>.create();</span><br><span class="line">gson.toJson(<span class="string">&quot;hello&quot;</span>, writer);</span><br><span class="line">gson.toJson(<span class="number">123</span>, writer);</span><br><span class="line"></span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure></div>
<p>上面的代码没有正确处理流writer,实际项目中，应该在finally block 中关闭流或者用try-with-resource的方式处理流。需要注意的是，我们在上面使用了字符流而不是字节流，由于<code>toJson</code>方法的第二个参数需要一个<code>Appendable</code>实例，因此我们使用字符流。当然Java也提供了字符流与字节流之间的转换类<code>InputStreamReader</code> 和<code>OutputStreamWriter</code>。在使用这两个类进行序列化和反序列化时如果不提供编码和字符集它会使用系统默认的编码。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.GsonBuilder;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GradleDemo Created by lechance on 3/20/16 4:40 PM.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Writer</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.json&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>().create();</span><br><span class="line"></span><br><span class="line">            <span class="type">Type</span> <span class="variable">listType</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypeToken</span>&lt;List&lt;String&gt;&gt;() &#123;</span><br><span class="line">            &#125;.getType();</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; target = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            target.add(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">            target.add(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">            target.add(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line"></span><br><span class="line">            gson.toJson(target, listType, writer);</span><br><span class="line"></span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">//omit</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a class="link"   href="http://www.javadoc.io/doc/com.google.code.gson/gson/2.6.2" >Gson Api <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/google/gson/" >github gson <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="http://www.javacreed.com/simple-gson-example/" >Gson Example <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>gson</tag>
        <tag>json</tag>
        <tag>serialization</tag>
        <tag>deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Model-view-presenter Pattern in Android</title>
    <url>/2016/04/23/Model-view-presenter-Pattern-in-Android/</url>
    <content><![CDATA[<blockquote>
<p>wikipedia <a class="link"   href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" >https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p><em>Model-view-presenter (MVP)</em> is a derivation of the <em>Model-view-controller(MVC)</em> architectural pattern, and is used mostly for building <code>user interface</code>.<br>In MVP the presenter assumes the functionality of the “middle-man”, In MVP, all presentation logic is pushed to the <code>presenter</code>.</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/Model_View_Presenter_GUI_Design_Pattern.png"
                      alt="mvp-diagram"
                ></p>
<h3 id="模式描述"><a href="#模式描述" class="headerlink" title="模式描述"></a>模式描述</h3><p>MVP 是一种架构模式，利用它可以方便的进行自动化单元测试以及在表示逻辑上提高关注分离：</p>
<ul>
<li><code>Model</code>　定义了业务逻辑和实体模型，它负责处理数据的加载和存储，比如从本地或网络获取数据等。</li>
<li><code>Presenter</code>相当于协调者，它从<code>Model</code>接收数据，处理之后显示在<code>View</code>，它是模型和视图之间的桥梁，它将模型与视图分离开。</li>
<li><code>View</code>负责界面数据(<code>the model</code>)的展示以及与用户进行交互，它几乎不包含任何逻辑。</li>
</ul>
<blockquote>
</blockquote>
<p>Model和View使用Observe模式进行沟通；而Presenter和View则使用Mediator模式进行通信；Presenter操作Model则使用Command模式进行操作。基本设计和MVC相同：Model存储数据，View展现Model的表现，Presenter协调两者之间的通信。在MVP中View接收到事件，然后会将他们传递到Presenter，具体如何处理这些事件，将由Presenter来完成。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/mvp_diagram.png"
                      alt="MVP Diagram"
                ></p>
<h3 id="MVP的优点-pro"><a href="#MVP的优点-pro" class="headerlink" title="MVP的优点(pro)"></a>MVP的优点(pro)</h3><ul>
<li>模型与视图完全分离，我们可以修改视图而不影响模型。</li>
<li>可以更高效地使用模型，因为所有的交互都发生在Presenter内部。</li>
<li>可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。</li>
<li>如果把逻辑放在Presenter中，那么就可以脱离用户接口来测试这些逻辑（单元测试）。</li>
</ul>
<h3 id="MVP的缺点-con"><a href="#MVP的缺点-con" class="headerlink" title="MVP的缺点(con)"></a>MVP的缺点(con)</h3><ul>
<li>首先代码量多了，这是毋庸置疑的。</li>
<li>由于对视图的渲染放在了Presenter中，所以视图和Presenter的交互会过于频繁。</li>
</ul>
<p>具体示例参考以下地址：<br><a class="link"   href="https://github.com/googlesamples/android-architecture" >Todo-MVP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Architectural Pattern</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>mvp</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Usage of Google Guava EventBus</title>
    <url>/2016/05/05/Usage-of-Google-Guava-EventBus/</url>
    <content><![CDATA[<blockquote>
</blockquote>
<p><code>EventBus</code> allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). It is designed exclusively to replace traditional Java in-process event distribution using explicit registration. It is not a general-purpose publish-subscribe system, nor is intended for interprocess communication.</p>
<p><em>本资料整理自网络</em></p>
<h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>在应用程序中有些对象需要分享信息,在Java程序中实现信息共享的一种方式是使用事件监听器(event listener),监听器的唯一目的是当事件发生时采取一些操作.对于这样的问题,通常开发者会编写必要的匿名内部类(anonymous inner class)来实现事件监听接口.而在这里要学习的是另一个处理Java事件的方法,<code>EventBus</code>.</p>
<p><code>EventBus</code>是Google<a class="link"   href="https://github.com/google/guava"  title="guava">Guava <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>项目中用于事件处理机制的子库(当然里面还包含许多实用),是设计模式中观察者模式(生产者／消费者模式)的实现.<code>EventBus</code>允许对象无需明确知道对方的情况下发布或订阅事件(实现这样的功能是通过Java的Reflection机制).更多的信息可以参考<a class="link"   href="https://github.com/google/guava/wiki/EventBusExplained"  title="wiki">这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<blockquote>
<p>Observer模式是比较常用的设计模式之一,比如常用的event Listener就是这个模式,只是名字不同罢了,不管名字怎么变,模式还是这个模式.而从JDK1.0开始就提供了两个用于实现这类模式的类(<code>Observable</code>,<code>Observer</code>).</p>
</blockquote>
<h4 id="EventBus-类"><a href="#EventBus-类" class="headerlink" title="EventBus 类"></a>EventBus 类</h4><p><code>EventBus</code>是一个非常灵活以及能够作为单例模式来使用的类,或者在不同的上下文中程序可以持有此类的几个实例适当地传递事件(transferring event).由于事件会被串行(serially)地分发,因此保持轻量的事件处理方法是非常重要的.假如你要在事件处理程序(Event Handler)中做大量的操作,有另一种风味(flavor)的<code>EventBus</code>可以使用,<code>AsyncEventBus</code>.<br><code>AsyncEventBus</code>与<code>EventBus</code>具有相同的功能,只不过<code>AsyncEventBus</code>是采用<code>ExecutorService</code>作为构造函数的参数以此允许异步事件的分发.</p>
<h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p>使用<code>EventBus</code>替换一个基于事件监听器(EventListener) 的系统是很简单的.</p>
<h4 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h4><ul>
<li>定义一个只包含需要订阅的事件类型的形参的public方法,并用<code>@Subscribe</code>注解这个方法.</li>
<li>通过调用<code>register</code>方法注册所有要接收事件的订阅者.</li>
</ul>
<p>简单的示例如下：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewSubscriber</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleNewEvent</span><span class="params">(NewEvent event)</span>&#123;</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">EventBus</span> <span class="variable">eventBus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line">eventBus.register(<span class="keyword">new</span> <span class="title class_">NewSubscriber</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h4><ul>
<li>通过<code>EventBus</code>发布事件是非常简单明了的,通过调用<code>EventBus.post</code>发送事件的变化通知所有注册了的对象.<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTransaction</span><span class="params">()</span>&#123;</span><br><span class="line">  purchaseService.purchase(item, amount);</span><br><span class="line">  eventBus.post(<span class="keyword">new</span> <span class="title class_">CashPurchaseEvent</span>(item, amount);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
<blockquote>
<p>明显的可以看出,发布和订阅使用了相同的<code>EventBus</code>类的实例,简单起见,你也可以使用单例模式.</p>
</blockquote>
<h4 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h4><p><code>EventBus</code>的一个非常强大的功能是你可以根据自己的需要使你的<code>handler</code>作为<a class="link"   href="http://stackoverflow.com/questions/3766845/coarse-grained-vs-fine-grained" >粗粒度或细粒度 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的处理方式.<code>EventBus</code>会调用已注册的发布的事件对象的子类和它的实现接口.比如，要处理某个事件可以创建一个带有类型参数的事件处理程序。要处理具体的事件，就创建一个非常具体的事件处理程序，比如下面的示例：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EventBusDemo Created by lechance </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PurchaseEvent</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PurchaseEvent</span><span class="params">(String item)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashPurchaseEvent</span> <span class="keyword">extends</span> <span class="title class_">PurchaseEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CashPurchaseEvent</span><span class="params">(String item, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(item);</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;item: %s amount: %s%n&quot;</span>, item, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditPurchaseEvent</span> <span class="keyword">extends</span> <span class="title class_">PurchaseEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> amount;</span><br><span class="line">    <span class="keyword">private</span> String cardNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditPurchaseEvent</span><span class="params">(String item, <span class="type">int</span> amount, String cardNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(item);</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        <span class="built_in">this</span>.cardNumber = cardNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;item: %s amount: %d cardNumber: %s%n&quot;</span>, item, amount, cardNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endhighlight %&#125;</span><br><span class="line"></span><br><span class="line">下面是事件处理类：</span><br><span class="line"></span><br><span class="line">&#123;% highlight java %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EventBusDemo Created by lechance </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有现金购买时才会被通知</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashPurchaseSubscriber</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCashPurchase</span><span class="params">(CashPurchaseEvent event)</span>&#123;</span><br><span class="line">        event.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有信用卡购买时才会被通知</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditPurchaseSubscriber</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCreditPurchase</span><span class="params">(CreditPurchaseEvent event)</span>&#123;</span><br><span class="line">        event.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于任何事件都会被通知</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PurchaseSubscriber</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePurchaseEvent</span><span class="params">(PurchaseEvent event)</span>&#123;</span><br><span class="line">	<span class="comment">//由于PurchaseEvent是抽象类，以下方法会调用它的实现类中对应的方法。</span></span><br><span class="line">        event.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><code>EventBus</code>提供了吸引人的操作事件的模式，使你可以替代传统的Java事件处理机制。</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><ul>
<li><a class="link"   href="http://google.github.io/guava/releases/snapshot/api/docs/" >EventBus API <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://github.com/google/guava" >Guava on Github <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="http://codingjunkie.net/guava-eventbus/" >Bill’s Post about EventBus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Notes - Make Gif File in Linux(debian)</title>
    <url>/2016/05/13/make-gif-file-in-linux/</url>
    <content><![CDATA[<p>本篇是记录如何在Linux(我的系统是Debian)下制作用来演示app操作的gif动画文件.因为之前知道的方法是只有在ps里制作演示gif文件,而在Linux下安装ps又需要安装<a class="link"   href="https://www.winehq.org/" >Wine <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>这样的软件,由于自己电脑硬盘容量只有320G,所以像ps这样的软件还是能不装就不装吧.</p>
<blockquote>
<p>一位<a class="link"   href="http://my.csdn.net/harvic880925" >朋友 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>推荐了在windows和mac下的两个工具<code>gifcam</code>和<code>licecap</code>,先记录在这里方便以后用到的时候有地方查.</p>
</blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ul>
<li>GIMP这个图片处理工具一般系统默认安装的,没有安装的话可以下载.</li>
<li>Kazam这个一个屏幕录制工具,使用非常简便,可以在这里<a class="link"   href="https://launchpad.net/kazam" >下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>安装,也可以通过apt-get安装.</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install kazam</span><br></pre></td></tr></table></figure></div>
<ul>
<li>FFMPEG这是一个非常强大的工具,这里我只是用它来转换格式,更多的信息你可以到<a class="link"   href="https://ffmpeg.org/" >官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>了解, 安装方式如下：</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install libav-tools ffmpeg</span><br></pre></td></tr></table></figure></div>
<p>使用ffmpeg从命令行能够转换一个视频文件(mp4或其他格式)到多个png格式的文件.下面命令提取视频的帧到独立的png文件中,当然你可以对这些帧进行编辑.</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 10 output%05d.png` </span><br></pre></td></tr></table></figure></div>

<ul>
<li>ImageMagick同样是一个强大的图片处理工具,它用于创建,编辑,组合以及转换位图图片,支持超过200种格式(PNG,JPEG,JPEG-200,GIF,PDF,SVG).<code>Convert</code>程序用于在两种图片格式间进行转换,更多关于<code>Convert</code>命令的使用可以参考<a class="link"   href="http://www.imagemagick.org/script/convert.php" >这里 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">convert output*.png output.gif</span><br></pre></td></tr></table></figure></div>

<p>也可以通过<code>Convert</code>命令进一步对图片进行编辑,选项 -delay [fps&#x2F;sec] 和 -loop [numbers],如下：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">convert -delay 1x20 -loop 0 out*.gif converted-out.gif</span><br></pre></td></tr></table></figure></div>
<ul>
<li>由于最终生成的文件太大,需要做一些优化,下面是通过<code>ImageMagick</code>的优化功能来减小gif文件的大小.</li>
</ul>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">convert -layers Optimize demo.gif optimized-demo.gif</span><br></pre></td></tr></table></figure></div>

<p>优化效果不怎么好(文件大小2.8M),要是你知道更好的优化gif文件大小的工具,可以在下方留言,-_-</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/small.gif"
                      alt="demo"
                ></p>
<p>再贴一个同类教程的帖子，很实用.<br><a class="link"   href="http://www.liaohuqiu.net/posts/make-gif-for-android-app/" >Make GIF Snapshot for Android APP  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>gif</tag>
        <tag>ffmpeg</tag>
        <tag>convert</tag>
      </tags>
  </entry>
  <entry>
    <title>Simple-xml Library Usage</title>
    <url>/2016/05/15/simple-xml-usage/</url>
    <content><![CDATA[<blockquote>
<p>之前在看thanatos的<a class="link"   href="http://www.oschina.net/p/FlowGeek-Android"  title="FlowGeek">FlowGeek <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>源码时看到的一个XML处理框架<a class="link"   href="http://simple.sourceforge.net/home.php"  title="Simple-xml Library">Simple <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. 这里做一下简单的记录, 和其他类似的框架<a class="link"   href="http://sax.sourceforge.net/"  title="sax">SAX <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,<a class="link"   href="http://x-stream.github.io/"  title="XStream">XStream <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>,<a class="link"   href="https://commons.apache.org/proper/commons-digester/"  title="digester">Digester <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>比较起来, <em>Simple</em> 就如同它名字一样显得小巧而精干. <em>Simple</em> 框架简单地围绕几个注解提供了XML的序列化, 就如同官网描述的那样它不需要配置, 只使用字段注解来表示序列化的对象. </p>
</blockquote>
<p>一个简单示例: 序列化一个简单的对象<code>Example</code></p>
<p>为了序列化对象到XML, 必须在这个对象内声明一系列注解. 这些注解会告诉持久化器(Persister类)如何序列化一个对象. </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span> name //If this is not specified then the name </span></span><br><span class="line"><span class="comment"> * of the XML element will be the name of the class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Root(name = &quot;configuration&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Configuration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Element</span></span><br><span class="line">    <span class="keyword">private</span> Server server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Attribute</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">getServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServer</span><span class="params">(Server server)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.server = server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIdentity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIdentity</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Root(name = &quot;server&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Element</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Attribute</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> required // optional element </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Element(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Security security;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Element(name = &quot;description&quot;, required = false)</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Security <span class="title function_">getSecurity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> security;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecurity</span><span class="params">(Security security)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.security = security;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Root(name = &quot;security&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Security</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Attribute</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> ssl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Element</span></span><br><span class="line">    <span class="keyword">private</span> String keyStore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSsl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ssl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSsl</span><span class="params">(<span class="type">boolean</span> ssl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ssl = ssl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getKeyStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> keyStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKeyStore</span><span class="params">(String keyStore)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyStore = keyStore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Note: 值得说明的是, 在对对象属性注解的时候, 可通过传递一个<code>boolean</code>值给<code>@Element</code>or<code>@Attribute</code>内置方法<code>boolean required()</code>来指明该属性在序列化时是否是必须提供的.</p>
<p>声明了上面类后, 可以使用Persister来操作了. </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Persister</span> <span class="variable">persister</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Persister</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">File</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./example.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">    <span class="comment">//initial security object and then configure it</span></span><br><span class="line">    <span class="type">Security</span> <span class="variable">security</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Security</span>();</span><br><span class="line">    security.setSsl(<span class="literal">true</span>);</span><br><span class="line">    security.setKeyStore(<span class="string">&quot;LnBWb8yVASW8fBK+6b1Dt4CNSBAyT9RPet9jFvxs6cwqHtbEm/Yi5E2m/1V4+FC3&quot;</span>);</span><br><span class="line">    <span class="comment">//initial server object and then configure it</span></span><br><span class="line">    <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>();</span><br><span class="line">    server.setHost(<span class="string">&quot;lechance.github.io&quot;</span>);</span><br><span class="line">    server.setPort(<span class="number">80</span>);</span><br><span class="line">    server.setSecurity(security);</span><br><span class="line">    server.setDescription(<span class="string">&quot;optional element or attributes&quot;</span>);</span><br><span class="line">    <span class="comment">//final step that to serialize the configuration object into xml file</span></span><br><span class="line">    configuration.setServer(server);</span><br><span class="line">    configuration.setIdentity(<span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">    persister.write(configuration, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>生成的XML文件结构为:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;configuration id=<span class="string">&quot;255&quot;</span>&gt;</span><br><span class="line">   &lt;server port=<span class="string">&quot;80&quot;</span>&gt;</span><br><span class="line">      &lt;host&gt;lechance.github.io&lt;/host&gt;</span><br><span class="line">      &lt;security ssl=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">         &lt;keyStore&gt;LnBWb8yVASW8fBK+6b1Dt4CNSBAyT9RPet9jFvxs6cwqHtbEm/Yi5E2m/1V4+FC3&lt;/keyStore&gt;</span><br><span class="line">      &lt;/security&gt;</span><br><span class="line">      &lt;description&gt;optional element or attributes&lt;/description&gt;</span><br><span class="line">   &lt;/server&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></div>

<p>当然除了序列化对象外, 你还能够从XML文件反序列化对象. </p>
<p>为了演示反序列化操作, 假如有一下XML文件. </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;<span class="keyword">module</span> external.linked.project.id=<span class="string">&quot;LeJokes&quot;</span> </span><br><span class="line">        external.linked.project.path=<span class="string">&quot;$MODULE_DIR$&quot;</span> </span><br><span class="line">        external.root.project.path=<span class="string">&quot;$MODULE_DIR$&quot;</span> </span><br><span class="line">        external.system.id=<span class="string">&quot;GRADLE&quot;</span> </span><br><span class="line">        external.system.<span class="keyword">module</span>.group=<span class="string">&quot;&quot;</span> </span><br><span class="line">        external.system.<span class="keyword">module</span>.version=<span class="string">&quot;unspecified&quot;</span> </span><br><span class="line">        type=<span class="string">&quot;JAVA_MODULE&quot;</span> </span><br><span class="line">        version=<span class="string">&quot;4&quot;</span>&gt;</span><br><span class="line">    &lt;component name=<span class="string">&quot;FacetManager&quot;</span>&gt;</span><br><span class="line">        &lt;facet type=<span class="string">&quot;java-gradle&quot;</span> name=<span class="string">&quot;Java-Gradle&quot;</span>&gt;d</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;option name=<span class="string">&quot;BUILD_FOLDER_PATH&quot;</span> value=<span class="string">&quot;$MODULE_DIR$/build&quot;</span> /&gt;</span><br><span class="line">                &lt;option name=<span class="string">&quot;BUILDABLE&quot;</span> value=<span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/facet&gt;</span><br><span class="line">    &lt;/component&gt;</span><br><span class="line">    &lt;component name=<span class="string">&quot;NewModuleRootManager&quot;</span> LANGUAGE_LEVEL=<span class="string">&quot;JDK_1_8&quot;</span> inherit-compiler-output=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">        &lt;exclude-output /&gt;</span><br><span class="line">        &lt;content url=<span class="string">&quot;file://$MODULE_DIR$&quot;</span>&gt;</span><br><span class="line">            &lt;excludeFolder url=<span class="string">&quot;file://$MODULE_DIR$/.gradle&quot;</span> /&gt;</span><br><span class="line">        &lt;/content&gt;</span><br><span class="line">        &lt;orderEntry type=<span class="string">&quot;jdk&quot;</span> jdkName=<span class="string">&quot;1.8&quot;</span> jdkType=<span class="string">&quot;JavaSDK&quot;</span> /&gt;</span><br><span class="line">        &lt;orderEntry type=<span class="string">&quot;sourceFolder&quot;</span> forTests=<span class="string">&quot;false&quot;</span> /&gt;</span><br><span class="line">    &lt;/component&gt;</span><br><span class="line">&lt;/<span class="keyword">module</span>&gt;</span><br></pre></td></tr></table></figure></div>

<p>接下来我们要做的工作是通过<code>Simple</code>来对上面XML进行反序列化实现. </p>
<p>后面我会贴上解析的代码, 期待 :).</p>
<p>For more infomation about <em>Simple-xml</em> framework, please refer to <a class="link"   href="http://simple.sourceforge.net/home.php"  title="Simple-xml Library">here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>serialization</tag>
        <tag>deserialization</tag>
        <tag>simple-xml</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Android中事件驱动编程 Event-driven programming for Android (part II)</title>
    <url>/2016/05/18/event-driven-for-android/</url>
    <content><![CDATA[<p>原文地址:<a class="link"   href="https://medium.com/google-developer-experts/event-driven-programming-for-android-part-ii-b1e05698e440#.9xdx4wc4q"  title="source address">Event-driven for Android <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>(This is second article in a three-part series)</p>
<p>(本文是系列文章的第二部分)</p>
<p>In the previous article we had a short introduction into Event-Driven programming. Now let’s see some actual code and how to perform the basics with EventBus.</p>
<p>在前一章里我们已经简短地介绍了事件驱动编程。现在我们用实际的代码来展示如何用<code>EventBus</code>执行基本的操作。</p>
<p>First I will present the entities that play a central role in Event-Driven programming. Refer to the following image taken from the <a class="link"   href="https://github.com/greenrobot/EventBus"  title="EventBus">EventBus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> repository.</p>
<p>首先，我会介绍在事件驱动编程中扮演核心角色的实体。引用一张EventBus仓库的图片。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/android/EventBus-Publish-Subscribe.png"
                      alt="EventBus" title="eventbus publish subscribe diagrams"
                ></p>
<p>An <em>Event Bus</em>. This is the central communication channel that connects all the other entities.</p>
<p><em>Event Bus</em> 是连接所有其他实例的中央通信通道 (central communication channel).</p>
<p>An <em>Event</em>. This is the action that will take place and can be literally anything (the application starting, some data being received, a user interaction…)</p>
<p>事件 - 发生的行为(action)，也可以从字面上理解为任何的事件(literally anything)  (应用程序的启动，数据的接收，用户交互等…)</p>
<p>A <em>Subscriber</em>. The <em>Subscriber</em> are listening at the <em>Event Bus</em>. If they see an event circulating, they will be triggered.</p>
<p>订阅者 - 监听事件总线的订阅者，如果它们监听到事件的散布就会被触发(triggered)。</p>
<p>A <em>Publisher</em>, which sends <em>Events</em> to the <em>Event Bus</em>.</p>
<p>发布者 - 它给事件总线(Event Bus)发送事件(Events)。</p>
<p>Everything is clear with a practical view, so let’s see how this fits a basic example:</p>
<p>现在所有概念都很清楚，所以让我们看看这是如何适合一个基本的例子：</p>
<ul>
<li>An application that loads two fragments.</li>
<li>The second fragment contains a <em>TextView</em> that will be updated when a button is clicked.</li>
<li>The <em>ActionBar</em>  title will change when a new Fragment comes into scene.</li>
</ul>
<h3 id="The-hosting-Activity"><a href="#The-hosting-Activity" class="headerlink" title="The hosting Activity"></a>The hosting Activity</h3><p>The hosting Activity will need to register in its method onCreate the EventBus.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">EventBus.getDefault().register(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></div>
<p>The hosting Activity will be now ready to read data from the bus. We also need to unregister the bus in the method onDestory.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">EventBus.getDefault().unregister(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></div>

<p>The Activity will be capturing two different events: one to update the ActionBar title and another one to load the first fragment. We will write two methods onEvent that will handle the events:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(ShowFragmentEvent event)</span> &#123;</span><br><span class="line">    getFragmentManager().beginTransaction().replace(R.id.container, event.getFragment()).addToBackStack(<span class="literal">null</span>).commit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(UpdateActionBarTitleEvent e)</span> &#123;</span><br><span class="line">    getActionBar().setTitle(e.getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="The-Events"><a href="#The-Events" class="headerlink" title="The Events"></a>The Events</h3><p>Each event needs to be declared in its class. The events can contain variables within them.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ShowFragmentEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Fragment fragment;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShowFragment</span><span class="params">(Fragment fragment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fragment = fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Fragment <span class="title function_">getFragment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>###The Fragments</p>
<p>We need now to create the fragments. The first Fragment will contain a button that open the second, and the latest will contain a button that, when pressed, updates a TextView. The fragments also need to register and de-register the EventBus, so to archieve a cleaner structure everything will be encapsulated in a BaseFragment.</p>
<p>Now let’s create some more action, The first Fragment will open the second one with the following function:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OnClick(R.id.first_button)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">firstButtonClick</span><span class="params">()</span> &#123;</span><br><span class="line">    EventBus.getDefault().post(<span class="keyword">new</span> <span class="title class_">ShowFragmentEvent</span>(<span class="keyword">new</span> <span class="title class_">SecondFragment</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Note that here I am using annotations from <a class="link"   href="https://github.com/JakeWharton/butterknife"  title="ButterKnife">ButterKnife <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. It produces a much cleaner and neater code. If you haven’t used it yet, you should start now.</p>
<p>The button of the second Fragment will send an event to the EventBus to change the TextView.</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">EventBus.getDefault().post(<span class="keyword">new</span> <span class="title class_">UpdateTextEvent</span>(getString(R.String.text_updated)));</span><br></pre></td></tr></table></figure></div>

<p>We have a basic application with two Fragments that communicate between them with Events, and a Fragment that get updated through Events. I have upload the code to <a class="link"   href="https://github.com/kikoso/eventbus-sample"  title="eventbus sample">GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, so you can check it out and take a look.	</p>
<p>A key question is how to escalate an Event-Driven architecture. In the next article I will propose a clean and understandable architecture to support Event-Driven programing in Android.</p>
<p>原创文章转载请注明：</p>
<p>转载自<a href="http://lechance.github.io/posts/2016/05/18/event-driven-for-android/" title="lechance">Lechance</a>翻译：<a class="link"   href="https://medium.com/google-developer-experts/event-driven-programming-for-android-part-ii-b1e05698e440#.9xdx4wc4q" >https://medium.com/google-developer-experts/event-driven-programming-for-android-part-ii-b1e05698e440#.9xdx4wc4q <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>eventbus</tag>
        <tag>event-driven</tag>
      </tags>
  </entry>
  <entry>
    <title>Executor Framework in Java</title>
    <url>/2016/05/20/executor-framework/</url>
    <content><![CDATA[<h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>Typically, when use Java to develop a simple concurrent applications, will create some <em>Runnable</em> object, and then create the corresponding <em>Thread</em> object to perform them. However, if we need to develop a program to run a large number of concurrent tasks, method highlights a lot of disadvantages. For example, we nned to create a thread ojbect for each task, creating too many thread will cause the system to overload.</p>
<p>We all known about that there are two ways to create a thread in java. Creating a thread in java is very expensive process which includes memory overhead also. So it’s a good idea if we can re-use these thread once created, to run our future runnables.</p>
<p><em>Executors Framework</em> (java.util.concurrent.Executor), released with the JDK 1.5 in package java.util.concurrent is used to run the Runnable objects without creating new threads every time and mostly re-using the already created thread.</p>
<p>The <code>Executor Framework</code> separates the creation and execution of tasks by using an <em>Executor</em>, which requires only objects that implement the <em>Runnable</em> interface, and the sends them to the <em>Executor</em>. The <em>Executor</em> also privides a thread pool to improve the performance of the application. When a task is sent to the <em>Executor</em>, The Executor tries to use the thread in thread pool to perform this task, avoiding the continuous creation and destruction of the thread, resulting in system performance degradation.</p>
<p>Another advantages of this framework is the <em>Callable</em> interface, which is similar to the <em>Runnable</em> interface, but it provides two enhancements.</p>
<ul>
<li>This interface in the <em>call</em> method can return a result.</li>
<li>When a Callable object is sent to <em>Executor</em> will get an object implemented the <em>Future</em> interface, you can use this object to control the status and results of the <em>callable</em> object.</li>
</ul>
<h4 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h4><p>Demo 1</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GradleDemo Created by lechance .</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExecutorDemo</span>.Server();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">Task</span> <span class="variable">task</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task</span>(<span class="string">&quot;task&quot;</span> + i);</span><br><span class="line">            server.executeTask(task);</span><br><span class="line">        &#125;</span><br><span class="line">        server.endServer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> ThreadPoolExecutor mExecutor;</span><br><span class="line">        <span class="keyword">private</span> Task mTask;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Server</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//            mExecutor = (ThreadPoolExecutor) Executors.newCachedThreadPool();</span></span><br><span class="line">            mExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">(<span class="keyword">final</span> Task task)</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Server: A new task[%s] has arrived%n&quot;</span>, task.getName());</span><br><span class="line">            mExecutor.execute(task);</span><br><span class="line">            System.out.printf(<span class="string">&quot;Server: Pool size: %d%n&quot;</span>, mExecutor.getPoolSize());</span><br><span class="line">            System.out.printf(<span class="string">&quot;Server: Active count: %d%n&quot;</span>, mExecutor.getActiveCount());</span><br><span class="line">            System.out.printf(<span class="string">&quot;Server: Completed task: %d%n&quot;</span>, mExecutor.getCompletedTaskCount());</span><br><span class="line">            System.out.printf(<span class="string">&quot;Server: Core pool size: %d%n&quot;</span>, mExecutor.getCorePoolSize());</span><br><span class="line">            System.out.printf(<span class="string">&quot;Server: Task count: %d%n&quot;</span>, mExecutor.getTaskCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endServer</span><span class="params">()</span> &#123;</span><br><span class="line">            mExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date initDate;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Task</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        initDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s: Task %s: Created on: %s%n&quot;</span>, Thread.currentThread().getName(), name, initDate);</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s: Task %s: Started on: %s%n&quot;</span>, Thread.currentThread().getName(), name, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//let thread sleep for random time</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">duration</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">10</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s: Task %s: Doing a task during %d seconds%n&quot;</span>, Thread.currentThread().getName(), name, duration);</span><br><span class="line">            TimeUnit.SECONDS.sleep(duration);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;%s: Task %s: Finished on: %s%n&quot;</span>, Thread.currentThread().getName(), name, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Demo 2</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GradleDemo Created by lechance .</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">mExecutor</span> <span class="operator">=</span> (ThreadPoolExecutor) Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">10</span>);</span><br><span class="line">            <span class="type">FactorialCalculator</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactorialCalculator</span>(num);</span><br><span class="line">            Future&lt;Integer&gt; future = mExecutor.submit(fc);</span><br><span class="line">            results.add(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;Main: number of completed task: %d%n&quot;</span>, mExecutor.getCompletedTaskCount());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; results.size(); i++) &#123;</span><br><span class="line">                Future&lt;Integer&gt; future = results.get(i);</span><br><span class="line">                System.out.printf(<span class="string">&quot;Main: Task %d %s%n&quot;</span>, i, future.isDone());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">while</span> (mExecutor.getCompletedTaskCount() &lt; results.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Main: Result&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; results.size(); i++) &#123;</span><br><span class="line">            Future&lt;Integer&gt; f = results.get(i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;Main: Task %d: result: %d%n&quot;</span>, i, f.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//finally shutdown executor</span></span><br><span class="line">        mExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactorialCalculator</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FactorialCalculator</span><span class="params">(Integer number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">0</span> || number == <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= number; i++) &#123;</span><br><span class="line">                result *= i;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="Related-Articles"><a href="#Related-Articles" class="headerlink" title="Related Articles"></a>Related Articles</h4><p><a class="link"   href="http://www.cnblogs.com/dolphin0520/p/3920373.html" >The volatile Keyword <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>executor</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Using the Internal Storage</title>
    <url>/2017/02/27/Using-the-Internal-Storage/</url>
    <content><![CDATA[<h3 id="Using-the-Internal-Storage"><a href="#Using-the-Internal-Storage" class="headerlink" title="Using the Internal Storage"></a>Using the Internal Storage</h3><p><em>You can save files directly on the devices’s internal storage. By default, files saved to the internal storage are private to your application and other applications cannot access them (nor can the user). When the user uninstalls your application, these files are removed.</em></p>
<ul>
<li>To create and write a private file to the internal storage:<ol>
<li>Call <em>openFileOutput()</em> with the name of the file and the operating mode. This retures a <em>FileOutputStream</mark>.</li>
<li>Write to the file with <em>write()</em>.</li>
<li>Close the stream with <em>close()</em>.</li>
</ol>
</li>
</ul>
<p>For example:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">String</span>  <span class="variable">FILENAME</span> <span class="operator">=</span> <span class="string">&quot;hello_file&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> openFileOutput(FILENAME, Context.MODE_PRIVATE);</span><br><span class="line">fos.write(string.getBytes());</span><br><span class="line">fos.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><em>MODE_PRIVATE</em> will create the file (or replace a file of the same name) and make it private to your application. Other modes available are: <em>MODE_APPEND, MODE_WORLD_READABLE, and MODE_WORLD_WRITEABLE</em>.</p>
<ul>
<li>To create a file from internal storage:<ol>
<li>Call <code>openFileInput()</code> and pass it the name of the file to read, This return a <code>FileInputStream</code>.</li>
<li>Read bytes from the file with <code>read()</code>.</li>
<li>Then close stream with <code>close()</code>.</li>
</ol>
</li>
</ul>
<blockquote>
<p><b>Tip:</b> If you want to save a static file in your applcation at compile time, save the file in your project <code>res/raw/</code> directory. You can open it with <code>openRawResource()</code>, passing the <code>R.raw.&lt;filename&gt;</code> resource ID. This method returns an <code>InputStream</code> that you can use to read the file (but you cannot write to the original file).</p>
</blockquote>
<h3 id="Saving-Cache-files"><a href="#Saving-Cache-files" class="headerlink" title="Saving Cache files"></a>Saving Cache files</h3><p>If you’d like to cache some data, rather than store it persistently, you should use <code>getCacheDir()</code> to open a <code>File</code> that represents the internal directory where your application should save temporary cache files.</p>
<p>When the device is low on internal storage space, Android may delete these cache files to recover space. However, you should not rely on the system to clean up these files for you. You should always maintain the cache files yourself and stay within a reasonable limit of space consumed, such as 1MB. When the user uninstalls your application, these files are removed.</p>
<h3 id="Other-useful-methods-of-Context-Object"><a href="#Other-useful-methods-of-Context-Object" class="headerlink" title="Other useful methods of Context Object"></a>Other useful methods of <ins>Context</ins> Object</h3><ul>
<li><p><b> <code>getFilesDir()</code></b> - Gets the absolute path to the filesystem directory where your internal files are saved.</p>
</li>
<li><p><b> <code>getDir()</code></b> - Creates (or opens an existing) directory within your internal storage space.</p>
</li>
<li><p><b> <code>deleteFile()</code></b> - Deletes a file saved on the internal storage.</p>
</li>
<li><p><b> <code>fileList()</code></b> - Returns an array of files currently saved by your application.</p>
</li>
</ul>
<p>Refer to : <a class="link"   href="https://developer.android.google.cn/" >https://developer.android.google.cn <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> - Guide!</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>internal storage</tag>
      </tags>
  </entry>
  <entry>
    <title>test background image</title>
    <url>/2017/02/09/test-background-image/</url>
    <content><![CDATA[<h3 id="This-is-test-string"><a href="#This-is-test-string" class="headerlink" title="This is test string"></a>This is test string</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/bg_code.jpg"
                      alt="alter text" title="title"
                ></p>
<span id="more"></span>


<h3 id="This-is-test-string-1"><a href="#This-is-test-string-1" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-2"><a href="#This-is-test-string-2" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-3"><a href="#This-is-test-string-3" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-4"><a href="#This-is-test-string-4" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-5"><a href="#This-is-test-string-5" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-6"><a href="#This-is-test-string-6" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-7"><a href="#This-is-test-string-7" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-8"><a href="#This-is-test-string-8" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-9"><a href="#This-is-test-string-9" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-10"><a href="#This-is-test-string-10" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-11"><a href="#This-is-test-string-11" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-12"><a href="#This-is-test-string-12" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-13"><a href="#This-is-test-string-13" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-14"><a href="#This-is-test-string-14" class="headerlink" title="This is test string"></a>This is test string</h3><h3 id="This-is-test-string-15"><a href="#This-is-test-string-15" class="headerlink" title="This is test string"></a>This is test string</h3>]]></content>
  </entry>
  <entry>
    <title>Html 5 Web Workers</title>
    <url>/2017/02/12/html5-web-workers/</url>
    <content><![CDATA[<blockquote>
<p>A #web worker# is a JavaScript script executed from an HTML page that runs in the background, independently of other user-interface scripts that may also have been executed from the same HTML page. Web workers are often able to utilize multi-core CPUs more effectively.</p>
<p>The simplest use of workers is for performing a computationally expensive tasks without interrupting user interface.</p>
</blockquote>
<h2 id="Check-Web-Worker-Support"><a href="#Check-Web-Worker-Support" class="headerlink" title="Check Web Worker Support"></a>Check Web Worker Support</h2><p>Before creating a web worker. check whether the uesr’s browser support it:</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">if(typeof(Worker) !== &quot;undefined&quot;)&#123;</span><br><span class="line">    //Yes, web worker support!</span><br><span class="line">    //do something with your code...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //Sorry! No web worker support...</span><br><span class="line">&#125;</span><br><span class="line">```&quot;</span><br><span class="line"></span><br><span class="line">## Create a Web Worker File</span><br><span class="line">Now, Let&#x27;s create our web worker in an external JavaScript.</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var i = 0;</span><br><span class="line"></span><br><span class="line">function timedCount() &#123;</span><br><span class="line">    i = i + 1;</span><br><span class="line">    postMessage(i);	//which is used to post a message back to the HTML page.</span><br><span class="line">    setTimeout(&quot;timedCount&quot;, 500);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timedCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>**Note:**Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.</p>
<h2 id="Create-a-Web-Worker-Object"><a href="#Create-a-Web-Worker-Object" class="headerlink" title="Create a Web Worker Object"></a>Create a Web Worker Object</h2><h2 id="Terminate-a-Web-Worker"><a href="#Terminate-a-Web-Worker" class="headerlink" title="Terminate a Web Worker"></a>Terminate a Web Worker</h2><h2 id="Reuse-the-Web-Worker"><a href="#Reuse-the-Web-Worker" class="headerlink" title="Reuse the Web Worker"></a>Reuse the Web Worker</h2><h2 id="Full-Web-Worker-Example-Code"><a href="#Full-Web-Worker-Example-Code" class="headerlink" title="Full Web Worker Example Code"></a>Full Web Worker Example Code</h2><h2 id="Web-Worker-and-the-DOM"><a href="#Web-Worker-and-the-DOM" class="headerlink" title="Web Worker and the DOM"></a>Web Worker and the DOM</h2><p>Since web workers are in external files, they do not have access to the following JavaScript objects:</p>
<ul>
<li>The <strong>window</strong> object</li>
<li>The <strong>document</strong> object</li>
<li>The <strong>parent</strong> object</li>
</ul>
<p><em>Refer to Internet</em></p>
]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html5</tag>
        <tag>web worker</tag>
      </tags>
  </entry>
  <entry>
    <title>Easy way to understand algorithm complexity and big O notation</title>
    <url>/2017/03/25/easy-way-to-understand-algorithm-complexity-and-big-o-notation/</url>
    <content><![CDATA[<blockquote>
<p>Big O notation is the most widely used method which describes algorithm complexity-the execution time required or the space used in memory or in disk by an algorithm. Often in exams or intervews, you will be asked some questions about algorithm complexity in the following form.<br>For an algorithm that uses a data structure of size n, what is the runtime complexity or space complexity of the algorithm? The answer to sunch questions often uses big O notation to describe the alogrithm complexity, such as O(1), O(n), O(n^<sup>2</sup>) or O(log(n)).</p>
</blockquote>
<h4 id="Big-O-for-time-complexity"><a href="#Big-O-for-time-complexity" class="headerlink" title="Big O for time complexity"></a>Big O for time complexity</h4><p>Here we don’t want to discuss big O in a mathematical way. Basically, when analyzing the time complexity for an algorithm, big O notation is used to describe the rough estimae of the number of “steps” to complete the algorithm. Let’s take the following example:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//part 1</span></span><br><span class="line">    doSomething();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//part 2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//part 3</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">	        doSomething();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//part 4</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Here let’s assume that <code>doSomething</code> takes C steps to complete. The whole <i>fun(n)</i> method has 4 parts. What is the time complexity of each part for different parameters <code>n</code> ?</p>
<p>For part1, it does doSomething() so it takes constant <code>C</code> steps. Here <code>C</code> is independent to the parameter <i>n</i>.  When the time complexity is independent to the parameter, we use <em>O(1)</em> to mark it.</p>
<p>For part2, it does <code>doSomething</code> n times. Each time it takes C steps. So in total, it takes <code>C x n</code> steps to complete part2. Then as described above, we use <em>O(1)</em> to complete the C steps. Then for <code>C x n</code>, the complexity becomes <em>n x O(1)</em>. Here, an imporant rule is that <code>a x O(n)</code> equals O(an). In such case, <em>n x O(1) &#x3D; O(n)</em>. SO the time complexity of part2 is <i>O(n)</i>.</p>
<p>For part3, it has two loops. The inner loop is exactly like part2. The outer loop does part2 n times again so the time complexity for part3 is <em>n x O(n)</em> which is O(n^<sup>2</sup>)</p>
<h4 id="Rules-summary-of-big-O-notations"><a href="#Rules-summary-of-big-O-notations" class="headerlink" title="Rules summary of big O notations"></a>Rules summary of big O notations</h4><h4 id="How-to-use-big-O-notation-to-compare-algorithm-complexity-and-why"><a href="#How-to-use-big-O-notation-to-compare-algorithm-complexity-and-why" class="headerlink" title="How to use big O notation to compare algorithm complexity and why"></a>How to use big O notation to compare algorithm complexity and why</h4><h4 id="Big-O-for-space-cmplexity"><a href="#Big-O-for-space-cmplexity" class="headerlink" title="Big O for space cmplexity"></a>Big O for space cmplexity</h4><p><em>Refer to network</em></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>big 0</tag>
        <tag>time complexity</tag>
        <tag>space complexity</tag>
      </tags>
  </entry>
  <entry>
    <title>Modbus - Byte Order</title>
    <url>/2020/04/29/modbus-byte-order/</url>
    <content><![CDATA[<h5 id="高地址-低地址"><a href="#高地址-低地址" class="headerlink" title="高地址 低地址"></a>高地址 低地址</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdn.net/20180923182938492?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29xcUh1VHUxMjM0NTY3OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"
                      alt="image"
                ></p>
<h5 id="高字节-低字节"><a href="#高字节-低字节" class="headerlink" title="高字节 低字节"></a>高字节 低字节</h5><p>如int a&#x3D;16777220，化为十六进制是0x01000004则04属于低字节，01属于高字节</p>
<h5 id="大小端模式"><a href="#大小端模式" class="headerlink" title="大小端模式"></a>大小端模式</h5><p>（1）如果a在内存中的存放顺序为下图（即低字节存放在高地址），则为大端模式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdn.net/20180923183740810?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29xcUh1VHUxMjM0NTY3OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"
                      alt="image"
                ></p>
<p>（2）如果a在内存中的存放顺序为下图（即低字节存放在低地址），则为小端模式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdn.net/20180923183653465?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L29xcUh1VHUxMjM0NTY3OA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"
                      alt="image"
                ></p>
<h5 id="（3）如何互换（通过移位操作再或）"><a href="#（3）如何互换（通过移位操作再或）" class="headerlink" title="（3）如何互换（通过移位操作再或）"></a>（3）如何互换（通过移位操作再或）</h5><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">For 2 byte data (16bit)</span><br><span class="line"></span><br><span class="line">#define BigtoLittle16(A)    (( ((uint16)(A) &amp; 0xff00) &gt;&gt; 8) | \</span><br><span class="line">                            (( (uint16)(A) &amp; 0x00ff) &lt;&lt; 8))</span><br><span class="line"></span><br><span class="line">For 4 byte data (32bit)</span><br><span class="line"></span><br><span class="line">#define BigtoLittle32(A)    (( (uint32)(A) &amp; 0xff000000 &gt;&gt; 24) | \</span><br><span class="line">                            (( (uint32)(A) &amp; 0x00ff0000) &gt;&gt; 8) | \</span><br><span class="line">                            (( (uint32)(A) &amp; 0x0000ff00) &lt;&lt; 8) | \</span><br><span class="line">                            (( (uint32)(A) &amp; 0x000000ff) &lt;&lt;24))</span><br></pre></td></tr></table></figure></div>

<hr>
<p>字节顺序是指多字节数据在计算机内存中存储或者网络传输时各字节的存储顺序。</p>
<blockquote>
<p>Consider a 16-bit integer that is made up of 2 bytes. There are two ways to store the two bytes in memory: with the low-order byte at the starting address, known as little-endian byteorder, or with the high-order byte at the starting address, known as big-endian byte order.</p>
</blockquote>
<h5 id="1-大端字节序（-Big-Endian"><a href="#1-大端字节序（-Big-Endian" class="headerlink" title="1. 大端字节序（&#x3D;&#x3D;Big Endian&#x3D;&#x3D;)"></a>1. 大端字节序（&#x3D;&#x3D;Big Endian&#x3D;&#x3D;)</h5><p>最高有效位（MSB：Most Significant Bit）存储于最低内存地址处；</p>
<p>最低有效位（LSB：Lowest Significant Bit）存储于最高内存地址处。</p>
<h5 id="2-小端字节序（-Little-Endian-）"><a href="#2-小端字节序（-Little-Endian-）" class="headerlink" title="2. 小端字节序（&#x3D;&#x3D;Little Endian&#x3D;&#x3D;）"></a>2. 小端字节序（&#x3D;&#x3D;Little Endian&#x3D;&#x3D;）</h5><p>最高有效位（MSB：Most Significant Bit）存储于最高内存地址处；</p>
<p>最低有效位（LSB：Lowest Significant Bit）存储于最低内存地址处。</p>
<h5 id="主机字节序"><a href="#主机字节序" class="headerlink" title="主机字节序"></a>主机字节序</h5><p>不同的主机有不同的字节序，如x86为小端字节序，Motorola 6800为大端字节序，ARM字节序是可配置的。</p>
<h5 id="网络字节序"><a href="#网络字节序" class="headerlink" title="网络字节序"></a>网络字节序</h5><p>网络字节顺序是TCP&#x2F;IP中规定好的一种数据表示格式，它与具体的CPU类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释。网络字节顺序采用<strong>big endian</strong>排序方式。</p>
<hr>
<p>为使网络程序具有可移植性，使同样的C代码在大端和小端计算机上编译后都能正常运行，可以调用以下库函数做网络字节序和主机字节序的转换。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;  </span><br><span class="line">uint32_t htonl(uint32_t hostlong);  </span><br><span class="line">uint16_t htons(uint16_t hostshort);  </span><br><span class="line">uint32_t ntohl(uint32_t netlong);  </span><br><span class="line">uint16_t ntohs(uint16_t netshort);</span><br></pre></td></tr></table></figure></div>

<p>这些函数名很好记:</p>
<ul>
<li>h表示host</li>
<li>n表示network</li>
<li>l表示32位长整数</li>
<li>s表示16位短整数</li>
</ul>
<p>例如htonl表示将32位的长整数从主机字节序转换为网络字节序，例如将IP地址转换后准备发送。如果主机是小端字节序，这些函数将参数做相应的大小端转换然后返回，如果主机是大端字节序，这些函数不做转换，将参数原封不动地返回。</p>
<p><a class="link"   href="https://link.zhihu.com/?target=https://github.com/BeginMan/BookNotes/tree/master/Unix/Unix-Network-Programming-Volume-1-The-Sockets-Networking-API-3rd-Edition" >《UNIX网络编程 卷1：套接字联网API（第3版）》 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>中检查主机的大端小端程序如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;unp.h&quot;</span><br><span class="line"> </span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        short       s;</span><br><span class="line">        char        c[sizeof(short)];</span><br><span class="line">    &#125; un;</span><br><span class="line"> </span><br><span class="line">    un.s = 0x0102;                                  //短整数变量中存放2个字节的值0x0102</span><br><span class="line">    printf(&quot;%s: &quot;, CPU_VENDOR_OS);                  //标识CPU类型，厂家和操作系统版本，如:i386-apple-darwin14.5.0</span><br><span class="line">    if(sizeof(short) == 2) &#123;</span><br><span class="line">        //查看它的两个连续字节c[0],c[1]来确定字节序</span><br><span class="line">        if (un.c[0] == 1 &amp;&amp; un.c[1] == 2)</span><br><span class="line">            printf(&quot;big-endian\n&quot;);</span><br><span class="line">        else if (un.c[0] == 2 &amp;&amp; un.c[1] == 1)</span><br><span class="line">            printf(&quot;litter-endian\n&quot;);</span><br><span class="line">        else</span><br><span class="line">            printf(&quot;unknown\n&quot;);</span><br><span class="line">    &#125; else</span><br><span class="line">        printf(&quot;sizeof(short) = %lu\n&quot;, sizeof(short));</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>还有一个更加简明的方式，如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"> </span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int x = 0x12345678;</span><br><span class="line">    unsigned char *p = (unsigned char *) &amp;x;</span><br><span class="line">    printf(&quot;%x,%x,%x,%x\n&quot;, p[0], p[1], p[2], p[3]);</span><br><span class="line"> </span><br><span class="line">    unsigned int y = htonl(x);</span><br><span class="line">    p = (unsigned char *)&amp;y;</span><br><span class="line">    printf(&quot;%x,%x,%x,%x\n&quot;, p[0], p[1], p[2], p[3]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">78 56 34 12  </span><br><span class="line">12 34 56 78</span><br></pre></td></tr></table></figure></div>

<p>即本主机是小端字节序，而经过htonl转换后为网络字节序，即大端。</p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>modbus</tag>
        <tag>byte order</tag>
      </tags>
  </entry>
  <entry>
    <title>modbus rtu ascll tcp</title>
    <url>/2021/10/10/modbus-rtu-ascll-tcp/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/projectimage_mic/RS-485-MODBUS-Serial-Communication-using-Arduino-UNO-as-Slave.jpg"
                      alt="RS-485 MODBUS Serial Communication using Arduino UNO as Slave"
                ></p>
<p>RS-485 MODBUS Serial Communication using Arduino UNO as Slave</p>
<p><strong>Modbus is a Serial Communication protocol</strong> which was discovered by Modicon in 1979 and it is used for transmitting data over serial lines between the industrial electronic devices. RS-485 Modbus uses <a class="link"   href="https://circuitdigest.com/tags/rs485" >RS-485 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for transmission lines. It should be noted that <strong>Modbus is a software protocol</strong> and <strong>not a hardware protocol</strong>. It is divided into two parts such as Modbus Master and Modbus Slave. In RS-485 Modbus network there is one Master and 127 Slaves each with unique address from 1 to 127. In this <strong>MAX485 Arduino</strong> project, we will use Arduino Uno as Slave for serial communication.</p>
<p>Modbus are mostly used in <strong>PLCs</strong> (Programmable Logic Controllers). And apart from this, the Modbus is also used in Healthcare, Transportation, <a class="link"   href="https://circuitdigest.com/home-automation-projects" >Home Automation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> etc. Modbus has 255 function codes and there are mainly three popular versions of Modbus:</p>
<ul>
<li>MODBUS RTU</li>
<li>MODBUS ASCII</li>
<li>MODBUS&#x2F;TCP</li>
</ul>
<p><strong>What is the difference between Modbus ASCII and Modbus RTU?</strong></p>
<p><strong>Modbus RTU and Modbus ASCII</strong> talks the same protocol. The only difference is that the bytes being transmitted over the wire are presented as binary with RTU and as readable ASCII with Modbus RTU. <strong>Modbus RTU will be used in this tutorial</strong>.</p>
<p>This tutorial is about using <strong>RS-485 Modbus communication with Arduino UNO as Slave.</strong> Here we install <strong>Simply Modbus Master Software</strong> in PC and control two LEDs and Servo Motor by using RS-485 as transmission line. These LEDs and servo motor are connected with Slave Arduino and controlled by sending values using Master Modbus Software. Since this tutorial uses RS-485, it is recommended to first go through <a class="link"   href="https://circuitdigest.com/microcontroller-projects/rs485-serial-communication-between-arduino-uno-and-arduino-nano" >RS485 Serial Communication between Arduino Uno and Arduino Nano <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. RS485 can also be used with other controllers for serial communication:</p>
<ul>
<li><a class="link"   href="https://circuitdigest.com/microcontroller-projects/rs485-serial-communication-between-arduino-and-raspberry-pi" >RS-485 Serial Communication between Raspberry Pi &amp; Arduino UNO <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://circuitdigest.com/node/3490" >Serial Communication Between STM32F103C8 and Arduino UNO using RS-485 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<p>Let’s begin by exploring some background about the RS-485 and Modbus. Also learn more about various <a class="link"   href="https://circuitdigest.com/tutorial/serial-communication-protocols" >Serial Communication protocols <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> here.</p>
<h3 id="RS-485-Serial-Communication"><a href="#RS-485-Serial-Communication" class="headerlink" title="RS-485 Serial Communication"></a><strong>RS-485 Serial Communication</strong></h3><p><strong>RS-485 is an asynchronous serial communication protocol</strong> which doesn’t not require clock. It uses a technique called <strong>differential signal</strong> to transfer binary data from one device to another.</p>
<p><strong>So what is this differential signal transfer method??</strong></p>
<p>Differential signal method works by creating a differential voltage by using a positive and negative 5V. It provides a <strong>Half-Duplex</strong> communication when using <strong>two wires</strong> and <strong>Full-Duplex</strong> requires <strong>4 fours</strong> <strong>wires</strong>.</p>
<p><strong>By using this method:</strong></p>
<ul>
<li>RS-485 supports higher data transfer rate of 30Mbps maximum.</li>
<li>It also provides maximum data transfer distance compared to <a class="link"   href="https://circuitdigest.com/article/rs232-serial-communication-protocol-basics-specifications" >RS-232 protocol <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. It transfers data up to 1200-meter maximum.</li>
<li>The main advantage of RS-485 over RS-232 is the multiple slave with single Master while RS-232 supports only single slave.</li>
<li>Can have a maximum of 32 devices connected to RS-485 protocol.</li>
<li>Another advantage of the RS-485 is immune to the noise as they use <strong>differential signal method</strong> to transfer.</li>
<li>RS-485 is faster compared to I2C protocol.</li>
</ul>
<h3 id="Connecting-RS-485-with-Arduino"><a href="#Connecting-RS-485-with-Arduino" class="headerlink" title="Connecting RS-485 with Arduino"></a><strong>Connecting RS-485 with Arduino</strong></h3><p>RS-485 Module can be connected to any microcontroller having serial port. For using RS-485 module with microcontrollers, a module called <strong>5V MAX485 TTL to RS485 which is based on Maxim MAX485 IC</strong> is needed as it allows serial communication over long distance of 1200 meters. It is bidirectional and half duplex and has data transfer rate of  2.5 Mbps. This module requires a voltage of 5V.</p>
<p><strong>Pin-Out of RS-485:</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/Pinout-of-RS-485.jpg"
                      alt="Pinout of RS-485"
                ></p>
<table>
<thead>
<tr>
<th><strong>Pin Name</strong></th>
<th><strong>Pin Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td>VCC</td>
<td>5V</td>
</tr>
<tr>
<td>A</td>
<td>Non-inverting Receiver InputNon-Inverting Driver Output</td>
</tr>
<tr>
<td>B</td>
<td>Inverting Receiver InputInverting Driver Output</td>
</tr>
<tr>
<td>GND</td>
<td>GND (0V)</td>
</tr>
<tr>
<td>R0</td>
<td>Receiver Out (RX pin)</td>
</tr>
<tr>
<td>RE</td>
<td>Receiver Output (LOW-Enable)</td>
</tr>
<tr>
<td>DE</td>
<td>Driver Output (HIGH-Enable)</td>
</tr>
<tr>
<td>DI</td>
<td>Driver Input (TX pin)</td>
</tr>
</tbody></table>
<h3 id="USB-to-RS-485-Converter-Module"><a href="#USB-to-RS-485-Converter-Module" class="headerlink" title="USB to RS-485 Converter Module"></a><strong>USB to RS-485 Converter Module</strong></h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/USB-to-RS-485-Converter-Module.png"
                      alt="USB to RS-485 Converter Module"
                ></p>
<p>This is an USB to RS485 Converter Adapter module which supports WIN7, XP, Vista, Linux, Mac OS and provides an easy to use RS485 interface by means of using COM port in the computer**.** This module is plug-and-play device**. There are no command structures, whatever is sent to the Virtual COM Port is automatically converted to RS485 and vice versa. The module is completely self-powered from the USB bus.** <em>So, no need of external power supply for operation.</em></p>
<p>It shows up as a Serial&#x2F;COM port and is accessible from applications or hyper-terminal. <em>This converter provides half-duplex RS-485 communication. The Baud rate range is 75 bps to 115200 bps, maximum up to 6 Mbps.</em></p>
<p>To use this device there are various Modbus Software available in the internet. In this tutorial a software called Simply Modbus Software is used.</p>
<h3 id="Simply-Modbus-Master-Software"><a href="#Simply-Modbus-Master-Software" class="headerlink" title="Simply Modbus Master Software"></a><strong>Simply Modbus Master Software</strong></h3><p>Modbus Master Software application is needed to <strong>send data to slave Modbus RS-485 Arduino device via COM</strong>.</p>
<p>Simply Modbus Master is a data communication test software. You can download the <a class="link"   href="http://www.simplymodbus.ca/RTUmaster.htm" >Simply Modbus Master <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> from the given link and learn more about it by referring <a class="link"   href="http://www.simplymodbus.ca/MasterManual8.htm" >Software Manual <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<p>Before using the software, it is important to get familiar with the following terminologies.</p>
<p><strong>Slave ID:</strong></p>
<p>Each slave in a network is assigned a unique unit address from 1 to 127. When the master requests data, the first byte it sends is the Slave address. This way each slave knows after the first byte whether or not to ignore the message.</p>
<p><strong>Function code:</strong></p>
<p>The second byte sent by the Master is the Function code. This number tells the slave which table to access and whether to read from or write to the table.</p>
<p><strong>Supported Register Function codes:</strong></p>
<table>
<thead>
<tr>
<th><strong>Function Code</strong></th>
<th><strong>Action</strong></th>
<th><strong>Table Name</strong></th>
</tr>
</thead>
<tbody><tr>
<td>04 (04 hex)</td>
<td>Read</td>
<td>Analog Input Registers</td>
</tr>
<tr>
<td>03 (03 hex)</td>
<td>Read</td>
<td>Analog Output Holding Registers</td>
</tr>
<tr>
<td>06 (06 hex)</td>
<td>Write single</td>
<td>Analog Output Holding Register</td>
</tr>
<tr>
<td>16 (10 hex)</td>
<td>Write multiple</td>
<td>Analog Output Holding Registers</td>
</tr>
</tbody></table>
<p><strong>Supported Coil Function codes:</strong></p>
<table>
<thead>
<tr>
<th><strong>Function Code</strong></th>
<th><strong>Action</strong></th>
<th><strong>Table Name</strong></th>
</tr>
</thead>
<tbody><tr>
<td>02 (02 hex)</td>
<td>Read</td>
<td>Discrete Input Contacts</td>
</tr>
<tr>
<td>01 (01 hex)</td>
<td>Read</td>
<td>Discrete Output Coils</td>
</tr>
<tr>
<td>05 (05 hex)</td>
<td>Write single</td>
<td>Discrete Output Coil</td>
</tr>
<tr>
<td>15 (0F hex)</td>
<td>Write multiple</td>
<td>Discrete Output Coils</td>
</tr>
</tbody></table>
<p><strong>CRC:</strong></p>
<p>CRC stands for Cyclic Redundancy check. It is two bytes added to the end of every Modbus message for error detection.</p>
<h3 id="Tools-Required"><a href="#Tools-Required" class="headerlink" title="Tools Required"></a><strong>Tools Required</strong></h3><p><strong>Hardware</strong></p>
<ul>
<li>Arduino UNO</li>
<li>MAX-485 TTL to RS-485 Converter Module</li>
<li>USB to RS-485 Converter Module</li>
<li>LED (2)</li>
<li>1k-Resistor (2)</li>
<li>16x2 LCD display</li>
<li>10k Potentiometer</li>
<li>Servo Motor SG-90</li>
</ul>
<p><strong>Software</strong></p>
<ul>
<li><a class="link"   href="http://www.simplymodbus.ca/download.htm" >Simply Modbus Master <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<h3 id="Circuit-Diagram"><a href="#Circuit-Diagram" class="headerlink" title="Circuit Diagram"></a><strong>Circuit Diagram</strong></h3><p><a href="https://circuitdigest.com/fullimage?i=circuitdiagram_mic/Circuit-Diagram-for-RS-485-MODBUS-Serial-Communication-using-Arduino-UNO-as-Slave.png"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/circuitdiagram_mic/Circuit-Diagram-for-RS-485-MODBUS-Serial-Communication-using-Arduino-UNO-as-Slave.png"
                      alt="Circuit Diagram for RS-485 MODBUS Serial Communication using Arduino UNO as Slave"
                ></a></p>
<p><strong>Circuit Connection between MAX-485 TTL to RS-485 converter module and Arduino UNO:</strong></p>
<table>
<thead>
<tr>
<th><strong>Arduino UNO</strong></th>
<th><strong>MAX-485 TTL to RS-485 Converter Module</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0(RX)</td>
<td>RO</td>
</tr>
<tr>
<td>1(TX)</td>
<td>DI</td>
</tr>
<tr>
<td>4</td>
<td>DE &amp; RE</td>
</tr>
<tr>
<td>+5V</td>
<td>VCC</td>
</tr>
<tr>
<td>GND</td>
<td>GND</td>
</tr>
</tbody></table>
<p><strong>Circuit Connection between MAX-485 TTL to RS-485 Module and USB to RS-485 converter:</strong></p>
<table>
<thead>
<tr>
<th><strong>MAX-485 TTL to RS-485****Converter Module</strong></th>
<th><strong>USB to RS-485 Module****Connected with PC</strong></th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>A</td>
</tr>
<tr>
<td>B</td>
<td>B</td>
</tr>
</tbody></table>
<p><strong>Circuit Connections between Arduino UNO and 16x2 LCD display:</strong></p>
<table>
<thead>
<tr>
<th><strong>16x2 LCD</strong></th>
<th><strong>Arduino UNO</strong></th>
</tr>
</thead>
<tbody><tr>
<td>VSS</td>
<td>GND</td>
</tr>
<tr>
<td>VDD</td>
<td>+5V</td>
</tr>
<tr>
<td>V0</td>
<td>To control pin of potentiometer for contrast&#x2F;brightness control of 16x2 LCD</td>
</tr>
<tr>
<td>RS</td>
<td>8</td>
</tr>
<tr>
<td>RW</td>
<td>GND</td>
</tr>
<tr>
<td>E</td>
<td>9</td>
</tr>
<tr>
<td>D4</td>
<td>10</td>
</tr>
<tr>
<td>D5</td>
<td>11</td>
</tr>
<tr>
<td>D6</td>
<td>12</td>
</tr>
<tr>
<td>D7</td>
<td>13</td>
</tr>
<tr>
<td>A</td>
<td>+5V</td>
</tr>
<tr>
<td>K</td>
<td>GND</td>
</tr>
</tbody></table>
<p><strong>Circuit Connection between 2 LEDs, Servo Motor and Arduino UNO:</strong></p>
<table>
<thead>
<tr>
<th><strong>Arduino UNO</strong></th>
<th><strong>LED1</strong></th>
<th><strong>LED2</strong></th>
<th><strong>Servo Motor</strong></th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>Anode through 1k resistor</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>5</td>
<td>-</td>
<td>Anode through 1k resistor</td>
<td>-</td>
</tr>
<tr>
<td>6</td>
<td>-</td>
<td>-</td>
<td>PWM pin (Orange)</td>
</tr>
<tr>
<td>+5V</td>
<td>-</td>
<td>-</td>
<td>+5V (RED)</td>
</tr>
<tr>
<td>GND</td>
<td>Cathode GND</td>
<td>Cathode GND</td>
<td>GND (Brown)</td>
</tr>
</tbody></table>
<h3 id="Programming-Arduino-UNO-for-RS-485-MODBUS-Slave"><a href="#Programming-Arduino-UNO-for-RS-485-MODBUS-Slave" class="headerlink" title="Programming Arduino UNO for RS-485 MODBUS Slave"></a><strong>Programming Arduino UNO for RS-485 MODBUS Slave</strong></h3><p>The Arduino UNO is configured as <strong>Modbus Slave</strong>. Also, <strong>Arduino UNO is attached with two LEDs and one Servo Motor</strong>. So the slave Arduino is controlled from the Master Modbus Software. The communication between the Arduino UNO and the Modbus Master Software is accomplished by using the RS-485 module. For connecting it with PC, the USB to RS-485 converter module is used. And the Arduino UNO with <strong>MAX-485 TTL to RS-485</strong> converter module, the whole setup will look file follows:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/projectimage_mic/RS-485-MODBUS-Serial-Communication-using-Arduino-UNO-as-Slave.jpg"
                      alt="RS-485 MODBUS Serial Communication using Arduino UNO as Slave"
                ></p>
<p>For using Modbus in Arduino UNO, a library <strong>&lt;ModbusRtu.h&gt;</strong> is used. This library is used for communicating with RS-485 Modbus Master or Slave via RTU protocol. <a class="link"   href="https://github.com/smarmengol/Modbus-Master-Slave-for-Arduino/blob/master/ModbusRtu.h" >Download the Modbus RTU  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and add the library in the sketch by following <strong>Sketch-&gt;include library-&gt;Add .zip Library</strong>. Programming has some major steps which will be explained below.</p>
<p>Initially, include the required library. ModbusRTU library is for using RS-485 Modbus communication, and the liquid crystal library is for using LCD with Arduino UNO, and the servo library is for using Servo motor with Arduino UNO.</p>
<pre><code>#include&lt;ModbusRtu.h&gt;      
#include&lt;LiquidCrystal.h&gt;  
#include &lt;Servo.h&gt;         
</code></pre>
<p>Now the LED anode pins that are connected with Arduino pins 2 and 5 are defined as LED1 and LED2.</p>
<pre><code>#define led1 2             
#define led2 5             
</code></pre>
<p>Next the object for accessing Liquid Crystal class is declared with the LCD pins (RS, E, D4, D5, D6, D7) that are connected with Arduino UNO.</p>
<pre><code>LiquidCrystal lcd(8,9,10,11,12,13);  
</code></pre>
<p>When LCD is done, Initialize servo object for class Servo. Also Initialize bus object for class Modbus.</p>
<pre><code>Servo servo;                      
Modbus bus;                       
</code></pre>
<p>Next for storing values for Modbus communication an array is declared with the three values initialized with zero.</p>
<pre><code>uint16_t modbus_array[] = &#123;0,0,0&#125;;   
</code></pre>
<p>In *<strong>setup*</strong> function, firstly the LCD is set in 16x2 mode and a welcome message is displayed and cleared.</p>
<pre><code>  lcd.begin(16,2);                //Lcd set in 16x2 mode
  lcd.print(&quot;RS-485 Modbus&quot;);     //Welcome Message
  lcd.setCursor(0,1);
  lcd.print(&quot;Arduino Slave&quot;);
  delay(5000);
  lcd.clear();
</code></pre>
<p>After this, LED1 and LED2 pins are set as output pins.</p>
<pre><code>  pinMode(led1,OUTPUT);          
  pinMode(led2,OUTPUT);          
</code></pre>
<p>The servo pulse pin connected to PWM pin 6 of Arduino is attached.</p>
<pre><code>  servo.attach(6);              
</code></pre>
<p>Now for the Modbus communication the following parameters are set. First ‘1’ represents Slave ID, second ‘1’ represents that it uses RS-485 to transfer data and ‘4’ represents RS-485 DE&amp;RE pin connected to Arduino UNO.</p>
<pre><code>  bus = Modbus(1,1,4);           
</code></pre>
<p>The Modbus slave is set at 9600 baudrate.</p>
<p>The loop starts with the definition of bus poll and <em>bus.poll()</em> is used to write and receive value from the master Modbus.</p>
<pre><code>bus.poll(modbus_array,sizeof(modbus_array)/sizeof(modbus_array[0]));     
</code></pre>
<p>This method is used to check if there is any data available at the serial port.</p>
<p>If there is any data available at serial port the Modbus RTU library will check the message (check the device address, data length, and CRC) and perform the required action.</p>
<p><strong>For example</strong> to write or read any value from master, the ModbusRTU must receive an unsigned 16-bit integer array and its length from the Master Modbus. This array carries the data that is written from the master.</p>
<p>In this tutorial there are <strong>three arrays for LED1, LED2 and Servo motor angle.</strong></p>
<p>First to turn ON or OFF the LED1 <strong>modbus_array[0]</strong> is used.</p>
<pre><code>  if (modbus_array[0] == 0)    //Depends upon value in modubus_array[0] written by Master Modbus
  &#123;
    digitalWrite(led1,LOW);    //LED OFF if 0
    lcd.setCursor(0,0);
    lcd.print(&quot;L1:OFF&quot;);
  &#125;
  else
  &#123;
     digitalWrite(led1,HIGH);  //LED ON if value other than 0
     lcd.setCursor(0,0);
     lcd.print(&quot;L1:ON&quot;);       
  &#125;
</code></pre>
<p>Next to turn ON or OFF the LED2 <strong>modbus_array[1]</strong> is used.</p>
<pre><code> if (modbus_array[1] == 0)    //Depends upon value in modbus_array[1] written by Master Modbus
  &#123;
    digitalWrite(led2,LOW);   //LED OFF if 0
    lcd.setCursor(8,0);
    lcd.print(&quot;L2:OFF&quot;);
  &#125;
  else
  &#123;
     digitalWrite(led2,HIGH);  //LED ON if value other than 0
     lcd.setCursor(9,0);
     lcd.print(&quot;L2:ON&quot;);
&#125;
</code></pre>
<p>Next to set the angle of the Servo motor the <strong>modbus_array[2]</strong> used and value is printed in the 16x2 LCD display.</p>
<pre><code>  int pwm = modbus_array[2];
  servo.write(pwm);         
  lcd.setCursor(0,1);       
  lcd.print(&quot;Servo angle:&quot;);
  lcd.print(pwm);              
  delay(200);
  lcd.clear();
</code></pre>
<p>This finishes programming Arduino UNO for working it as MODBUS Slave. The next step will be testing it as Modbus Slave.</p>
<h3 id="Testing-the-Arduino-UNO-as-Rs485-Modbus-Slave"><a href="#Testing-the-Arduino-UNO-as-Rs485-Modbus-Slave" class="headerlink" title="Testing the Arduino UNO as Rs485 Modbus Slave"></a><strong>Testing the Arduino UNO as Rs485 Modbus Slave</strong></h3><p>After the circuit connections are completed and the code is uploaded to the Arduino UNO, its time to connect the <strong>USB to RS-485 module</strong> with the PC where the <strong>Simple Modbus Master</strong> software is installed.</p>
<p>Open the device manager and check the COM port according to your PC where the USB to RS-485 Module is connected and after that open the Simply Modbus Master 8.1.1 software.</p>
<p>\1. After <em>Simply Modbus Software</em> is opened now open the Write option.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/Testing-the-Arduino-UNO-as-RS-485-Modbus-Slave.jpg"
                      alt="Testing the Arduino UNO as RS485 Modbus Slave"
                ></p>
<p>\2. After the <em>Simply Modbus Master</em> Write is opened. Set the parameters</p>
<p>Mode in RTU, COM port according to your PC (mine was COM6), Baud at 9600, Data Bits 8, Stop bit 1, Parity None and Slave ID as 1.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/Setting-Paramters-for-Arduino-UNO-as-RS-485-Modbus-Slave.jpg"
                      alt="Setting Parameters for Arduino UNO as RS-485 Modbus Slave"
                ></p>
<p>\3. After that set first register as 40001 and values to write is 3 and the function code as 16 (Write Holding Register).</p>
<p>After that write 1 to 40001 (For LED1 on) and 1 to 40002 (For LED2 on) and 90 to 40003 (For Servo Motor Angle) and then click SEND button.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/Controlling-Servo-using-Arduino-UNO-as-RS-485-Modbus-Slave.jpg"
                      alt="Controlling Servo using Arduino UNO as RS-485 Modbus Slave"
                ></p>
<p><strong>You can see both LED status is ON and servo angle at 90 degree.</strong></p>
<p>\4. After that enter 40001 as 1 and 40002 as 0 and 40003 as 180 and click SEND button.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/Controlling-Servo-angle-at-180-using-Arduino-UNO-as-RS-485-Modbus-Slave.jpg"
                      alt="Controlling Servo at angle 180 using Arduino UNO as RS-485 Modbus Slave"
                ></p>
<p><strong>Now Servo angle at 180 and the led1 is ON and led2 is OFF.</strong></p>
<p>\5. Now writing 135 to 40003 and 40001 as 0 and 40002 as 1.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://circuitdigest.com/sites/default/files/inlineimages/u1/Controlling-Servo-angle-at-135-using-Arduino-UNO-as-RS-485-Modbus-Slave.jpg"
                      alt="Controlling Servo at angle 135 using Arduino UNO as RS-485 Modbus Slave"
                ></p>
<p><strong>Now the servo position is at 135 and led1 is OFF and led2 is ON.</strong></p>
<p>This is how <strong>RS-485 Modbus can be used in serial communication with Arduino UNO as Slave.</strong> In next tutorial we will use the Arduino Uno as master in MODBUS commination.</p>
<p><strong>Find the complete code and a Demonstration video below.</strong></p>
<p>Code</p>
<pre><code>//RS-485 Modbus Slave (Arduino UNO)
//Circuit Digest
#include&lt;ModbusRtu.h&gt;       //Library for using Modbus in Arduino
#include&lt;LiquidCrystal.h&gt;   //Library for using 16x2 LCD display
#include &lt;Servo.h&gt;          //Library for using Servo Motor
#define led1 2              //Define as 2 led1 
#define led2 5              //Define as 5 led2
LiquidCrystal lcd(8,9,10,11,12,13);   //initizlize lcd object with pins (RS,E,D4,D5,D6,D7) for class liquid crystal
Servo servo;                          //Initilize servo object for class Servo
Modbus bus;                          //Define Object bus for class modbus 
uint16_t modbus_array[] = &#123;0,0,0&#125;;    //Array initilized with three 0 values
                      
void setup()
&#123;
  lcd.begin(16,2);                //Lcd set in 16x2 mode
  lcd.print(&quot;RS-485 Modbus&quot;);     //Welcome Message
  lcd.setCursor(0,1); 
  lcd.print(&quot;Arduino Slave&quot;);
  delay(5000);
  lcd.clear();
  
  pinMode(led1,OUTPUT);           //Led1 set as OUTPUT
  pinMode(led2,OUTPUT);           //Led2 set as OUTPUT
  servo.attach(6);                //Servo PWM pin 6
  bus = Modbus(1,1,4);            //Modbus slave ID as 1 and 1 connected via RS-485 and 4 connected to DE &amp; RE pin of RS-485 Module 
  bus.begin(9600);                //Modbus slave baudrate at 9600
&#125;
void loop()
&#123;
   bus.poll(modbus_array,sizeof(modbus_array)/sizeof(modbus_array[0]));       //Used to receive or write value from Master 
  
  if (modbus_array[0] == 0)    //Depends upon value in modubus_array[0] written by Master Modbus
  &#123;
    digitalWrite(led1,LOW);    //LED OFF if 0
    lcd.setCursor(0,0);
    lcd.print(&quot;L1:OFF&quot;);
  &#125;
  else
  &#123;
     digitalWrite(led1,HIGH);  //LED ON if value other than 0
     lcd.setCursor(0,0);
     lcd.print(&quot;L1:ON&quot;);        
  &#125; 
 if (modbus_array[1] == 0)    //Depends upon value in modbus_array[1] written by Master Modbus
  &#123;
    digitalWrite(led2,LOW);   //LED OFF if 0
    lcd.setCursor(8,0);
    lcd.print(&quot;L2:OFF&quot;);
  &#125;
  else
  &#123;
     digitalWrite(led2,HIGH);  //LED ON if value other than 0
     lcd.setCursor(9,0);
     lcd.print(&quot;L2:ON&quot;);
  &#125;
  
  int pwm = modbus_array[2]; //Depends upon value in modbus_array[1] written by Master Modbus
 
  servo.write(pwm);          //Write Received value (0 to 180) from Modbus Master
  lcd.setCursor(0,1);        
  lcd.print(&quot;Servo angle:&quot;);
  lcd.print(pwm);              //Prints Angle in 16x2 LCD display.
  delay(200); 
  lcd.clear();
&#125;
</code></pre>
<p>Video</p>
<p>Tags</p>
<p><a class="link"   href="https://circuitdigest.com/tags/arduino-uno" >Arduino Uno <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/tags/arduino" >Arduino <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/tags/modbus" >MODBUS <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/tags/rs485" >RS485 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/tags/serial-communication" >Serial Communication <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/tags/servo-motor" >Servo Motor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>Submitted by <a class="link"   href="https://circuitdigest.com/users/ameeth" >Ameeth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Mon, 11&#x2F;18&#x2F;2019 - 16:19</p>
<p><a class="link"   href="https://circuitdigest.com/comment/30804#comment-30804" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="modbus-simply-modbus-software"><a href="#modbus-simply-modbus-software" class="headerlink" title="modbus simply modbus software"></a><a class="link"   href="https://circuitdigest.com/comment/30804#comment-30804" >modbus simply modbus software <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>hi , i tested both program of arduino RS485 modbus as master and slave communication , great thanks for this project and tutorial ,</p>
<p>but i want to send 16 keys data to simply modbus software as arduino in slave mode but also need recive data</p>
<p>from modbus like LED on OFF cammand and error massage , here in bothe example Arduino as master and arduino as Slave there are differant library and command are used , in hardware in RS 485 module DE and RE pin is short and in master mode not , so i want ask how i can use this project as slave mode but as transreceiver mode , want send digital keys data and receive cammand etc , please suggest.</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/benlemlih7gmailcom" >Abdellah Benlemlih <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Wed, 12&#x2F;15&#x2F;2021 - 19:16</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/30804#comment-30804" >modbus simply modbus software  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>by <a class="link"   href="https://circuitdigest.com/users/ameeth" >Ameeth <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/34764#comment-34764" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Hi-Ameeth-Did-you-find-how"><a href="#Hi-Ameeth-Did-you-find-how" class="headerlink" title="Hi Ameeth, Did you find how"></a><a class="link"   href="https://circuitdigest.com/comment/34764#comment-34764" >Hi Ameeth, Did you find how <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Hi Ameeth, Did you find how to read and write in the same time ? Thank you</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/christopher-8" >Christopher <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Fri, 01&#x2F;10&#x2F;2020 - 17:36</p>
<p><a class="link"   href="https://circuitdigest.com/comment/31091#comment-31091" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Slave-and-Master-in-one-Network"><a href="#Slave-and-Master-in-one-Network" class="headerlink" title="Slave and Master in one Network"></a><a class="link"   href="https://circuitdigest.com/comment/31091#comment-31091" >Slave and Master in one Network <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Hello Pramoth,</p>
<p>thanks for your posts about the master and slave. I had fun testing your systems! I and some others surely want to push it one step further. Is it possible to include one master and multiple slave devices in one RS485 network?</p>
<p>Previosly I worked with a pre setup professional Modbus system that containd one communication module, one output module and one input module. The communication module sent requests to the input and output modules.</p>
<p>Can I configure the DIY system specified as follows:</p>
<ul>
<li>Communication Arduino Nano as the master (ID0) transmitts requests and responds<ul>
<li>The Master sends a request to a slave and waits for a reply</li>
<li>After the reply the the response is processed and sent to a application interface</li>
<li>No error report is needed</li>
</ul>
</li>
<li>Output Arduino Nano as Slave1 (ID1) responds to “Read Input Register” (FC04) to the Master (ID0)<ul>
<li>The Slave checks the request and processes the required action</li>
<li>No error report is needed</li>
</ul>
</li>
<li>Input Arduino Nano as Slave2 (ID2) responds to “Write Single Register” (FC06) to the Master (ID0)<ul>
<li>The Slave checks the request and processes the required action</li>
<li>No error report is needed</li>
</ul>
</li>
</ul>
<p>I faced some problems when implementing your master and slave approaches into one system</p>
<ol>
<li>How to use the libraries in wholistic way, or in the best case, only to use one library?</li>
<li>How to properly wire the physical layer: Which DI, DE, RE and RO go to which Arduino?</li>
<li>How to configure the DE and RE pins? Which are enabled?</li>
<li>How to deal with preTransmission() and postTransmission() (ModbusMaster.h)?</li>
<li>How to access the different IDs and registers from one Master?<ol>
<li>Your <em>Modbus Master</em> explictly uses writeSingleRegister() to addresses <strong>specifed via the Arduino code</strong></li>
<li>Your <em>Modbus Slave</em> writes Outputs to <strong>addresses arbitrarily specified via the ModbuSimply Modbus Master tool</strong>. The addresses have not been defined on the slave device in the Arduino code. The polls the uint16_t array modbus_array with poll(). How can we better understand the poll() function? Or even better how can we define addresses that can be recognized by the application interface?</li>
</ol>
</li>
<li>Display the stream over one Port (trhough the communcation module) and use a application interface (e.g. <em>Simply Modbus Master</em>, <em>ModbusServerPro</em>, <em>Pymodbus</em>, or whatever)</li>
</ol>
<p>Did you try to build a system like this on your own or has anybody helpful suggestions? I like to share my thoughts with you.</p>
<p>I got a “half working” system that read and wrote data. My <em>ModbusServerPro</em> software indicated read and write access. The reads through the potentiometer were well displayed but the LED randomly went on and off. I guess the data was stored in a not well defined memory location through TX and RX due to code misinterpretation.</p>
<p>Thanks a lot!</p>
<p>Chris</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/buddika-nilakshana" >Buddika Nilakshana <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Tue, 04&#x2F;28&#x2F;2020 - 15:28</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/31091#comment-31091" >Slave and Master in one Network <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> by <a class="link"   href="https://circuitdigest.com/users/christopher-8" >Christopher <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/31634#comment-31634" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Modbus-Communication"><a href="#Modbus-Communication" class="headerlink" title="Modbus Communication"></a><a class="link"   href="https://circuitdigest.com/comment/31634#comment-31634" >Modbus Communication <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p><strong><a class="link"   href="https://circuitdigest.com/users/christopher-8" >Christopher Can I have you email ID or conatct number. <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></strong></p>
<p><strong>I try to do this project but failed …need some help from you</strong></p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/lee-jae-yun" >Lee Jae Yun <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Mon, 02&#x2F;03&#x2F;2020 - 06:47</p>
<p><a class="link"   href="https://circuitdigest.com/comment/31229#comment-31229" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="if-i-want-to-connect-more-then-2-devices-by-RS485-to-Modbus"><a href="#if-i-want-to-connect-more-then-2-devices-by-RS485-to-Modbus" class="headerlink" title="if i want to connect more then 2 devices by RS485 to Modbus"></a><a class="link"   href="https://circuitdigest.com/comment/31229#comment-31229" >if i want to connect more then 2 devices by RS485 to Modbus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>i have to prepare more then 2 same arduino UNO it presented in this tutorial right?</p>
<p>and i put port number one by one?</p>
<p>after, send message and done?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/joyce-1" >joyce <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Thu, 03&#x2F;05&#x2F;2020 - 04:05</p>
<p><a class="link"   href="https://circuitdigest.com/comment/31420#comment-31420" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Error-message-form-Modbus-master"><a href="#Error-message-form-Modbus-master" class="headerlink" title="Error message form Modbus master"></a><a class="link"   href="https://circuitdigest.com/comment/31420#comment-31420" >Error message form Modbus master <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>I get Error-1073807339 ocurred at write in SIMM write 8.0vi-&gt;SMM 8.0vi</p>
<p>possible reasons: VISa 0xBFFF0015 time out expired before operation completed.</p>
<p>Well what is going on?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/buddika-nilakshana" >Buddika Nilakshana <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Tue, 04&#x2F;28&#x2F;2020 - 15:29</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/31420#comment-31420" >Error message form Modbus master <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> by <a class="link"   href="https://circuitdigest.com/users/joyce-1" >joyce <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/31635#comment-31635" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="its-due-to-Com-port"><a href="#its-due-to-Com-port" class="headerlink" title="its due to Com port"></a><a class="link"   href="https://circuitdigest.com/comment/31635#comment-31635" >its due to Com port <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>its due to Com port mismatching…check the right com port and redo</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/emte" >emte <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Wed, 07&#x2F;08&#x2F;2020 - 20:43</p>
<p><a class="link"   href="https://circuitdigest.com/comment/32129#comment-32129" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Modbus-Slave"><a href="#Modbus-Slave" class="headerlink" title="Modbus Slave"></a><a class="link"   href="https://circuitdigest.com/comment/32129#comment-32129" >Modbus Slave <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>hallo, i have a project. i want to communicate arduino with plc using modbus rs485. your post about modbus arduino as slave is running well. but i want to send from arduino (as slave) to plc but i dont know that syntax, can you give a example program to send data? thank you</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/gladyne-berlian-alif-zago" >Gladyne Berlia… <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Sat, 10&#x2F;24&#x2F;2020 - 14:29</p>
<p><a class="link"   href="https://circuitdigest.com/comment/32801#comment-32801" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Why-it’s-must-used-holding"><a href="#Why-it’s-must-used-holding" class="headerlink" title="Why it’s must used holding"></a><a class="link"   href="https://circuitdigest.com/comment/32801#comment-32801" >Why it’s must used holding <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Why it’s must used holding register ?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/emanuel-1" >Emanuel <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Mon, 12&#x2F;07&#x2F;2020 - 19:04</p>
<p><a class="link"   href="https://circuitdigest.com/comment/33234#comment-33234" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Hello-it-was-a-great"><a href="#Hello-it-was-a-great" class="headerlink" title="Hello, it was a great"></a><a class="link"   href="https://circuitdigest.com/comment/33234#comment-33234" >Hello, it was a great <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Hello, it was a great explanation.</p>
<p>I have one doubt about how the modbus-array[] was filled.</p>
<p>Thanks</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/dedearfandy222gmailcom" >Dede Arfandy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Thu, 04&#x2F;01&#x2F;2021 - 23:55</p>
<p><a class="link"   href="https://circuitdigest.com/comment/33754#comment-33754" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="That-is-great-project-but-i"><a href="#That-is-great-project-but-i" class="headerlink" title="That is great project, but i"></a><a class="link"   href="https://circuitdigest.com/comment/33754#comment-33754" >That is great project, but i <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>That is great project, but i can’t found the library. Can you give me the library, please?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/amin-0" >amin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Mon, 10&#x2F;11&#x2F;2021 - 23:31</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/33754#comment-33754" >That is great project, but i <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> by <a class="link"   href="https://circuitdigest.com/users/dedearfandy222gmailcom" >Dede Arfandy <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/34509#comment-34509" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Hi"><a href="#Hi" class="headerlink" title="Hi"></a><a class="link"   href="https://circuitdigest.com/comment/34509#comment-34509" >Hi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Hi</p>
<p>can u find library?</p>
<p>if u find it, please send me.</p>
<p>thanks</p>
<p><a class="link"   href="mailto:&#x61;&#x73;&#x61;&#x64;&#x69;&#x2e;&#109;&#x6f;&#x68;&#x61;&#109;&#109;&#x61;&#100;&#97;&#109;&#105;&#110;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d;" >&#x61;&#x73;&#x61;&#x64;&#x69;&#x2e;&#109;&#x6f;&#x68;&#x61;&#109;&#109;&#x61;&#100;&#97;&#109;&#105;&#110;&#64;&#103;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#x6d; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/%E6%9E%97%E7%90%AE%E5%81%89" >林琮偉 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Fri, 07&#x2F;02&#x2F;2021 - 14:27</p>
<p><a class="link"   href="https://circuitdigest.com/comment/34167#comment-34167" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="how-to-send-a-broadcast"><a href="#how-to-send-a-broadcast" class="headerlink" title="how to send a broadcast?"></a><a class="link"   href="https://circuitdigest.com/comment/34167#comment-34167" >how to send a broadcast? <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>how to send a broadcast?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/hobby3025" >hobby3025 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Tue, 08&#x2F;10&#x2F;2021 - 13:06</p>
<p><a class="link"   href="https://circuitdigest.com/comment/34301#comment-34301" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="I-tried-this-project-make"><a href="#I-tried-this-project-make" class="headerlink" title="I tried this project, make"></a><a class="link"   href="https://circuitdigest.com/comment/34301#comment-34301" >I tried this project, make <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>I tried this project, make the same circuit and have the same software, but it doesn’t work, have someone an idea which problem I have?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/ashish-mishra-0" >Ashish Mishra <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Tue, 08&#x2F;10&#x2F;2021 - 13:22</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/34301#comment-34301" >I tried this project, make <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> by <a class="link"   href="https://circuitdigest.com/users/hobby3025" >hobby3025 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/34302#comment-34302" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Please-explain-in-which"><a href="#Please-explain-in-which" class="headerlink" title="Please explain in which"></a><a class="link"   href="https://circuitdigest.com/comment/34302#comment-34302" >Please explain in which <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Please explain in which section you are facing problem ?</p>
<p>Did your code run sucessfully ? did you properly interface all the componens ?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/hobby3025" >hobby3025 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Tue, 08&#x2F;10&#x2F;2021 - 13:37</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/34302#comment-34302" >Please explain in which <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> by <a class="link"   href="https://circuitdigest.com/users/ashish-mishra-0" >Ashish Mishra <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/34304#comment-34304" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="I-have-wired-the-Arduino-Uno"><a href="#I-have-wired-the-Arduino-Uno" class="headerlink" title="I have wired the Arduino Uno"></a><a class="link"   href="https://circuitdigest.com/comment/34304#comment-34304" >I have wired the Arduino Uno <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>I have wired the Arduino Uno like the schematic on the picture, have an MAX485 the De &amp; RE Pin are connected to D4, If i will write data via SimpleMosbusMaster to the Arduino uno via the RS485 board i get an error no response, so the Arduino maybe don’t get data or don’t answer.</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/hobby3025" >hobby3025 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Tue, 08&#x2F;10&#x2F;2021 - 13:44</p>
<p>In reply to <a class="link"   href="https://circuitdigest.com/comment/34304#comment-34304" >I have wired the Arduino Uno <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> by <a class="link"   href="https://circuitdigest.com/users/hobby3025" >hobby3025 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://circuitdigest.com/comment/34305#comment-34305" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="the-funny-part-is-that-i-use"><a href="#the-funny-part-is-that-i-use" class="headerlink" title="the funny part is, that i use"></a><a class="link"   href="https://circuitdigest.com/comment/34305#comment-34305" >the funny part is, that i use <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>the funny part is, that i use the chip45 bootloader with RS485 and this bootloader works fine, without any problems</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/amin-0" >amin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Mon, 10&#x2F;11&#x2F;2021 - 23:29</p>
<p><a class="link"   href="https://circuitdigest.com/comment/34508#comment-34508" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Hi-1"><a href="#Hi-1" class="headerlink" title="Hi"></a><a class="link"   href="https://circuitdigest.com/comment/34508#comment-34508" >Hi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Hi</p>
<p>I can’t found the library. Can you give me the library, please?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/amin-1" >amin <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Fri, 10&#x2F;15&#x2F;2021 - 19:45</p>
<p><a class="link"   href="https://circuitdigest.com/comment/34519#comment-34519" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Hi-2"><a href="#Hi-2" class="headerlink" title="Hi"></a><a class="link"   href="https://circuitdigest.com/comment/34519#comment-34519" >Hi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Hi</p>
<p>this is very helfull i tryed and it works.</p>
<p>but my problem is i have to make the same projet on software serial<br>can you help me please?</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/reidsimgmailcom" >Reid <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Wed, 02&#x2F;02&#x2F;2022 - 04:38</p>
<p><a class="link"   href="https://circuitdigest.com/comment/34890#comment-34890" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="I-got-it-working-to-send-data"><a href="#I-got-it-working-to-send-data" class="headerlink" title="I got it working to send data"></a><a class="link"   href="https://circuitdigest.com/comment/34890#comment-34890" >I got it working to send data <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>I got it working to send data to turn on LEDs. Can you teach me how to slave send data to Simply Modbus Master? I have some sensors on the Slave.</p>
<p>Submitted by <a class="link"   href="https://circuitdigest.com/users/edlamahesh143" >Mahesh Edla <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> on Wed, 09&#x2F;07&#x2F;2022 - 13:04</p>
<p><a class="link"   href="https://circuitdigest.com/comment/35627#comment-35627" >Permalink <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Dear-Pramoth-Many-thanks…"><a href="#Dear-Pramoth-Many-thanks…" class="headerlink" title="Dear Pramoth, Many thanks…"></a><a class="link"   href="https://circuitdigest.com/comment/35627#comment-35627" >Dear Pramoth, Many thanks… <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><p>Dear Pramoth,</p>
<p>Many thanks for your explanation and for sharing knowledge with other people. I have a quick question and please see below.</p>
<p>If I write one line or 2 line outputs, the program is running fine. However, if I write a lengthy program, the Modbus connection is not working.</p>
<p><strong>For instance, I wrote a program like this;</strong></p>
<p>if (modbus[0] &#x3D;&#x3D;0)</p>
<p>{ digitalWrite (led1, HIGH);</p>
<p>digitalWrite (led1, HIGH);</p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>digitalWrite (led1, HIGH);</p>
<p>digitalWrite (led1, LOW);</p>
<p>delay(3000);</p>
<p>digitalWrite (led1, LOW);</p>
<p>digitalWrite (led1, LOW);</p>
<p>delay(1000);</p>
<p>digitalWrite (led1, LOW);</p>
<p>digitalWrite (led1, HIGH);</p>
<p>delay(3000);</p>
<p>digitalWrite (led1, LOW);</p>
<p>digitalWrite (led1, LOW);</p>
<p>delay(1000);</p>
<p>}</p>
<p>When the Modbus array address: 40000 &#x3D; 0, then it is communicating. However, when the Modbus array: 40000&#x3D;1; then it stopped communicating to my PLC.</p>
<p>Any idea?</p>
<p>I look forward to seeing your response, please.</p>
<p>Kind regards,</p>
<p>Mahesh Edla.</p>
]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>modbus</tag>
        <tag>iot</tag>
        <tag>rtu</tag>
        <tag>arduino</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Diagrams</title>
    <url>/2023/09/22/Markdown-Diagrams/</url>
    <content><![CDATA[<h3 id="https-support-typora-io-Draw-Diagrams-With-Markdown"><a href="#https-support-typora-io-Draw-Diagrams-With-Markdown" class="headerlink" title="https://support.typora.io/Draw-Diagrams-With-Markdown"></a><a class="link"   href="https://support.typora.io/Draw-Diagrams-With-Markdown" >https://support.typora.io/Draw-Diagrams-With-Markdown <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h3><h3 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h3><blockquote>
<p>note: graph TD[RL,LR];</p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A[SFSFSFSDF SDF]--&gt;|One| B[SFDSFSF SDF];</span><br><span class="line">    A--&gt;|One| C;</span><br><span class="line">    B--&gt;|One| D;</span><br><span class="line">    C--&gt;|One| D;</span><br><span class="line">    F--&gt;A</span><br></pre></td></tr></table></figure></div>

<h3 id="Sequence-diagram"><a href="#Sequence-diagram" class="headerlink" title="Sequence diagram"></a>Sequence diagram</h3><p><strong>关键字</strong></p>
<ul>
<li>title，定义序列图的标题</li>
<li>participant，定义时序图中的对象</li>
<li>note，定义对时序图中的部分说明</li>
</ul>
<p><strong>方位控制</strong></p>
<ol>
<li>left of，表示当前对象的左侧</li>
<li>right of，表示当前对象的右侧</li>
<li>over，表示覆盖在当前对象（们）的上面</li>
</ol>
<p>{actor}，表示时序图中的具体对象（名称自定义）</p>
<p><strong>箭头分为以下几种</strong>：</p>
<ol>
<li>-&gt; 表示实线实箭头</li>
<li>–&gt; 表示虚线实箭头</li>
<li>-&gt;&gt; 表示实线虚箭头</li>
<li>–&gt;&gt; 表示虚线虚箭头</li>
</ol>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    </span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right of John: Rational thoughts &lt;br/&gt;prevail!</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    John-&gt;&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure></div>


<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    #participant, 参与者 </span><br><span class="line">    </span><br><span class="line">    participant A </span><br><span class="line">    participant B </span><br><span class="line">    participant C </span><br><span class="line">    </span><br><span class="line">    note left of A: A左侧说明 </span><br><span class="line">    note over B: 覆盖B的说明 </span><br><span class="line">    note right of C: C右侧说明 </span><br><span class="line">    </span><br><span class="line">    # - 代表实线, -- 代表虚线; &gt; 代表实箭头, &gt;&gt; 代表虚箭头 </span><br><span class="line">    </span><br><span class="line">    A-&gt;A:自己到自己 </span><br><span class="line">    A-&gt;B:实线实箭头 </span><br><span class="line">    A--&gt;C:虚线实箭头 </span><br><span class="line">    B-&gt;&gt;C:实线虚箭头 </span><br><span class="line">    B--&gt;&gt;A:虚线虚箭头</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Gantt-diagram"><a href="#Gantt-diagram" class="headerlink" title="Gantt diagram"></a>Gantt diagram</h3><p>甘特图是一类条形图，由Karol Adamiechi在1896年提出, 而在1910年Henry Gantt也独立的提出了此种图形表示。通常用在对项目终端元素和总结元素的开始及完成时间进行的描述 </p>
<p><strong>关键字如下</strong></p>
<table>
<thead>
<tr>
<th>Title</th>
<th>标题</th>
</tr>
</thead>
<tbody><tr>
<td>dateFormat</td>
<td>日期格式</td>
</tr>
<tr>
<td>section</td>
<td>模块</td>
</tr>
<tr>
<td>Completed</td>
<td>已经完成</td>
</tr>
<tr>
<td>Active</td>
<td>当前正在进行</td>
</tr>
<tr>
<td>Future</td>
<td>后续待处理</td>
</tr>
<tr>
<td>crit</td>
<td>关键阶段</td>
</tr>
<tr>
<td>日期缺失</td>
<td>默认从上一项完成后</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>%%	<Name of Activity>		: crit if critical else empty,done, active or empty, reference name or empty, Start Date or dependency, End Date or Duration</strong></p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    dateFormat YYYY-MM-DD</span><br><span class="line">    title Adding GANTT diagram functionality to mermaid</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    section A section</span><br><span class="line">    Complete task   :done,crit  des1,   2014-01-06,2014-01-20</span><br><span class="line">    Active task     :active, des2 after des1,2014-01-09,2014-03-11</span><br><span class="line">    Future task     :    dest3,after des2 2014-01-10,2014-08-11</span><br><span class="line">    Future task2    :   dest4,  after dest3,2014-11-11</span><br><span class="line">    </span><br><span class="line">    section B secion</span><br><span class="line">    complete task :crit, ref,2014-05-01</span><br><span class="line">    active task :active after ref, 2014-07-01</span><br><span class="line">    active task2    :active ,after ref 2014-12-11,2014-12-21</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  DD/MM/YY</span><br><span class="line">        title Project Name</span><br><span class="line"></span><br><span class="line">	Section Pre-condition</span><br><span class="line">	Activity 1      :21/12/16, 22/12/16</span><br><span class="line">	Activity 2      :21/12/16, 22/12/16</span><br><span class="line">	Activity 3      :16/01/17, 02/02/17</span><br><span class="line">	Activity 4      :01/02/17, 02/02/17</span><br><span class="line"></span><br><span class="line">	Section     Kick-off</span><br><span class="line">	Activity 5  :01/02/17, 03/02/17</span><br><span class="line">	Activity 6	:01/02/17, 03/02/17</span><br><span class="line">	Project Initiated :01/02/17, 03/02/17</span><br><span class="line"></span><br><span class="line">	Section Tech Design</span><br><span class="line">	Technical Design		:crit, active, T1, 06/02/17, 21/03/17</span><br><span class="line"></span><br><span class="line">	Section Delivery	</span><br><span class="line">	Activity 7		:06/02/17, 10/02/17</span><br><span class="line">	Activity 8			:10/02/17, 14/02/17</span><br><span class="line">	Order				:15/02/17, 14/03/17</span><br><span class="line">	Deployment			:crit, 15/03/17, 21/03/17</span><br><span class="line">	Activity 9			:crit,T2, after T1, 23/03/17</span><br><span class="line">	Project Close-Down		:after T2, 24/03/17</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat YYYY-MM-DD</span><br><span class="line">        title &lt;Name of the project&gt;</span><br><span class="line">        </span><br><span class="line">        section Phase 1 Name</span><br><span class="line">        Activity 1			:	 done,    des1, 2017-01-06, 2017-01-08</span><br><span class="line">        Activity 2               	:	 active,  des2, 2017-01-09, 2017-01-12</span><br><span class="line">        Activity 3               	:        	  des3, 2017-01-12, 5d</span><br><span class="line">        Activity 4              	:         	  des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section Phase 2 Name</span><br><span class="line">        Activity 5 			: crit, done,		2017-01-06, 24h</span><br><span class="line">        Activity 6		        : crit, done, 		after des1, 2d</span><br><span class="line">        Activity 7		        : crit, active, 		    3d</span><br><span class="line">        Activity 8			: crit,			 	    5d</span><br><span class="line">        Activity 9			:			 	    2d</span><br><span class="line">        Activity 10			: 			 	    1d</span><br><span class="line"></span><br><span class="line">        section Phase 3 Name</span><br><span class="line">        Activity 11			: 	active,   a1,	after des1, 3d</span><br><span class="line">        Activity 12			:			after a1  , 20h</span><br><span class="line">        Activity 13			:		 doc1, 	after a1  , 48h</span><br><span class="line"></span><br><span class="line">        section Phase 4 Name</span><br><span class="line">        Activity 12			:			after doc1, 3d</span><br><span class="line">        Activity 15			: 	  			    20h</span><br><span class="line">        Activity 16			: 			   	    48h</span><br></pre></td></tr></table></figure></div>

<hr>
<hr>
<h3 id="Class-diagram-experimental"><a href="#Class-diagram-experimental" class="headerlink" title="Class diagram -: experimental"></a>Class diagram -: experimental</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">Class01 &lt;|-- AveryLongClass : Cool</span><br><span class="line">Class03 *-- Class04</span><br><span class="line">Class05 o-- Class06</span><br><span class="line">Class07 .. Class08</span><br><span class="line">Class09 --&gt; C2 : Where am i?</span><br><span class="line">Class09 --* C3</span><br><span class="line">Class09 --|&gt; Class07</span><br><span class="line">Class07 : equals()</span><br><span class="line">Class07 : Object[] elementData</span><br><span class="line">Class01 : size()</span><br><span class="line">Class01 : int chimp</span><br><span class="line">Class01 : int gorilla</span><br><span class="line">Class08 &lt;--&gt; C2: Cool label</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://mermaidjs.github.io/img/class.png"
                      alt="classDiagram"
                ></p>
<h3 id="Git-graph-experimental"><a href="#Git-graph-experimental" class="headerlink" title="Git graph -: experimental"></a>Git graph -: experimental</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitGraph:</span><br><span class="line">options</span><br><span class="line">&#123;</span><br><span class="line">    &quot;nodeSpacing&quot;: 150,</span><br><span class="line">    &quot;nodeRadius&quot;: 10</span><br><span class="line">&#125;</span><br><span class="line">end</span><br><span class="line">commit</span><br><span class="line">branch newbranch</span><br><span class="line">checkout newbranch</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">checkout master</span><br><span class="line">commit</span><br><span class="line">commit</span><br><span class="line">merge newbranch</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://mermaidjs.github.io/img/git.png"
                      alt="gitDiagram"
                ></p>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>coporate-network-topolgy-demo</title>
    <url>/2023/07/03/coporate-network-topolgy-demo/</url>
    <content><![CDATA[<h4 id="Network-Devices-Topology"><a href="#Network-Devices-Topology" class="headerlink" title="Network Devices Topology"></a>Network Devices Topology</h4><pre class="mermaid">graph TB;
    INTERNET --> |STATIC IP-122.227.33.110 / ADSL-dynamic-ip|FW
    FW[FW 192.168.88.252 / https:65443 ssh:22345]--> AC[AC 192.168.88.253];
    AC--> C[SWITCH-L3 192.168.88.254];
    
    C--> |eth-trunk 1|HJ[HJ 192.168.88.251];
    C--> |eth-trunk 1|HJ[HJ 192.168.88.251];
    
    C--> |192.168.88.5|5F[5F ];
    C--> |192.168.88.4|4F[4F ];
    C--> |192.168.88.2|2F[2F ];
    C--> |192.168.88.1|1F[1F ];
    C--> |192.168.88.3|MWS[MWS ];
    1F--> |192.168.88.6|B1F[B1F ];
    MWS--> |192.168.88.7|SS1F[SS1F ];
    MWS--> |192.168.88.8|SS4F[SS4F ];
    MWS--> | 192.168.88.10|SS6F[SS6F];


    HJ--> |192.168.88.11|ESXi-1[ESXi-01]
    HJ--> |192.168.88.11|ESXi-1[ESXi-01]
    
    HJ--> |192.168.88.12|ESXi-2[ESXi-02]
    HJ--> |192.168.88.12|ESXi-2[ESXi-02]
    
    HJ--> |192.168.88.|HWS[OceanStor 5110 v5] 
    HJ--> |192.168.88.|HWS[OceanStor 5110 v5] 
    
    ESXi-1[ESXi-1] --> HWS[OceanStor 5110 v5]
    ESXi-1[ESXi-1] --> HWS[OceanStor 5110 v5]
    
    ESXi-2[ESXi-2] --> HWS[OceanStor 5110 v5]
    ESXi-2[ESXi-2] --> HWS[OceanStor 5110 v5]</pre>

<h4 id="HJ-Switch-interface-topology-for-Virtualization"><a href="#HJ-Switch-interface-topology-for-Virtualization" class="headerlink" title="HJ Switch interface topology for Virtualization"></a>HJ Switch interface topology for Virtualization</h4><pre class="mermaid">graph TB;
CoreSwitch-->|Eth-Trunk|HJ[192.168.88.251]
CoreSwitch-->|Eth-Trunk|HJ[192.168.88.251]
HJ --> |GE0/0/19|ESXi1[ESXi1-manage-interface]
HJ --> |GE0/0/20|ESXi1[OceanStor-manage-interface]</pre>

<h4 id="Logic-Topology-for-Virtualization"><a href="#Logic-Topology-for-Virtualization" class="headerlink" title="Logic Topology for Virtualization"></a>Logic Topology for Virtualization</h4><pre class="mermaid">graph TB;
vSPHERE -->|192.168.1.10|vCENTER[vCENTER Server]
vCENTER -->|192.168.1.11|ESXI1[ESXI1 XFUSION1]
vCENTER -->|192.168.1.12|ESXI2[ESXI2 XFUSION2]
ESXI1 --> iSCSI[iSCSI HW OceanStor]
ESXI2 --> iSCSI[iSCSI HW OceanStor]</pre>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>demo</tag>
        <tag>network</tag>
      </tags>
  </entry>
</search>
